<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Philips.DI.Interfaces.Services.Messaging</name>
    </assembly>
    <members>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.BaseBrokerCallbackService">
            <summary>
            To be used and implemented by the service object
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.BaseBrokerCallbackService.Finalize">
            <summary>
            Disposes the not yet disposed unmanaged resources if any
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.BaseBrokerCallbackService.#ctor">
            <summary>
            Protected constructor for the derived class
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.BaseBrokerCallbackService.RegisterWorker(Philips.DI.Interfaces.Services.Messaging.IWorker)">
            <summary>
            Registers worker and stores it in a list
            </summary>
            <param name="worker"></param>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.BaseBrokerCallbackService.Send``1(``0)">
            <summary>
            Raises an event to all the clients 
            </summary>
            <typeparam name="TMessage">Event message</typeparam>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.BaseBrokerCallbackService.Dispose">
            <summary>
            Disposes all the Workers of this instance
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.BaseBrokerCallbackService.Dispose(System.Boolean)">
            <summary>
            D
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.BaseBrokerCallbackService.InitializeWorker(Philips.DI.Interfaces.Services.Messaging.IWorker)">
            <summary>
            This should be implemented with calling to the method RegisterHandler.
            This should be get called only from the Messaging Framework.
            </summary>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.IInProcSubscriber">
            <summary>
            Interface for IN-Proc subscriber for intra process communication.
            </summary>
            <example>
            <code>
             MessagingService _messagingService = new MessagingService();
             IInProcSubscriber subscriber = _messagingService.ProxyForInProc().ConvertTo&lt;IInProcSubscriber&gt;();
             string recievedMsg = "";
             subscriber.Subscribe&lt;TestMessage&gt;((TestMessage message) =&gt; { recievedMsg = message.Value; });
            </code>
            </example>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IInProcSubscriber.Subscribe``1(System.Action{``0})">
            <summary>
            Registering a subscriber to get the notification of messages for particular message type
            </summary>
            <param name="action">Action delegate to be invoked of mesage type.</param>
            <typeparam name="T">Generic Message type <see cref="T:Philips.DI.Interfaces.Services.Messaging.Model.Message"/></typeparam>
            <exception cref="T:System.ArgumentNullException" >if action is null, throws ArgumentNullException.<see cref="T:System.ArgumentNullException"/></exception>
            <returns>Subscription ID</returns>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IInProcSubscriber.Subscribe``1(System.Action{``0},System.ComponentModel.ISynchronizeInvoke)">
            <summary>
            Registering a subscriber to get the notification of messages for particular message type
            </summary>
            <param name="action">Action delegate to be invoked of mesage type.</param>
            <typeparam name="T">Generic Message type <see cref="T:Philips.DI.Interfaces.Services.Messaging.Model.Message"/></typeparam>
            <param name="synchronizeInvoker">SynchronizeInvoker instance</param>
            <exception cref="T:System.ArgumentNullException" >if action is null, throws ArgumentNullException.<see cref="T:System.ArgumentNullException"/></exception>
            <returns>Subscription ID</returns>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IInProcSubscriber.Unsubscribe``1(System.Action{``0})">
            <summary>
            Un-registering the subscriber based on action delegate.
            </summary>
            <param name="action">Action delegate to be unsubscribed of mesage type.</param>
            <typeparam name="T">Generic Message type <see cref="T:Philips.DI.Interfaces.Services.Messaging.Model.Message"/></typeparam>
            <exception cref="T:System.ArgumentNullException" >if action is null, throws ArgumentNullException.<see cref="T:System.ArgumentNullException"/></exception>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IInProcSubscriber.Unsubscribe(System.String)">
            <summary>
            Un-registering the subscriber based on subscription ID.
            </summary>
            <param name="subscriptionID">subscription ID to be unsubscribed</param>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.IInProcPublisher">
            <summary>
            Interface for IN-Proc publisher for intra process communication.
            </summary>
            <example>
            <code>
             MessagingService _messagingService = new MessagingService();
             IInProcPublisher publisher = (IInProcPublisher)_messagingService.ProxyForInProc();
             string publishMsg = "message1";
             TestMessage msg = new TestMessage() { Value = publishMsg };
             publisher.Publish&lt;TestMessage&gt;(msg);
            </code>
            </example>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IInProcPublisher.Publish``1(``0)">
            <summary>
            To publish a message corresponding to mesage type
            </summary>
            <typeparam name="T">Generic Message type <see cref="T:Philips.DI.Interfaces.Services.Messaging.Model.Message"/></typeparam>
            <param name="message">content of the message</param>
            <exception cref="T:System.ArgumentNullException" >if message is null, throws ArgumentNullException.<see cref="T:System.ArgumentNullException"/></exception>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.IMessagingService">
            <summary>
            IMessagingService : Messaging Service Interface for client has to start using messaging framework
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IMessagingService.Proxy(Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint)">
            <summary>
            Proxy : will create IMQService based on the service endpoint object passed.
            </summary>
            <param name="serviceEndPoint">Service end point object.</param>
            <returns>
            returns instance of IMQService based on following steps:       
            Step 1: Create service and return, if not step 2
            Step 2: return null
            </returns>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IMessagingService.Proxy(System.String)">
            <summary>
            Proxy : will create IEndPoint based on the service endpoint name passed.
            </summary>
            <param name="endPointName">
            End point name: Name of the service in Configuration file. (or) Name of the external services.               
            </param>
            <returns>        
            return instance of IMQService based on following steps:        
            Step 1: Search Service definition from configuration and create service and return, if not step 2
            Step 2: return null.
            </returns>
            <exception cref="T:System.InvalidOperationException" >if proxy creation failed, throws InvalidOperationException.<see cref="T:System.InvalidOperationException"/></exception>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IMessagingService.ProxyForInProc">
            <summary>
            Gets IN-Proc proxy service for intra process communication.
            </summary>
            <returns>returns instance of IMQService. It has to be type casted to respective 
            returns instance of IMQService</returns>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.IMessagingServiceDispose">
            <summary>    
            Interface used to dispose messaging service and service manger factory.
            Note: Hence this service is used to shut the service factory(singleton), this might cause other messaging service instance in the same process.
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IMessagingServiceDispose.Dispose">
            <summary>
            Initiate the shutdown process of messaging service.
            Note: Hence this method call is used to shut(dispose) the service factory(singleton), this might cause other messaging service instance in the same process.
            </summary>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.Model.EndPointType">
            <summary>
            MQType : Messaging middle ware type
            </summary>
        </member>
        <member name="F:Philips.DI.Interfaces.Services.Messaging.Model.EndPointType.Bind">
            <summary>
            The Bind
            </summary>
        </member>
        <member name="F:Philips.DI.Interfaces.Services.Messaging.Model.EndPointType.Connect">
            <summary>
            The Connect
            </summary>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.Model.ErrorMessage">
            <summary>
            This message indicates a error has been received
            for a message sent or subscribed.
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.Model.ErrorMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Philips.DI.Interfaces.Services.Messaging.Model.ErrorMessage"/> class.
            </summary>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.Model.ErrorMessage.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.Model.ErrorMessage.StackTrace">
            <summary>
            Gets or sets the stack.
            </summary>
            <value>
            The stack.
            </value>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.Model.ErrorMessage.InnerException">
            <summary>
            Gets or sets the exception causing the error.
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.Model.ErrorMessage.ToString">
            <summary>
            Override ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.Model.Message">
            <summary>
            This is the base calss for any message that can be 
            sent\received using the messaging platform.
            </summary>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.Model.Message.SyncId">
            <summary>
            Gets or sets the synchronize identifier.
            </summary>
            <value>
            The synchronize identifier.
            </value>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.Model.Message.TypeName">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.Model.Message.IsError">
            <summary>
            Gets or sets a value indicating whether this instance has error.
            </summary>
            <value>
              <c>true</c> if this instance is error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.Model.Message.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.Model.Message.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Philips.DI.Interfaces.Services.Messaging.Model.Message"/> class.
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.Model.Message.ToString">
            <summary>
            Override ToString() for debugging purposes
            </summary>
            <returns></returns>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.Model.MQType">
            <summary>
            MQType : Messaging middle ware type
            </summary>
        </member>
        <member name="F:Philips.DI.Interfaces.Services.Messaging.Model.MQType.ZeroMQ">
            <summary>
            The zero mq
            </summary>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint">
            <summary>
            ServiceEndPoint
            Service End Point Data Structre 
            </summary>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint.Name">
             <summary>
            Gets or sets the end point name.
             </summary>
             <value>
            The end point name.
             </value>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint.Host">
             <summary>
            Gets or sets the host(ip address).
             </summary>
             <value>
            The host, The defalut value is local host.
             </value>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint.Port">
             <summary>
            Gets or sets the Port number.
             </summary>
             <value>
            The port.
             </value>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint.EndPointType">
            <summary>
            Gets or sets the EndPointType
            </summary>
            /// <value>
            The EndPointType.
            </value>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint.Topology">
            <summary>
            Gets or sets the topology.
            </summary>
            <value>
            The topology.
            </value>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint.Serializer">
            <summary>
            Gets the serializer.
            </summary>
            <value>
            The serializer.
            </value>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint.Transport">
            <summary>
            Transport
            </summary>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint.MqType">
            <summary>
            Message Queue Type
            </summary>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint.Empty">
            <summary>
            Empty
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint.Equals(Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint)">
            <summary>
            Equals
            </summary>
            <param name="serviceEndPoint"></param>
            <returns></returns>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.Model.MQServiceStartStopEventArgs">
            <summary>
            MQ Service Start stop Event Augments 
            </summary>
        </member>
        <member name="F:Philips.DI.Interfaces.Services.Messaging.Model.MQServiceStartStopEventArgs.ServiceEndPoint">
            <summary>
            Service EndPoint
            </summary>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.Model.Topology">
            <summary>
            Messaging Topology
            </summary>
        </member>
        <member name="F:Philips.DI.Interfaces.Services.Messaging.Model.Topology.PAIR">
            <summary>
            The pair
            </summary>
        </member>
        <member name="F:Philips.DI.Interfaces.Services.Messaging.Model.Topology.PUB">
            <summary>
            The pub
            </summary>
        </member>
        <member name="F:Philips.DI.Interfaces.Services.Messaging.Model.Topology.SUB">
            <summary>
            The sub
            </summary>
        </member>
        <member name="F:Philips.DI.Interfaces.Services.Messaging.Model.Topology.DEALER">
            <summary>
            The req
            </summary>
        </member>
        <member name="F:Philips.DI.Interfaces.Services.Messaging.Model.Topology.ROUTER">
            <summary>
            The router
            </summary>
        </member>
        <member name="F:Philips.DI.Interfaces.Services.Messaging.Model.Topology.BROKER">
            <summary>
            The broker
            </summary>
        </member>
        <member name="F:Philips.DI.Interfaces.Services.Messaging.Model.Topology.None">
            <summary>
            None
            </summary>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.Model.TransportType">
            <summary>
            Transport type
            </summary>
        </member>
        <member name="F:Philips.DI.Interfaces.Services.Messaging.Model.TransportType.TCP">
            <summary>
             (tcp://hostname:port): communication over the network
            </summary>
        </member>
        <member name="F:Philips.DI.Interfaces.Services.Messaging.Model.TransportType.INPROC">
            <summary>
             (inproc://name): communication within the same process (between threads)
            </summary>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.IDealer">
            <summary>
            Dealer interface
            </summary>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.IDealer.SynchronizeInvoker">
            <summary>
            SynchronizeInvoker
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IDealer.RegisterAction``1(System.Action{``0})">
            <summary>
            Registers the handler.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IDealer.Send``1(``0)">
            <summary>
            Asynchronously sends the specified request  without expecting any response .
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <param name="message">The message.</param>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IDealer.SendAsync``2(``0)">
            <summary>
            Asynchronously sends request with Task as response.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="message">The message.</param>
            <returns>Returns task from task completion source, <seealso cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> </returns>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IDealer.SendSync``2(``0)">
            <summary>
            Synchronously sends request expecting for a response.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="message">The message.</param>
            <returns>Returns task from task completion source, <seealso cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> </returns>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IDealer.ClearActions">
            <summary>
            Clears the handlers.
            </summary>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.IMQService">
            <summary>
            Base interface for all the supported topology by messaging framework.
            This interface define basic functionalities of all the topology.
            </summary>
        </member>
        <member name="E:Philips.DI.Interfaces.Services.Messaging.IMQService.ReceiveError">
            <summary>
            Occurs when [receive error].
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IMQService.Start(System.Boolean)">
            <summary>
            Start processing the messages.
            </summary>
            <param name="purge">
            if set to <c>true</c> [purge].
            </param>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IMQService.Stop">
            <summary>
            Stops processing the messages.
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IMQService.ConvertTo``1">
            <summary>
            Convert IMQService to Following valid Type
            01. Type-of(IDealer) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IDealer"/>
            02. Type-of(IBroker) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IBroker"/>
            03. Type-of(IWorker) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IWorker"/>
            04. Type-of(IPublish) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IPublish"/>
            05. Type-of(IRouter) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IRouter"/>
            06. Type-of(ISubscribe) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.ISubscribe"/>
            </summary>
            <typeparam name="T">Type of IMQService</typeparam>
            <returns>Object of T type.</returns>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IMQService.TryConvertTo``1(``0@)">
            <summary>
            Convert IMQService to Following valid Type
            01. Type-of(IDealer) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IDealer"/>
            02. Type-of(IBroker) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IBroker"/>
            03. Type-of(IWorker) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IWorker"/>
            04. Type-of(IPublish) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IPublish"/>
            05. Type-of(IRouter) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IRouter"/>
            06. Type-of(ISubscribe) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.ISubscribe"/>
            </summary>
            <typeparam name="T">Type of IMQService</typeparam>
            <param name="t">Object of T type, if conversion suceeded. Else, NULL</param>
            <returns>True, if Convert to T suceeded. False, if Convert to T fails.</returns>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.IMQService.ServiceEndPoint">
            <summary>
            ServiceName
            </summary>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.IBroker">
            <summary>
            The Majordomo Protocol broker interface for session based services
            </summary>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.IBroker.BrokerCallback">
            <summary>
            The callback
            </summary>
        </member>
        <member name="P:Philips.DI.Interfaces.Services.Messaging.IBroker.SynchronizeInvoker">
            <summary>
            Used to synchronize messages
            </summary>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.IBrokerCallback">
            <summary>
            Call back implemented by the session host
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IBrokerCallback.GetService">
            <summary>
            Gets the service instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.IWorker">
            <summary>
            The interface that can be used byt the service object to send and receive
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IWorker.Send``1(``0)">
            <summary>
            Sends the specified request sync.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <param name="message">The message.</param>
            <returns>Returns true if object is not disposed and sent message successfully else returns false if object is disposed</returns>
        </member>
        <member name="E:Philips.DI.Interfaces.Services.Messaging.IWorker.Disposing">
            <summary>
            Raises an event just before disposing
            </summary>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.IPublish">
            <summary>
                IPublish
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IPublish.Publish``1(``0)">
            <summary>
                Publishes the specified Messaging.
            </summary>
            <param name="message">The Messaging.</param>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IPublish.Publish``1(``0,System.String)">
            <summary>
                Publishes the specified Messaging.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message">The Messaging.</param>
            <param name="topic">The topic.</param>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.IRouter">
            <summary>
            Router interface
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IRouter.RegisterHandler``2(System.Func{``0,``1})">
            <summary>
            Registers the handler.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.IRouter.ClearHandlers">
            <summary>
            Clears the handlers.
            </summary>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.ISubscribe">
            <summary>
                ISubscribe
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.ISubscribe.SubscribeTopic(System.String)">
            <summary>
            Subscribes to specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.ISubscribe.SubscribeToAnyTopic">
            <summary>
            Subscribes to Any key.
            </summary>        
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.ISubscribe.UnSubscribeTopic(System.String)">
            <summary>
            UNSubscribes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.ISubscribe.ClearActions">
            <summary>
            Clears the handlers.
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.ISubscribe.RegisterAction``1(System.Action{``0})">
            <summary>
            Registers the handler.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="handler">The handler.</param>
        </member>
        <member name="T:Philips.DI.Interfaces.Services.Messaging.TaskDisposedException">
            <summary>
            Exception thrown if the task in progress was disposed.
            </summary>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.TaskDisposedException.#ctor(System.String)">
            <summary>
            Create a new instance of the exception.
            </summary>
            <param name="message">
            Formatted string (see <see cref="M:System.String.Format(System.String,System.Object)"/>)
            representing the cause of this exception.
            </param>
        </member>
        <member name="M:Philips.DI.Interfaces.Services.Messaging.TaskDisposedException.#ctor(System.Exception,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="innerException">
            Actual source of exception
            </param>
            <param name="message">
            Message of the exception
            </param>
        </member>
    </members>
</doc>
