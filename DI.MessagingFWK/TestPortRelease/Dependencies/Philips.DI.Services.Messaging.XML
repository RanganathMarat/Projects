<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Philips.DI.Services.Messaging</name>
    </assembly>
    <members>
        <member name="T:Philips.DI.Services.Messaging.ActionEventMaper`1">
            <summary>
            Action EventMaper
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ActionEventMaper`1._handler">
            <summary>
            The handler
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ActionEventMaper`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Philips.DI.Services.Messaging.ActionEventMaper`1"/> class.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="P:Philips.DI.Services.Messaging.ActionEventMaper`1.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Philips.DI.Services.Messaging.ActionEventMaper`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ActionEventMaper`1.Invoke(Philips.DI.Interfaces.Services.Messaging.Model.Message)">
            <summary>
            Invokes the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Philips.DI.Services.Messaging.ASyncEventMapCollection">
            <summary>
            ASyncEventMapCollection
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Philips.DI.Services.Messaging.ASyncEventMapCollection._syncIdSeed">
            <summary>
            The synchronize identifier seed
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ASyncEventMapCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Philips.DI.Services.Messaging.ASyncEventMapCollection"/> class.
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ASyncEventMapCollection.Add(Philips.DI.Services.Messaging.IASyncEventMaper)">
            <summary>
            Adds the specified map.
            </summary>
            <param name="map">The map.</param>
            <returns>The sync id</returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ASyncEventMapCollection.GetMap(System.Int32,Philips.DI.Services.Messaging.IASyncEventMaper@)">
            <summary>
            Gets the map.
            </summary>
            <param name="syncId">The synchronize identifier.</param>
            <param name="map">The map.</param>
            <returns></returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ASyncEventMapCollection.GetNextSyncId">
            <summary>
            Gets the next synchronize identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ASyncEventMapCollection.TimerCallback(System.Object)">
            <summary>
            Callback in which cleanup has to be done.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ASyncEventMapCollection.CleanupAll">
            <summary>
            Cleanups all.
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ASyncEventMapCollection.Dispose">
            <summary>
            Implementation of the IDisposable interface
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ASyncEventMapCollection.Dispose(System.Boolean)">
            <summary>
             Central method for cleaning up resources.
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ASyncEventMapCollection.Finalize">
            <summary>
            Since other managed objects are disposed automatically,
            we should not try to dispose any managed resources (see TICS Rule 5@114).
            We therefore pass false to Dispose()
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ASyncEventMapCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="T:Philips.DI.Services.Messaging.ASyncEventMaper`1">
            <summary>
            Action EventMaper
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ASyncEventMaper`1._taskCompletionSource">
            <summary>
            The task completion source
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.ASyncEventMaper`1.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Philips.DI.Services.Messaging.ASyncEventMaper`1.Age">
            <summary>
            Gets or sets the age.
            </summary>
            <value>
            The age.
            </value>
        </member>
        <member name="P:Philips.DI.Services.Messaging.ASyncEventMaper`1.IsComplete">
            <summary>
            Gets a value indicating whether this instance is complete.
            </summary>
            <value>
            <c>true</c> if this instance is complete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Philips.DI.Services.Messaging.ASyncEventMaper`1.TheTask">
            <summary>
            Gets the task.
            </summary>
            <value>
            The task.
            </value>
        </member>
        <member name="P:Philips.DI.Services.Messaging.ASyncEventMaper`1.Philips#DI#Services#Messaging#IASyncEventMaper#Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ASyncEventMaper`1.Discard(System.String)">
            <summary>
            Discards the task.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ASyncEventMaper`1.Cleanup(System.String)">
            <summary>
            Cleanup the task. Throw a TaskDisposedException.
            </summary>
            <param name="reason"></param>
        </member>
        <member name="T:Philips.DI.Services.Messaging.FuncEventMaper`2">
            <summary>
            Function EventMaper
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="F:Philips.DI.Services.Messaging.FuncEventMaper`2._handler">
            <summary>
            The handler
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.FuncEventMaper`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Philips.DI.Services.Messaging.FuncEventMaper`2"/> class.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="P:Philips.DI.Services.Messaging.FuncEventMaper`2.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Philips.DI.Services.Messaging.FuncEventMaper`2.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Philips.DI.Services.Messaging.FuncEventMaper`2.Invoke(Philips.DI.Interfaces.Services.Messaging.Model.Message)">
            <summary>
            Invokes the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Philips.DI.Services.Messaging.IASyncEventMaper">
            <summary>
            IASyncEventMaper
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.IASyncEventMaper.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Philips.DI.Services.Messaging.IASyncEventMaper.Error">
            <summary>
            Sets the error
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.IASyncEventMaper.Key">
            <summary>
            Gets the synchronize identifier.
            </summary>
            <value>
            The synchronize identifier.
            </value>
        </member>
        <member name="P:Philips.DI.Services.Messaging.IASyncEventMaper.Age">
            <summary>
            Gets or sets the age.
            </summary>
            <value>
            The age.
            </value>
        </member>
        <member name="P:Philips.DI.Services.Messaging.IASyncEventMaper.IsComplete">
            <summary>
            Gets a value indicating whether this instance is complete.
            </summary>
            <value>
            <c>true</c> if this instance is complete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Philips.DI.Services.Messaging.IASyncEventMaper.Discard(System.String)">
            <summary>
            Discards this instance.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.IASyncEventMaper.Cleanup(System.String)">
            <summary>
            Cleanup this instance.
            </summary>
            <param name="reason">"Reason for cleanup."</param>
        </member>
        <member name="T:Philips.DI.Services.Messaging.MessageBroker.MessageBroker">
            <summary>
            MessageBroker core implementation
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBroker.#ctor">
            <summary>
            constructor to implement singleton
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.MessageBroker.MessageBroker.Instance">
            <summary>
            Message Broker singleton Instance.
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBroker.Subscribe``1(System.Action{``0})">
            <summary>
            Registering a subscriber to get the notification of messages for particular a message type
            </summary>
            <param name="action">Action delegate to be invoked</param>
            <returns>Subscription ID</returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBroker.Subscribe``1(System.Action{``0},System.ComponentModel.ISynchronizeInvoke)">
            <summary>
            Registering a subscriber to get the notification of messages for particular a message type
            </summary>
            <param name="action">Action delegate to be invoked</param>
            <param name="synchronizeInvoker">SynchronizeInvoker instance</param>
            <returns>Subscription ID</returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBroker.Unsubscribe``1(System.Action{``0})">
            <summary>
            Un-registering the subscriber 
            </summary>
            <param name="action">topic for which the client does not want to get notified</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBroker.Unsubscribe(System.String)">
            <summary>
            Un-registering the subscriber based on subscription ID.
            </summary>
            <param name="subscriptionID">subscription ID to be unsubscribed</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBroker.Publish``1(``0)">
            <summary>
            To publish a message corresponding to a topic
            </summary>
            <typeparam name="T">Generic Message type</typeparam>
            <param name="message">content of the message</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBroker.AddSubscriptionAction``1(Philips.DI.Services.Messaging.Model.SubscriberAction{``0})">
            <summary>
            Adds SubscriptionAction to dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <param name="subscriberAction"></param>
        </member>
        <member name="T:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerBase">
            <summary>
            Base class for In PROC message communication
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerBase.ServiceEndPoint">
            <summary>
            
            </summary>
        </member>
        <member name="E:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerBase.ReceiveError">
            <summary>
            Occurs when [systemic error].
            </summary>
        </member>
        <member name="E:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerBase.ServiceStart">
            <summary>
            On Service Start
            </summary>
        </member>
        <member name="E:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerBase.ServiceStop">
            <summary>
            On Service Stop
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerBase.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerBase.ConvertTo``1">
            <summary>
            Convert IMessageBroker to Following valid Type
            01. Type-of(IMessageBrokerPublisher) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IInProcPublisher"/>
            02. Type-of(IMessageBrokerSubscriber) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IInProcSubscriber"/>
            </summary>
            <typeparam name="T">Type of IMessageBroker</typeparam>
            <returns>Object of T type.</returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerBase.TryConvertTo``1(``0@)">
            <summary>
            Convert IMessageBroker to Following valid Type
            01. Type-of(IMessageBrokerPublisher) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IInProcPublisher"/>
            02. Type-of(IMessageBrokerSubscriber) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IInProcSubscriber"/>
            </summary>
            <typeparam name="T">Type of IMessageBroker</typeparam>
            <param name="t">Object of T type, if conversion suceeded. Else, NULL</param>
            <returns>True, if Convert to T suceeded. False, if Convert to T fails.</returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerBase.Start(System.Boolean)">
            <summary>
             Start processing the messages.
            </summary>
            <param name="purge"></param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerBase.Stop">
            <summary>
            Stops processing the messages.
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerBase.CheckForError(Philips.DI.Interfaces.Services.Messaging.Model.Message)">
            <summary>
            Raises the error event.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerProxy">
            <summary>
            Message broker proxy per subscription
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerProxy.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerProxy.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerProxy.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerProxy.Publish``1(``0)">
            <summary>
            To publish a message corresponding to a topic
            </summary>
            <typeparam name="T">Generic Message type</typeparam>
            <param name="message">content of the message</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerProxy.Subscribe``1(System.Action{``0})">
            <summary>
            Registering a subscriber to get the notification of messages for particular a message type
            </summary>
            <param name="action">Action delegate to be invoked</param>
            <returns>Subscription ID</returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerProxy.Subscribe``1(System.Action{``0},System.ComponentModel.ISynchronizeInvoke)">
            <summary>
            Registering a subscriber to get the notification of messages for particular a message type
            </summary>
            <param name="action">Action delegate to be invoked on getting notified</param>
            <param name="synchronizeInvoker">SynchronizeInvoker instance</param>
            <returns>Subscription ID</returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerProxy.Unsubscribe``1(System.Action{``0})">
            <summary>
            Un-registering the subscriber 
            </summary>
            <param name="action">topic for which the client does not want to get notified</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerProxy.Unsubscribe(System.String)">
            <summary>
            Un-registering the subscriber based on subscription ID.
            </summary>
            <param name="subscriptionID">subscription ID to be unsubscribed</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerProxy.CheckDisposed">
            <summary>
             A check for disposal.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Throws if already disposed of</exception>
        </member>
        <member name="P:Philips.DI.Services.Messaging.MessageBroker.MessageBrokerProxy.IsDisposed">
            <summary>
                Disposal flag.
            </summary>
        </member>
        <member name="T:Philips.DI.Services.Messaging.CaseInsensitiveEnumConfigConverter`1">
            <summary>
                CaseInsensitiveEnumConfigConverter
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Philips.DI.Services.Messaging.Model.DisconnectMessage">
            <summary>
            Message to be sent on disposing
            </summary>
        </member>
        <member name="T:Philips.DI.Services.Messaging.Model.DisconnectMessageResponse">
            <summary>
            Message to be sent on disposing
            </summary>
        </member>
        <member name="T:Philips.DI.Services.Messaging.Model.SubscriberAction`1">
            <summary>
            Class that maintains callback action for each subscriber
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Philips.DI.Services.Messaging.Model.SubscriberAction`1.#ctor(System.Action{`0},System.ComponentModel.ISynchronizeInvoke)">
            <summary>
            Constructor
            </summary>
            <param name="action">Action delegate for the topic subscribed</param>
            <param name="synchronizeInvoker">Synchronize invoker instance</param>
        </member>
        <member name="P:Philips.DI.Services.Messaging.Model.SubscriberAction`1.Action">
            <summary>
            Action call back method handler
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.Model.SubscriberAction`1.Invoker">
            <summary>
            ISynchronizeInvoker instance
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.Model.SubscriberAction`1.ID">
            <summary>
            Gets/sets Subscription ID
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.Model.SubscriberAction`1.CreateDelegateFromAction">
            <summary>
            Creates delegate method call using weak reference only if the subscription instance is alive.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Philips.DI.Services.Messaging.MessagesCollection">
            <summary>
            Messages Collection
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessagesCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement" />.
            </summary>
            <returns>
            A newly created <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessagesCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="T:Philips.DI.Services.Messaging.MessagesElement">
            <summary>
            MessagesElement
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.MessagesElement.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Philips.DI.Services.Messaging.MessagesElement.TypeId">
            <summary>
            Gets or sets the type identifier.
            </summary>
            <value>
            The type identifier.
            </value>
        </member>
        <member name="T:Philips.DI.Services.Messaging.MessagingEndpointElement">
            <summary>
                MessagingEndpointElement
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.MessagingEndpointElement.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:Philips.DI.Services.Messaging.MessagingEndpointElement.HostName">
            <summary>
            Gets or sets the name of the host.
            </summary>
            <value>
            The name of the host.
            </value>
        </member>
        <member name="P:Philips.DI.Services.Messaging.MessagingEndpointElement.MqType">
            <summary>
                Gets or sets the type of the mq.
            </summary>
            <value>
                The type of the mq.
            </value>
        </member>
        <member name="P:Philips.DI.Services.Messaging.MessagingEndpointElement.Topology">
            <summary>
                Gets or sets the topology.
            </summary>
            <value>
                The topology.
            </value>
        </member>
        <member name="P:Philips.DI.Services.Messaging.MessagingEndpointElement.Transport">
            <summary>
                Gets or sets the transport.
            </summary>
            <value>
                The topology.
            </value>
        </member>
        <member name="P:Philips.DI.Services.Messaging.MessagingEndpointElement.Connect">
            <summary>
                Gets or sets the exchange.
            </summary>
            <value>
                The exchange.
            </value>
        </member>
        <member name="P:Philips.DI.Services.Messaging.MessagingEndpointElement.Binding">
            <summary>
                Gets or sets the binding.
            </summary>
            <value>
                The binding.
            </value>
        </member>
        <member name="P:Philips.DI.Services.Messaging.MessagingEndpointElement.Serialize">
            <summary>
            Gets or sets the serialize type.
            </summary>
            <value>
            The serialize.
            </value>
        </member>
        <member name="T:Philips.DI.Services.Messaging.MessagingEndpointsCollection">
            <summary>
            Messaging Endpoints Collection
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessagingEndpointsCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement" />.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessagingEndpointsCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="T:Philips.DI.Services.Messaging.InitMessage">
            <summary>
            This is the base class for any message that can be 
            sent \ received using the messaging platform.
            </summary>    
        </member>
        <member name="T:Philips.DI.Services.Messaging.ServiceManagerFactory">
            <summary>
            ServiceManagerFactory
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ServiceManagerFactory.GetServiceManager(Philips.DI.Interfaces.Services.Messaging.Model.MQType)">
            <summary>
            GetServiceManager
            </summary>
            <param name="mqType"></param>
            <returns></returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ServiceManagerFactory.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:Philips.DI.Services.Messaging.PortConfiguration">
            <summary>
            This class is used to get the port range details from either machine config if present or app.config
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.PortConfiguration.PortStart">
            <summary>
            rangeStart property
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.PortConfiguration.PortEnd">
            <summary>
            rangeEnd property
            </summary>
        </member>
        <member name="T:Philips.DI.Services.Messaging.PortConfigurations">
            <summary>
            This class is used to get the port range details from either machine config if present or app.config
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.PortConfigurations.CreateNewElement">
            <summary>
            Create New Element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.PortConfigurations.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            GetElementKey
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:Philips.DI.Services.Messaging.MessagingFrameworkSettings">
            <summary>
            This class is used to check is service discovery enabled/disabled
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.MessagingFrameworkSettings.GetPortConfigurations">
            <summary>
            Gets the PortConfigurations property
            </summary>
        </member>
        <member name="T:Philips.DI.Services.Messaging.PortProvider">
            <summary>
            Provides a random port in a given range for TCP
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.PortProvider.mutex">
            <summary>
            mutex for locking shared resources
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.PortProvider.mutexTimeOut">
            <summary>
            timeout of 10 seconds for mutex
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.PortProvider.portConfig">
            <summary>
            port Config for start range and end range info
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.PortProvider.PORTRANGESTART">
            <summary>
            System ports are in 0-1023 range. All ports after that can be used by user safely.
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.PortProvider.INVALIDPORT">
            <summary>
            When no free port is found
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.PortProvider.IsRangeDefinedinConfig">
            <summary>
            true when port range is defined in config
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.PortProvider.#cctor">
            <summary>
            Loads port range form config if config exists.
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.PortProvider.GetAvailablePortFromConfig(System.String)">
            <summary>
            Gets the available or the next available port in the port range which has been set in configuration
            </summary>
            <param name="ipAdress">IPAdress; Default : IPAddress.Any</param>
            <returns></returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.PortProvider.LoadPortFromConfiguration">
            <summary>
            load port range, etc
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.PortProvider.GetIpAdressMapping(System.String)">
            <summary>
            Map hostname to IPAddress type
            </summary>
            <param name="ipAdress">IPAddress as a string</param>
            <returns>IPAddress object</returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.PortProvider.GetPortRangeFromConfig">
            <summary>
            Get Port Range From Config
            </summary>
            <returns>PortConfiguration</returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.PortProvider.CheckPortConfigRange(Philips.DI.Services.Messaging.PortConfiguration)">
            <summary>
            Check if port is within range 0f 1024 and 65535
            </summary>
            <param name="configuration">port range config</param>
            <returns>port start and port end config</returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.PortProvider.GetNextFreePort(System.Net.IPAddress)">
            <summary>
            Get free or net free port in range
            </summary>
            <param name="ipAddress">hostname</param>        
            <returns>free port in range</returns>
        </member>
        <member name="T:Philips.DI.Services.Messaging.ZeroMQ.Dealer">
            <summary>
            The dealer class
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ZeroMQ.Dealer._eventRouter">
            <summary>
            The _dealer
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ZeroMQ.Dealer._messageSynchId">
            <summary>
            messageSynchID
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ZeroMQ.Dealer._isDisposed">
            <summary>
                Indicates if the object is already disposed
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.ZeroMQ.Dealer.SynchronizeInvoker">
            <summary>
            SynchronizeInvoker
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Dealer.#ctor(NetMQ.Sockets.DealerSocket,Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Philips.DI.Services.Messaging.ZeroMQ.Dealer" /> class.
            </summary>
            <param name="netMqSocket">The zero mq socket.</param>        
            <param name="serviceEndPoint">Service name</param>        
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Dealer.Send``1(``0)">
            <summary>
            Sends the specified request Asynchronously.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <param name="message">The message.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Dealer.SendSync``2(``0)">
            <summary>
            Sends the specified request Asynchronously.
            </summary>
            <typeparam name="TRequest">Type of the request message.</typeparam>
            <typeparam name="TResponse">Type of the resonse message.</typeparam>
            <param name="message">The message.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Dealer.SendAsync``2(``0)">
            <summary>
            Sends the specified message and returns a Task which can be used for waiting.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Dealer.RegisterAction``1(System.Action{``0})">
            <summary>
            Registers the handler.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="handler">The handler.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Dealer.ClearActions">
            <summary>
            Clears the handlers.
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Dealer.HandleMessage(Philips.DI.Interfaces.Services.Messaging.Model.Message)">
            <summary>
                Handles the message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Dealer.Dispose(System.Boolean)">
            <summary>
                Finalize/disposal.
            </summary>
            <param name="disposing">Set when called from the explicit dispose</param>
        </member>
        <member name="T:Philips.DI.Services.Messaging.ZeroMQ.Broker">
            <summary>
            Broker to process the each client's request in a separate worker
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ZeroMQ.Broker._workerInprocEndpoint">
            <summary>
            The worker inproc endpoint
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ZeroMQ.Broker._serializer">
            <summary>
            The serialize
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ZeroMQ.Broker._callback">
            <summary>
            The callback
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ZeroMQ.Broker._clientWorkerMmap">
            <summary>
            The workers [client identity, worker identity]
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ZeroMQ.Broker._workers">
            <summary>
            The worker list [client identity, worker]
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ZeroMQ.Broker._invoker">
            <summary>
            Used to synchronize messages
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.ZeroMQ.Broker.BrokerCallback">
            <summary>
            The callback
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.ZeroMQ.Broker.SynchronizeInvoker">
            <summary>
            Used to synchronize messages
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Broker.#ctor(NetMQ.Sockets.RouterSocket,Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Philips.DI.Services.Messaging.ZeroMQ.Broker" /> class.
            </summary>
            <param name="netMqSocket">The net mq socket.</param>        
            <param name="serviceEndPoint">The serialize.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Broker.HandleMessage(NetMQ.NetMQMessage,NetMQ.NetMQSocket)">
            <summary>
            Handles the message.
            </summary>
            <param name="netMqMessage">The net mq message.</param>
            <param name="socket">The socket.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Broker.RequireWorker(NetMQ.NetMQFrame,NetMQ.NetMQMessage,Philips.DI.Interfaces.Services.Messaging.Model.Message)">
            <summary>
            
            </summary>
            <param name="clientIdentity"></param>
            <param name="fisrtMessage"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Broker.Dispose(System.Boolean)">
            <summary>
                Finalize/disposal.
            </summary>
            <param name="disposing">Set when called from the explicit dispose</param>
        </member>
        <member name="T:Philips.DI.Services.Messaging.ZeroMQ.Publisher">
            <summary>
                Publisher end point
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Publisher.#ctor(NetMQ.Sockets.PublisherSocket,Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint)">
            <summary>
                Initializes a new instance of the <see cref="T:Philips.DI.Services.Messaging.ZeroMQ.Publisher" /> class.
            </summary>
            <param name="netMqSocket">The net mq socket.</param>        
            <param name="serviceEndPoint">Service Name.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Publisher.Publish``1(``0)">
            <summary>
                Publishes the specified Messaging.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message">The Messaging.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Publisher.Publish``1(``0,System.String)">
            <summary>
                Publishes the specified Messaging.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message">The Messaging.</param>
            <param name="topic">The topic.</param>
        </member>
        <member name="T:Philips.DI.Services.Messaging.ZeroMQ.Router">
            <summary>
            Router
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ZeroMQ.Router._eventRouter">
            <summary>
            The message handlers
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Router.#ctor(NetMQ.Sockets.RouterSocket,Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Philips.DI.Services.Messaging.ZeroMQ.Router"/> class.
            </summary>
            <param name="netMqSocket">The net mq socket.</param>        
            <param name="serviceEndPoint">Service name.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Router.RegisterHandler``2(System.Func{``0,``1})">
            <summary>
                Registers the handler.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Router.ClearHandlers">
            <summary>
            Clears the handlers.
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Router.HandleMessage(Philips.DI.Interfaces.Services.Messaging.Model.Message,NetMQ.NetMQMessage,NetMQ.NetMQSocket)">
            <summary>
            Handles the message.
            </summary>
            <param name="message">The message.</param>
            <param name="netMqMessage">The net mq message.</param>
            <param name="socket">The socket.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Router.HandleMessage(Philips.DI.Interfaces.Services.Messaging.Model.Message)">
            <summary>
            Handles the message. In case of the client it will send a message and in case of the server it will log.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Router.Dispose(System.Boolean)">
            <summary>
                Finalize/disposal.
            </summary>
            <param name="disposing">Set when called from the explicit dispose</param>
        </member>
        <member name="T:Philips.DI.Services.Messaging.ZeroMQ.Subscribe">
            <summary>
                Subscribe end point
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ZeroMQ.Subscribe._eventrouter">
            <summary>
                The message handlers
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Subscribe.#ctor(NetMQ.Sockets.SubscriberSocket,Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint)">
            <summary>
                Initializes a new instance of the <see cref="T:Philips.DI.Services.Messaging.ZeroMQ.Subscribe" /> class.
            </summary>
            <param name="netMqSocket">The zero mq socket.</param>        
            <param name="serviceEndPoint">Service Name.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Subscribe.SubscribeTopic(System.String)">
            <summary>
            Subscribes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Subscribe.SubscribeToAnyTopic">
            <summary>
            Subscribes Any Topic.
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Subscribe.UnSubscribeTopic(System.String)">
            <summary>
            UNSubscribes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Subscribe.ClearActions">
            <summary>
            Clears the handlers.
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Subscribe.RegisterAction``1(System.Action{``0})">
            <summary>
                Registers the handler.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="handler">The handler.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Subscribe.HandleMessage(Philips.DI.Interfaces.Services.Messaging.Model.Message)">
            <summary>
                Handles the message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Subscribe.Dispose(System.Boolean)">
            <summary>
                Finalize/disposal.
            </summary>
            <param name="disposing">Set when called from the explicit dispose</param>
        </member>
        <member name="T:Philips.DI.Services.Messaging.ZeroMQ.Worker">
            <summary>
            The worker object that encapsulates the service object
            </summary>
        </member>
        <member name="E:Philips.DI.Services.Messaging.ZeroMQ.Worker.Disposing">
            <summary>
            Raises an event on just before disposing
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ZeroMQ.Worker._clientIdentity">
            <summary>
            The identifier string of the client
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ZeroMQ.Worker._service">
            <summary>
            The service object
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ZeroMQ.Worker._eventRouter">
            <summary>
            The event router
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ZeroMQ.Worker._invoker">
            <summary>
            Used to synchronize messages
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Worker.#ctor(NetMQ.NetMQFrame,NetMQ.Sockets.PairSocket,Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint,Philips.DI.Interfaces.Services.Messaging.BaseBrokerCallbackService,NetMQ.NetMQMessage,Philips.DI.Interfaces.Services.Messaging.Model.Message,System.ComponentModel.ISynchronizeInvoke)">
            <summary>
            Initializes a new instance of the <see cref="T:Philips.DI.Services.Messaging.ZeroMQ.Worker" /> class.
            </summary>
            <param name="idString">The identifier string.</param>
            <param name="netMqSocket">The net mq socket.</param>
            <param name="serviceEndPoint">Type of the serialize.</param>
            <param name="service">The service.</param>
            <param name="firstMessage">The first message</param>
            <param name="message">Message to be sent</param>
            <param name="syncObj">Used to synchronize messages</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Worker.HandleMessage(Philips.DI.Interfaces.Services.Messaging.Model.Message,NetMQ.NetMQMessage,NetMQ.NetMQSocket)">
            <summary>
            Handles the message.
            </summary>
            <param name="message">The message.</param>
            <param name="netMqMessage">The net mq message.</param>
            <param name="socket">The socket.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Worker.Send``1(``0)">
            <summary>
            Sends the specified request sync.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <param name="message">The message.</param>
            <returns>Returns true if object is not disposed and sent message successfully else returns false if object is disposed</returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Worker.RegisterHandler``2(System.Func{``0,``1})">
            <summary>
            Registers the handler.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="handler">The handler.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Worker.ClearHandlers">
            <summary>
            Clears the handlers.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.Worker.Dispose(System.Boolean)">
            <summary>
                Finalize/disposal.
            </summary>
            <param name="disposing">Set when called from the explicit dispose</param>
        </member>
        <member name="T:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceCreator">
            <summary>
            Zero MQ Service Creator 
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceCreator.LOCALHOSTSTRING">
            <summary>
            local host as string
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceCreator.#cctor">
            <summary>
            ZeroMQ Service creator
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceCreator.CreateZeroMQService(Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint)">
            <summary>
            Create Zero MQ Service
            </summary>
            <param name="serviceEndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceCreator.CreateEndPointString(System.String,System.String)">
            <summary>
            CreateEndPointString
            </summary>
            <param name="hostName"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase">
            <summary>
                ZeroMQServiceEndPointBase
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.DataMsg">
            <summary>
            The data message
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.NetMqSocket">
            <summary>
            The net mq socket
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.Started">
            <summary>
            The started
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.Pooler">
            <summary>
            The _net mq poller
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.serviceEndPointField">
            <summary>
            serviceEndPoint
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.SyncLockerObject">
            <summary>
            Sync locker shared accross the derived classes
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.Serializer">
            <summary>
            Gets the serialize.
            </summary>
            <value>
            The serialize.
            </value>
        </member>
        <member name="E:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.ReceiveError">
            <summary>
                Occurs when [systemic error].
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.#ctor(NetMQ.NetMQSocket,Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Philips.DI.Interfaces.Services.Messaging.IMQService" /> class.
            </summary>
            <param name="netMqSocket">The zero mq socket.</param>        
            <param name="serviceEndPoint">The service end point.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.Start(System.Boolean)">
            <summary>
                Start processing the messages.
            </summary>
            <param name="purge">if set to <c>true</c> [purge].</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.Stop">
            <summary>
                Stops processing the messages.
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.OnReceiveReady(System.Object,NetMQ.NetMQSocketEventArgs)">
            <summary>
            Called when [net mq socket on receive ready].
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:NetMQ.NetMQSocketEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.HandleMessage(NetMQ.NetMQMessage,NetMQ.NetMQSocket)">
            <summary>
            Handles the message.
            </summary>
            <param name="netMqMessage">The net mq message.</param>
            <param name="socket">The socket.</param>
            <exception cref="T:System.IO.InvalidDataException">
            Data is invalid or corrupt.
            </exception>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.HandleMessage(Philips.DI.Interfaces.Services.Messaging.Model.Message,NetMQ.NetMQMessage,NetMQ.NetMQSocket)">
            <summary>
            Handles the message.
            </summary>
            <param name="message">The message.</param>
            <param name="netMqMessage">The net mq message.</param>
            <param name="socket">The socket.</param>
            <exception cref="T:System.NotImplementedException">Needs to be overridden in the base class.</exception>
            <exception cref="T:System.NotImplementedException">Needs to be overridden in the base class.</exception>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.HandleMessage(Philips.DI.Interfaces.Services.Messaging.Model.Message)">
            <summary>
            Handles the message.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.NotImplementedException">Needs to be overridden in the derived class.</exception>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.ProcessMessage``1(``0)">
            <summary>
                Processes the message.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.CheckForError(Philips.DI.Interfaces.Services.Messaging.Model.Message)">
            <summary>
            Raises the error event.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.Dispose">
            <summary>
                Dispose implementation.
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.Dispose(System.Boolean)">
            <summary>
                Finalize/disposal.
            </summary>
            <param name="disposing">Set when called from the explicit dispose</param>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.CheckDisposed">
            <summary>
                A check for disposal.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Throws if already disposed of</exception>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.ConvertTo``1">
            <summary>
            Convert IMQService to Following valid Type
            01. Type-of(IDealer) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IDealer"/>
            02. Type-of(IBroker) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IBroker"/>
            03. Type-of(IWorker) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IWorker"/>
            04. Type-of(IPublish) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IPublish"/>
            05. Type-of(IRouter) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IRouter"/>
            06. Type-of(ISubscribe) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.ISubscribe"/>
            </summary>
            <typeparam name="T">Type of IMQService</typeparam>
            <returns>Object of T type.</returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceEndPointBase.TryConvertTo``1(``0@)">
            <summary>
            Convert IMQService to Following valid Type
            01. Type-of(IDealer) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IDealer"/>
            02. Type-of(IBroker) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IBroker"/>
            03. Type-of(IWorker) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IWorker"/>
            04. Type-of(IPublish) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IPublish"/>
            05. Type-of(IRouter) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.IRouter"/>
            06. Type-of(ISubscribe) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.ISubscribe"/>
            </summary>
            <typeparam name="T">Type of IMQService</typeparam>
            <param name="t">Object of T type, if conversion suceeded. Else, NULL</param>
            <returns>True, if Convert to T suceeded. False, if Convert to T fails.</returns>
        </member>
        <member name="T:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceManager">
            <summary>
            ZeroMQServiceManager
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceManager.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceManager.TryCreateMessagingService(Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint,Philips.DI.Interfaces.Services.Messaging.IMQService@)">
            <summary>
            Create Messaging Service        
            Note: if any service using the same port to bind then create service will fail.
            </summary>
            <param name="serviceEndPoint">Service Endpoint Object. <see cref="T:Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint"/></param>
            <param name="mqService">Service as out parameter. <see cref="T:Philips.DI.Interfaces.Services.Messaging.IMQService"/></param>
            <returns>Returns true, if able to create service , Else returns false</returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ZeroMQ.ZeroMQServiceManager.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:Philips.DI.Services.Messaging.EventRouter">
            <summary>
            The event router
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.EventRouter._handlers">
            <summary>
            The message handlers
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.EventRouter._SyncIdASyncEventMapCollection">
            <summary>
            The message handlers
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.EventRouter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Philips.DI.Services.Messaging.EventRouter"/> class.
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.EventRouter.ErrorHandler(Philips.DI.Interfaces.Services.Messaging.Model.ErrorMessage)">
            <summary>
            Handler for all errors.
            </summary>
            <param name="error">The error.</param>
            <returns></returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.EventRouter.RegisterHandler``2(System.Func{``0,``1})">
            <summary>
            Registers the handler.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="handler">The handler.</param>
            <exception cref="T:System.ArgumentNullException">handler;Invalid handler...</exception>
        </member>
        <member name="M:Philips.DI.Services.Messaging.EventRouter.RegisterAction``1(System.Action{``0})">
            <summary>
            Registers the handler.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="handler">The handler.</param>
            <exception cref="T:System.ArgumentNullException">handler;Invalid handler...</exception>
        </member>
        <member name="M:Philips.DI.Services.Messaging.EventRouter.HandleMessage(Philips.DI.Interfaces.Services.Messaging.Model.Message)">
            <summary>
            Handles the message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">message;Invalid message...</exception>
        </member>
        <member name="M:Philips.DI.Services.Messaging.EventRouter.NotifyMessage(Philips.DI.Interfaces.Services.Messaging.Model.Message,System.ComponentModel.ISynchronizeInvoke)">
            <summary>
            Notify the message.
            </summary>
            <param name="message">The message.</param>
            <param name="invoker">Used to synchronize messages</param>
            <exception cref="T:System.ArgumentNullException">message;Invalid message...</exception>
        </member>
        <member name="M:Philips.DI.Services.Messaging.EventRouter.NotifyResponseError(Philips.DI.Interfaces.Services.Messaging.Model.ErrorMessage)">
            <summary>
            Notify the message.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">message;Invalid message...</exception>
        </member>
        <member name="M:Philips.DI.Services.Messaging.EventRouter.ClearHandlers">
            <summary>
            Clears the handlers.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Philips.DI.Services.Messaging.EventRouter.RegisterTask``1(System.Threading.Tasks.Task{``0}@)">
            <summary>
            Registers the task.
            </summary>
            <typeparam name="TResponce">The type of the message.</typeparam>
            <param name="task">The task.</param>
            <returns>SyncId</returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.EventRouter.Dispose">
            <summary>
            Implementation of the IDisposable interface
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.EventRouter.Dispose(System.Boolean)">
            <summary>
             Central method for cleaning up resources.
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.EventRouter.Finalize">
            <summary>
            Since other managed objects are disposed automatically,
            we should not try to dispose any managed resources (see TICS Rule 5@114).
            We therefore pass false to Dispose()
            </summary>
        </member>
        <member name="T:Philips.DI.Services.Messaging.IMQServiceManager">
            <summary>
            This interface create messaging service either from service endpoint specification or from external service repository.
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.IMQServiceManager.TryCreateMessagingService(Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint,Philips.DI.Interfaces.Services.Messaging.IMQService@)">
            <summary>
            Creates a Service EndPoint Type of(ServiceEndPoint) <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint"></seealso> 
            </summary>
            <param name="serviceEndPoint">service EndPoint</param>
            <param name="service">service</param>
        </member>
        <member name="T:Philips.DI.Services.Messaging.ServiceEndPointReader">
            <summary>
                Messaging
            </summary>
        </member>
        <member name="F:Philips.DI.Services.Messaging.ServiceEndPointReader.Configuration">
            <summary>
                The configuration
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ServiceEndPointReader.#cctor">
            <summary>
                Initializes the <see cref="N:Philips.DI.Services.Messaging" /> class.
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.ServiceEndPointReader.TryGetServiceEndPoint(System.String,Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint@)">
            <summary>
            Service End point Reader 
            </summary>
            <param name="endPoint">The end point.</param>
            <param name="serviceEndPoint">The service End Point.</param>
            <returns>ServiceEndPoint</returns>
            <exception cref="T:System.InvalidOperationException">Endpoint not found.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid Endpoint configuration.</exception>
        </member>
        <member name="T:Philips.DI.Services.Messaging.MessagingConfigurationSection">
            <summary>
            Data Model of Messaging Configuration, which has collation of Endpoints <seealso cref="T:Philips.DI.Services.Messaging.MessagingEndpointElement"/>.
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.MessagingConfigurationSection.Endpoints">
            <summary>
            Gets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:Philips.DI.Services.Messaging.MessagingConfigurationSection.TypeIdMap">
            <summary>
            Gets the messages.
            </summary>
            <value>
            The messages.
            </value>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessagingConfigurationSection.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="P:Philips.DI.Services.Messaging.MessagingConfigurationSection.MessagingEndpoints">
            <summary>
            Gets the messaging endpoints.
            </summary>
            <value>
            The messaging endpoints.
            </value>
        </member>
        <member name="P:Philips.DI.Services.Messaging.MessagingConfigurationSection.Messages">
            <summary>
            Gets the messages.
            </summary>
            <value>
            The messages.
            </value>
        </member>
        <member name="T:Philips.DI.Services.Messaging.MessagingService">
            <summary>
            MessagingService
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessagingService.Proxy(Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint)">
            <summary>
            Proxy : will create IMQService based on the service endpoint object passed.
            </summary>
            <param name="serviceEndPoint">Service End Point object. <seealso cref="T:Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint"/></param>
            <returns>
            returns instance of IMQService based on following steps:
            Step 1: Create service and return. if not step 2
            Step 2: return Null.
            </returns>
            <exception cref="T:System.InvalidOperationException" >if proxy creation failed, throws InvalidOperationException.<see cref="T:System.InvalidOperationException"/> </exception>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessagingService.Proxy(System.String)">
            <summary>
            Proxy : will create IEndPoint based on the service endpoint name passed.
            </summary>
            <param name="endPointName">
            End point name: Name of the service in Configuration file. (or) Name of the external services.               
            </param>
            <returns>        
            return instance of IMQService based on following steps:        
            Step 1: Search Service definition from configuration and create service and return, if not step 2
            Step 2: return null.
            </returns>
            <exception cref="T:System.InvalidOperationException" >if proxy creation failed, throws InvalidOperationException.<see cref="T:System.InvalidOperationException"/></exception>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessagingService.ProxyForInProc">
            <summary>
            Gets IN PROC proxy service for intra process communication.
            </summary>
            <returns>returns instance of IMQService. It has to be type casted to respective 
            returns instance of IMQService</returns>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessagingService.Philips#DI#Interfaces#Services#Messaging#IMessagingServiceDispose#Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Philips.DI.Services.Messaging.MessagingService.TryCreateMQService(Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint,Philips.DI.Interfaces.Services.Messaging.IMQService@)">
            <summary>
            Create Messaging Service        
            Note: if any services that are already running with same name or using same port to bind then create service will fail.
            </summary>
            <param name="serviceEndPoint">Service Endpoint Object. <see cref="T:Philips.DI.Interfaces.Services.Messaging.Model.ServiceEndPoint"/></param>
            <param name="mqService">Service as out parameter. <see cref="T:Philips.DI.Interfaces.Services.Messaging.IMQService"/></param>
            <returns>Returns true, if able to create service , Else returns false</returns>
        </member>
    </members>
</doc>
