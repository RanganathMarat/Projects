<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Philips.Platform.Presentation</name>
    </assembly>
    <members>
        <member name="T:Philips.Platform.Presentation.Automation.ApplicationLauncherAutomationPeer">
            <summary>
            Exposes <see cref="T:Philips.Platform.Presentation.Controls.ApplicationLauncher"/> types to UI automation.
            </summary>
            <seealso cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer">ItemsControlAutomationPeer Class.</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ApplicationLauncher">ApplicationLauncher Class.</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Automation.ApplicationLauncherAutomationPeer.#ctor(Philips.Platform.Presentation.Controls.ApplicationLauncher)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Automation.ApplicationLauncherAutomationPeer.GetClassNameCore">
            <summary>
            Gets the class name of the control that is associated with this UI Automation peer.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Automation.ApplicationLauncherAutomationPeer.CreateItemAutomationPeer(System.Object)">
            <summary>
            Creates a item automation peer for the specified item.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Automation.ApplicationLauncherItemAutomationPeer">
            <summary>
            Exposes <see cref="T:Philips.Platform.Presentation.Controls.ApplicationLauncherItem"/> types to UI automation.
            </summary>
            <seealso cref="T:System.Windows.Automation.Peers.AutomationPeer">AutomationPeer Class</seealso>
            <seealso cref="T:System.Windows.Automation.Peers.ItemAutomationPeer">ItemAutomationPeer Class.</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ApplicationLauncherItem">ApplicationLauncherItem Class.</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Automation.ApplicationLauncherItemAutomationPeer.#ctor(System.Object,System.Windows.Automation.Peers.ItemsControlAutomationPeer)">
            <summary>
            Initializes a new <see cref="T:Philips.Platform.Presentation.Automation.ApplicationLauncherItemAutomationPeer"/> instance.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Automation.ApplicationLauncherItemAutomationPeer.GetClassNameCore">
            <summary>
            Gets the class name of the control that is associated with this UI Automation peer.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Automation.ApplicationLauncherItemAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type of the element that is associated with the UI Automation peer.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Automation.AutomatableTextBlockAutomationPeer">
            <summary>
            Exposes <see cref="T:System.Windows.Controls.TextBlock"/> types to UI automation.
            </summary>
            <seealso cref="T:System.Windows.Automation.Peers.TextBlockAutomationPeer">TextBlockAutomationPeer Class</seealso>
            <seealso cref="T:System.Windows.Controls.TextBlock">TextBlock Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.AutomatableTextBlock">AutomatableTextBlock Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Automation.AutomatableTextBlockAutomationPeer.#ctor(System.Windows.Controls.TextBlock)">
            <summary>
            Initializes a new <see cref="T:Philips.Platform.Presentation.Automation.AutomatableTextBlockAutomationPeer"/> instance.
            </summary>
            <param name="owner">
            The (automatable) <see cref="T:System.Windows.Controls.TextBlock"/> that is associated with this automation peer.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Automation.AutomatableTextBlockAutomationPeer.IsControlElementCore">
            <summary>
            Gets a value that indicates whether the <see cref="T:System.Windows.UIElement"/> that is associated with this
            <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer"/> is an element that contains data that is presented to
            the user.
            </summary>
            <remarks>
            This method is overridden to open the (automatable) <see cref="T:System.Windows.Controls.TextBlock"/> up for
            UI automation. The <see cref="T:System.Windows.Automation.Peers.TextBlockAutomationPeer"/>'s implementation of this method
            returns  <see langword="false"/>, if the text block is part of a template, and otherwise
            <see langword="true"/>; the overridden implementation here always returns
            <see langword="true"/>.
            </remarks>
            <returns>
            Returns <see langword="true"/>.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Automation.ExtensibleTabControlAutomationPeer">
            <summary>
            Exposes <see cref="T:Philips.Platform.Presentation.Controls.ExtensibleTabControl"/> types to UI automation.
            </summary>
            <seealso cref="T:System.Windows.Automation.Peers.AutomationPeer">AutomationPeer Class</seealso>
            <seealso cref="T:System.Windows.Automation.Peers.TabControlAutomationPeer">TabControlAutomationPeer Class.</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ExtensibleTabControl">ExtensibleTabControl Class.</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Automation.ExtensibleTabControlAutomationPeer.#ctor(Philips.Platform.Presentation.Controls.ExtensibleTabControl)">
            <summary>
            Initializes a new <see cref="T:Philips.Platform.Presentation.Automation.ExtensibleTabControlAutomationPeer"/> instance.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Automation.ExtensibleTabControlAutomationPeer.GetClassNameCore">
            <summary>
            Gets the class name of the control that is associated with this UI Automation peer.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Automation.ExtensibleTabControlAutomationPeer.GetChildrenCore">
            <summary>
            Gets the collection of child elements of the element that is associated with this
            <seealso cref="T:Philips.Platform.Presentation.Automation.ExtensibleTabControlAutomationPeer"/>.
            </summary>
            <remarks>
            This method will use the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtensionPresenter"/> and
            <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtensionPresenter"/> to generate automation
            peers for the children of these extensions. Using the 
            <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtension"/> and 
            <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtension"/> extensions instead of the 
            template parts is also possible, but in this case no automation peers will be created
            if the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtensionTemplate"/> or 
            <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtensionTemplate"/> is used.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Automation.NamespaceDoc">
            <summary>
            <para>
            Provides dedicated automation peers for custom controls of the WPF Presentation Toolkit.
            </para>
            <para>
            For the purpose of automated UI testing, it is necessary that all WPF controls have a proper
            <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/>. For custom controls, this sometimes means that we have to
            provide a custom automation peer that allows for proper UI automation of the control. This
            namespace captures exactly those custom automation peers. Note that it is not necessary to
            have a dedicated automation peer for each custom control. Some custom controls are already
            automatable without the need for a custom peer.
            </para>
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Automation.NavigationItemAutomationPeer">
            <summary>
            Exposes <see cref="T:Philips.Platform.Presentation.Controls.NavigationItem"/> types to UI automation.
            </summary>
            <seealso cref="T:System.Windows.Automation.Peers.AutomationPeer">AutomationPeer Class</seealso>
            <seealso cref="T:System.Windows.Automation.Peers.TabItemAutomationPeer">TabItemAutomationPeer Class.</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.NavigationItem">NavigationItem Class.</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Automation.NavigationItemAutomationPeer.#ctor(System.Object,Philips.Platform.Presentation.Automation.NavigationPaneAutomationPeer)">
            <summary>
            Initializes a new <see cref="T:Philips.Platform.Presentation.Automation.NavigationItemAutomationPeer"/> instance.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Automation.NavigationItemAutomationPeer.GetClassNameCore">
            <summary>
            Gets the class name of the control that is associated with this UI Automation peer.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Automation.NavigationItemAutomationPeer.GetChildrenCore">
            <summary>
            Gets the collection of child elements of the element that is associated with this
            <seealso cref="T:Philips.Platform.Presentation.Automation.ExtensibleTabControlAutomationPeer"/>.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Automation.NavigationPaneAutomationPeer">
            <summary>
            Exposes <see cref="T:Philips.Platform.Presentation.Controls.NavigationPane"/> types to UI automation.
            </summary>
            <seealso cref="T:System.Windows.Automation.Peers.AutomationPeer">AutomationPeer Class</seealso>
            <seealso cref="T:System.Windows.Automation.Peers.TabControlAutomationPeer">TabControlAutomationPeer Class.</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.NavigationPane">NavigationPane Class.</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Automation.NavigationPaneAutomationPeer.#ctor(Philips.Platform.Presentation.Controls.NavigationPane)">
            <summary>
            Initializes a new <see cref="T:Philips.Platform.Presentation.Automation.NavigationPaneAutomationPeer"/> instance.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Automation.NavigationPaneAutomationPeer.GetClassNameCore">
            <summary>
            Gets the class name of the control that is associated with this UI Automation peer.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Automation.NavigationPaneAutomationPeer.CreateItemAutomationPeer(System.Object)">
            <summary>
            Creates a item automation peer for the specified item.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Automation.NavigationPaneAutomationPeer.GetChildrenCore">
            <summary>
            Gets the collection of child elements of the element that is associated with this
            <seealso cref="T:Philips.Platform.Presentation.Automation.ExtensibleTabControlAutomationPeer"/>.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.BackgroundBlurBehavior">
            <summary>
            Exposes attached behavior to apply background blurring to a <see cref="T:System.Windows.UIElement"/>.
            </summary>
            <remarks>
            This behavior can be used to instruct a <see cref="T:System.Windows.UIElement"/> to apply a
            <see cref="T:System.Windows.Media.Effects.BlurEffect"/> to its background (or, rather, to itself). This can be used,
            for example, to temporarily blur the background window while a modal dialog is open,
            in order to draw the user's attention to the dialog. In order for this behavior to have
            any effect, there must be a style that has a trigger that responds to changes of the
            <see cref="F:Philips.Platform.Presentation.Controls.BackgroundBlurBehavior.BackgroundBlurProperty"/> exposed by this behavior; in response to this property
            becoming <see langword="true"/>, the style must then apply the appropriate blurring effect
            to the <see cref="T:System.Windows.UIElement"/>.
            </remarks>
            <example>
            The following example shows how a root <see cref="T:System.Windows.Window"/> can be instructed to temporarily
            apply a <see cref="T:System.Windows.Media.Effects.BlurEffect"/> to its background, while a dialog is being shown on top of
            the blurred background.
            <code lang="csharp">
              <![CDATA[
                var owner = Window.GetWindow(this);
                var root = owner.GetRoot();
                BackgroundBlurBehavior.SetBackgroundBlur(root, true);
                var dialog = new Dialog { Owner = owner };
                dialog.ShowDialog();
                BackgroundBlurBehavior.SetBackgroundBlur(root, false);
              ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.UIElement">UIElement Class</seealso>
            <seealso cref="T:System.Windows.Media.Effects.BlurEffect">BlurEffect Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.BackgroundBlurBehavior.GetBackgroundBlur(System.Windows.DependencyObject)">
            <summary>
            Gets the <b>BackgroundBlur</b> property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the <see cref="F:Philips.Platform.Presentation.Controls.BackgroundBlurBehavior.BackgroundBlurProperty"/> from.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.BackgroundBlurBehavior.SetBackgroundBlur(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the <b>BackgroundBlur</b> property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the <see cref="F:Philips.Platform.Presentation.Controls.BackgroundBlurBehavior.BackgroundBlurProperty"/> on.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BackgroundBlurBehavior.BackgroundBlurProperty">
            <summary>
            Identifies the <b>BackgroundBlur</b> dependency property.
            </summary>
            <remarks>
            <para>
            This property can be used to instruct a <see cref="T:System.Windows.UIElement"/> to apply a
            <see cref="T:System.Windows.Media.Effects.BlurEffect"/> to its background (or, rather, to itself). This can be used,
            for example, to temporarily blur the background window while a dialog is open, in order
            to draw the user's focus of attention to the dialog, with minimal distractions from
            the background window.
            </para>
            <para>
            The default value of this property is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.CapsLockDetectionBehavior">
            <summary>
            Exposes attached behavior to detect whether the Caps Lock key is on.
            </summary>
            <remarks>
            <para>
            This behavior can be attached to any <see cref="T:System.Windows.FrameworkElement"/> that needs to know
            whether the Caps Lock key is on. Examples are case-sensitive input fields, in particular
            <see cref="T:System.Windows.Controls.PasswordBox"/> instances. This behavior defines two dependency properties.
            The <see cref="F:Philips.Platform.Presentation.Controls.CapsLockDetectionBehavior.IsAwareOfCapsLockProperty"/> can be used to make a <c>FrameworkElement</c>
            aware of whether the Caps Lock key is on or off; the <see cref="F:Philips.Platform.Presentation.Controls.CapsLockDetectionBehavior.IsCapsLockOnProperty"/>
            can be used to determine whether the Caps Lock key is actually on.
            </para>
            <para>
            A <c>FrameworkElement</c> that is aware of the Caps Lock key can respond to changes in
            the state of the Caps Lock key in any way it wants. For example, a <c>PasswordBox</c>
            might display a message warning the user that the Caps Lock key is on.
            </para>
            </remarks>
            <see cref="T:System.Windows.FrameworkElement">FrameworkElement Class</see>
            <see cref="T:System.Windows.Controls.PasswordBox">PasswordBox Class</see>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CapsLockDetectionBehavior.GetIsCapsLockOn(System.Windows.DependencyObject)">
            <summary>
            Gets whether the caps lock key is on or off.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CapsLockDetectionBehavior.SetIsCapsLockOn(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether the caps lock key is on or off.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.CapsLockDetectionBehavior.IsCapsLockOnPropertyKey">
            <summary>
            Attached property key for the <c>IsCapsLockOn</c> property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.CapsLockDetectionBehavior.IsCapsLockOnProperty">
            <summary>
            Read-only attached property for the <c>IsCapsLockOn</c> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CapsLockDetectionBehavior.GetIsAwareOfCapsLock(System.Windows.DependencyObject)">
            <summary>
            Gets whether the specified <see cref="T:System.Windows.DependencyObject"/> is aware of the
            caps lock key state.
            </summary>
            <param name="dependencyObject">
            The dependency object to which this property is attached.
            </param>
            <remarks>
            This property should be set on a <see cref="T:System.Windows.FrameworkElement"/>.
            It is <see langword="true"/> if the control is aware of the caps lock;
            <see langword="false"/>, otherwise.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CapsLockDetectionBehavior.SetIsAwareOfCapsLock(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether the specified <see cref="T:System.Windows.DependencyObject"/> is aware of the
            caps lock key state.
            </summary>
            <remarks>
            This property should be set on a <see cref="T:System.Windows.FrameworkElement"/>.
            It is <see langword="true"/> if the control is aware of the caps lock;
            <see langword="false"/>, otherwise.
            </remarks>
            <param name="dependencyObject">
            The dependency object to which this property is attached.
            </param>
            <param name="value">The value of this attached property.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.CapsLockDetectionBehavior.IsAwareOfCapsLockProperty">
            <summary>
            Attached property for the <c>IsAwareOfCapsLock</c> property.
            </summary>
            <remarks>
            This property should be set on a <see cref="T:System.Windows.FrameworkElement"/>.
            It is <see langword="true"/> if the control is aware of the caps lock;
            <see langword="false"/>, otherwise.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CapsLockDetectionBehavior.OnIsAwareOfCapsLockChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in the <see cref="F:Philips.Platform.Presentation.Controls.CapsLockDetectionBehavior.IsAwareOfCapsLockProperty"/>.
            </summary>
            <param name="dependencyObject">
            The dependency object for which the value of this property has changed.
            </param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CapsLockDetectionBehavior.OnFrameworkElementLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.FrameworkElement.Loaded"/> event of the given 
            <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="routedEventArgs">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CapsLockDetectionBehavior.OnFrameworkElementUnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.FrameworkElement.Loaded"/> event of the given 
            <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
            <param name="sender">The <see cref="T:System.Windows.FrameworkElement"/>.</param>
            <param name="routedEventArgs">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CapsLockDetectionBehavior.OnPreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the <c>Keyboard.PreviewKeyDown</c> attached event.
            </summary>
            <remarks>
            This class monitors the keyboard in order to detect when the Caps Lock key is toggled.
            When this happens, we need to toggle the is Caps Lock on property.
            </remarks>
            <param name="sender">The sender</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CapsLockDetectionBehavior.HandleCapsLockKey(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Handles changes to the caps lock key for the specified dependency object.
            </summary>
            <param name="dependencyObject">The sender.</param>
            <param name="isCapslockOn">
            The new value for the dependency object's <b>IsCapsLockOn</b> attached property.
            </param>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.CircularProgressBarSizeBehavior">
            <summary>
            Behavior to change properties of the circular progress bar based on different sizes.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CircularProgressBarSizeBehavior.GetCircularProgressBarSize(System.Windows.DependencyObject)">
            <summary>
            Gets the value of CircularProgressBarSize
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CircularProgressBarSizeBehavior.SetCircularProgressBarSize(System.Windows.DependencyObject,Philips.Platform.Presentation.Controls.CircularProgressBarSize)">
            <summary>
            Sets the Circular ProgressBar Size property
            </summary>
            <param name="dependencyObject"></param>
            <param name="type"></param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.CircularProgressBarSizeBehavior.CircularProgressBarSizeProperty">
            <summary>
            Identifies the CircularProgressBarSize dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CircularProgressBarSizeBehavior.GetCircularProgressBarInnerRadius(System.Windows.DependencyObject)">
            <summary>
            Gets the value of CircularProgressBarInnerRadius
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CircularProgressBarSizeBehavior.SetCircularProgressBarInnerRadius(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the Circular ProgressBar inner radius property, which determines 
            the width of the bar
            </summary>
            <param name="dependencyObject"></param>
            <param name="type"></param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.CircularProgressBarSizeBehavior.CircularProgressBarInnerRadiusProperty">
            <summary>
            Identifies the CircularProgressBarInnerRadius dependency property.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.CultureBehavior">
            <summary>
            Exposes attached behavior that can be used to extend the functionality of any control
            that needs culturisation.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.CultureBehavior.UseHarmonizedCultureProperty">
            <summary>
            Identifies the UseHarmonizedCulture dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CultureBehavior.GetUseHarmonizedCulture(System.Windows.DependencyObject)">
            <summary>
            Gets the UseHarmonizedCulture property value of a <see cref="T:System.Windows.DependencyObject"/>,
            meaning whether the date and the time are displayed using the harmonized formatting
            as defined by the UICC, or whether the date and time are displayed using the formatting
            associated with the local or operating system culture.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the UseHarmonizedCultureProperty from.
            </param>
            <remarks>
            <para>
            For date display, the harmonized formatting means "dd-MM-yyyy", at least for Western
            cultures. For non-Western cultures such as Japanese or Russian, date formatting that
            is more suitable for those cultures will be used.
            </para>
            <para>
            For time display, the harmonized formatting means "HH:mm" or "HH:mm:ss", depending on
            the value of the <see cref="P:Philips.Platform.Presentation.Controls.Clock.ShowsSeconds"/> property. This means that, for the
            harmonized format, the 24-hour clock is always used, displaying the hours from 0 to 23.
            For some cultures, most notably the United States of America, this is often undesirable,
            as users are more familiar with the 12-hour clock which displays the hours from 1 to 12
            and includes AM and PM to indicate ante meridiem (before noon) and post meridiem (after
            noon). If you prefer to use the local or operating time formatting, you should set the
            value of the current property to <see langword="false"/>.
            </para>
            <para>
            The default value of this property is <see langword="true"/>, meaning that by default,
            both the date and the time are displayed using the harmonized formatting as defined by
            the UICC.
            </para>
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CultureBehavior.SetUseHarmonizedCulture(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the UseHarmonizedCulture property of a <see cref="T:System.Windows.DependencyObject"/>,
            meaning whether the date and the time are displayed using the harmonized formatting
            as defined by the UICC, or whether the date and time are displayed using the formatting
            associated with the local or operating system culture.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the UseHarmonizedCultureProperty on.
            </param>
            <param name="source">The value to set.</param>
            <remarks>See <see cref="M:Philips.Platform.Presentation.Controls.CultureBehavior.GetUseHarmonizedCulture(System.Windows.DependencyObject)"/> for a detailed explanation.</remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.DialogWindowCloseBehavior">
            <summary>
            Exposes attached behavior to make a <see cref="T:System.Windows.Window"/> or a <see cref="T:Philips.Platform.Presentation.Controls.Dialog"/> closable.
            </summary>
            <seealso cref="T:System.Windows.Window">Window Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.Dialog">Dialog Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.DialogWindowMaximizeBehavior">DialogWindowMaximizeBehavior Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowCloseBehavior.GetIsCloseButton(System.Windows.DependencyObject)">
            <summary>
            Gets the IsCloseButton property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the IsCloseButtonProperty from.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowCloseBehavior.SetIsCloseButton(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the IsCloseButton property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the IsCloseButtonProperty on.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DialogWindowCloseBehavior.IsCloseButtonProperty">
            <summary>
            Identifies the <c>IsCloseButton</c> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowCloseBehavior.OnIsCloseButtonChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="F:Philips.Platform.Presentation.Controls.DialogWindowCloseBehavior.IsCloseButtonProperty"/>.
            </summary>
            <param name="dependencyObject">
            The dependency object of which the property was changed.
            </param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowCloseBehavior.OnCloseButtonClick(System.Object,System.EventArgs)">
            <summary>
            Handles the click event of the close button.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
            <remarks>
            The window's dialog result is automatically set to <see langword="false"/> if the
            window was shown using the <see cref="M:System.Windows.Window.ShowDialog"/> method.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.DialogWindowDragBehavior">
            <summary>
            Exposes attached behavior to make a <see cref="T:System.Windows.Window"/> draggable.
            </summary>
            <seealso cref="T:System.Windows.Window">Window Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowDragBehavior.GetIsDragArea(System.Windows.DependencyObject)">
            <summary>
            Gets the IsDragArea property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the IsDragAreaProperty from.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowDragBehavior.SetIsDragArea(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the IsDragArea property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the IsDragAreaProperty on.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DialogWindowDragBehavior.IsDragAreaProperty">
            <summary>
            Identifies the <c>IsDragArea</c> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowDragBehavior.OnIsDragAreaChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="F:Philips.Platform.Presentation.Controls.DialogWindowDragBehavior.IsDragAreaProperty"/>.
            </summary>
            <param name="dependencyObject">
            The dependency object of which the property was changed.
            </param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowDragBehavior.OnMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"/> event in the drag area.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.DialogWindowMaximizeBehavior">
            <summary>
            Static class that exposes attached behavior to implement maximize/restore functionality for
            the <see cref="T:System.Windows.Window"/> and the <see cref="T:Philips.Platform.Presentation.Controls.Dialog"/> classes.
            </summary>
            <seealso cref="T:System.Windows.Window">Window Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.Dialog">Dialog Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.BrandingScreenBase">BrandingScreenBase Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.DialogWindowCloseBehavior">DialogWindowCloseBehavior Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowMaximizeBehavior.GetIsMaximizeButton(System.Windows.DependencyObject)">
            <summary>
            Gets the <b>IsMaximizeButton</b> property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the value of the
            <see cref="F:Philips.Platform.Presentation.Controls.DialogWindowMaximizeBehavior.IsMaximizeButtonProperty"/> from.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowMaximizeBehavior.SetIsMaximizeButton(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the <b>IsMaximizeButton</b> property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the value of the
            <see cref="F:Philips.Platform.Presentation.Controls.DialogWindowMaximizeBehavior.IsMaximizeButtonProperty"/> on.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DialogWindowMaximizeBehavior.IsMaximizeButtonProperty">
            <summary>
            Identifies the <b>IsMaximizeButton</b> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowMaximizeBehavior.GetRestoreSizeToContent(System.Windows.DependencyObject)">
            <summary>
            Gets the value that the <see cref="P:System.Windows.Window.SizeToContent"/> property must be restored to
            when a <see cref="T:System.Windows.Window"/> is restored from the <see cref="F:System.Windows.WindowState.Maximized"/>.
            </summary>
            <param name="dependencyObject">
            The dependency object, i.e., the window to get the value of this attached property for.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowMaximizeBehavior.SetRestoreSizeToContent(System.Windows.DependencyObject,System.Windows.SizeToContent)">
            <summary>
            Sets the value that the <see cref="P:System.Windows.Window.SizeToContent"/> property must be restored to
            when a <see cref="T:System.Windows.Window"/> is restored from the <see cref="F:System.Windows.WindowState.Maximized"/>.
            </summary>
            <param name="dependencyObject">
            The dependency object, i.e., the window to set the value of this attached property for.
            </param>
            <param name="value">
            The value that the <see cref="P:System.Windows.Window.SizeToContent"/> property must be restored to.
            </param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DialogWindowMaximizeBehavior.RestoreSizeToContentProperty">
            <summary>
            Identifies the <b>RestoreSizeToContent</b> private dependency property.
            </summary>
            <remarks>
            This dependency property is used to keep track of the value of the
            <see cref="P:System.Windows.Window.SizeToContent"/> property while the window is maximized. This is
            necessary because, in order to maximize the window, we need to temporarily change
            the value of this property to <see cref="F:System.Windows.SizeToContent.Manual"/>. Because this
            attached property is purely intended for internal administration, we keep it private
            and do not expose it as a public API.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowMaximizeBehavior.OnIsMaximizeButtonChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="F:Philips.Platform.Presentation.Controls.DialogWindowMaximizeBehavior.IsMaximizeButtonProperty"/>.
            </summary>
            <param name="dependencyObject">
            The dependency object of which the property was changed.
            </param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowMaximizeBehavior.OnMaximizeButtonClick(System.Object,System.EventArgs)">
            <summary>
            Handles the click event of the window's Maximize/Restore button.
            </summary>
            <param name="sender">The sender of the event, i.e, the Maximize/Restore button.</param>
            <param name="e">The event arguments.</param>
            <remarks>
            If the window is already maximized, the window state is restored to normal.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.DialogWindowMinimizeBehavior">
            <summary>
            Exposes attached behavior to make a <see cref="T:System.Windows.Window"/> or a <see cref="T:Philips.Platform.Presentation.Controls.Dialog"/> minimize.
            </summary>
            <seealso cref="T:System.Windows.Window">Window Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.Dialog">Dialog Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowMinimizeBehavior.GetIsMinimizeButton(System.Windows.DependencyObject)">
            <summary>
            Gets the IsMinimizeButton property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the IsMinimizeButtonProperty from.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowMinimizeBehavior.SetIsMinimizeButton(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the IsMinimize property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the IsMinimizeButtonProperty on.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DialogWindowMinimizeBehavior.IsMinimizeButtonProperty">
            <summary>
            Identifies the <c>IsMinimizeButton</c> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowMinimizeBehavior.OnIsMinimizeButtonChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="F:Philips.Platform.Presentation.Controls.DialogWindowMinimizeBehavior.IsMinimizeButtonProperty"/>.
            </summary>
            <param name="dependencyObject">
            The dependency object of which the property was changed.
            </param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowMinimizeBehavior.OnMinimizeButtonClick(System.Object,System.EventArgs)">
            <summary>
            Handles the click event of the Minimize button.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
            <remarks>
            After bringing back the window on the screen, the windowstate is not longer minimized.
            The windowstate will go back to the windowstate it was before minimizing.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.DialogWindowScaleBehavior">
            <summary>
            Exposes attached behavior to properly scale a <see cref="T:System.Windows.Window"/> or a
            <see cref="T:Philips.Platform.Presentation.Controls.Dialog"/>.
            </summary>
            <remarks>
            <para>
            In WPF, there is an issue when you want to scale an entire window. The reason is that
            setting the <see cref="P:System.Windows.FrameworkElement.LayoutTransform"/> property of a 
            <see cref="T:System.Windows.Window"/> does not work, because the window chrome is not rendered by WPF but
            by the OS which has no knowledge about transforms. The window effectively ignores the
            layout transform setting. What this means is that you can easily scale the <i>contents</i>
            of a window, but not the window itself, including the title bar and other chrome. This
            is a well-known limitation of WPF.
            </para>
            <para>
            This attached behavior is a way to address this issue. By setting the attached properties
            <b>ScaleX</b> and <b>ScaleY</b>, application builder can instruct a window or a dialog to
            scale itself. It is up to the window and dialog styles to pick up this attached property
            and implement proper scaling behavior, including scaling of the title bar.
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Window">Window Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.Dialog">Dialog Class</seealso>
            <seealso href="https://social.msdn.microsoft.com/Forums/en-US/a051e36e-1ef9-448f-9ad0-9ade91115bf2/windowlayouttransform-why-doesnt-this-work?forum=wpf">Window.LayoutTransform -&gt; Why doesn't this work?</seealso>
            <seealso href="http://stackoverflow.com/questions/5022397/scale-an-entire-wpf-window">Scale an entire WPF window</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowScaleBehavior.GetScaleX(System.Windows.DependencyObject)">
            <summary>
            Gets the scale factor of the X-axis of the dialog or window to which this
            property is attached.
            </summary>
            <remarks>
            The default value of this property is 1.0. Giving this property a decent value is
            the responsibility of the style.
            </remarks>
            <param name="dependencyObject">The dependency object.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowScaleBehavior.SetScaleX(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the scale factor of the X-axis of the dialog or window to which this
            property is attached.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="value">The scale factor to be applied.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DialogWindowScaleBehavior.ScaleXProperty">
            <summary>
            Identifies the <c>ScaleX</c> dependency property.
            </summary>
            <remarks>
            The default value of this property is 1.0. Giving this property a decent value is
            the responsibility of the style.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowScaleBehavior.GetScaleY(System.Windows.DependencyObject)">
            <summary>
            Gets the scale factor of the Y-axis of the dialog or window to which this
            property is attached.
            </summary>
            <remarks>
            The default value of this property is 1.0. Giving this property a decent value is
            the responsibility of the style.
            </remarks>
            <param name="dependencyObject">The dependency object.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DialogWindowScaleBehavior.SetScaleY(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the scale factor of the Y-axis of the dialog or window to which this
            property is attached.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="value">The scale factor to be applied.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DialogWindowScaleBehavior.ScaleYProperty">
            <summary>
            Identifies the <c>ScaleY</c> dependency property.
            </summary>
            <remarks>
            The default value of this property is 1.0. Giving this property a decent value is
            the responsibility of the style.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.DragDropManager">
            <summary>
            Performs the drag and drop plumbing and fires methods on the classes that inherit from
            <see cref="T:Philips.Platform.Presentation.DragSourceAdvisorBase"/> and <see cref="T:Philips.Platform.Presentation.DropTargetAdvisorBase"/> abstract classes.
            </summary>
            <remarks>
            <para>
            The design is made according to the book by Pavan Podila, "WPF Control Development",
            Chapter 6: "Implementing Drag and Drop with Attached Properties".
            </para>
            <para>
            The attached properties of this class are used to encapsulate the drag and drop behavior.
            This class defines the skeleton for the drag and drop algorithm. The specific steps of the
            algorithm are overridden by the subclasses which derive from the
            <see cref="T:Philips.Platform.Presentation.DragSourceAdvisorBase"/> and the <see cref="T:Philips.Platform.Presentation.DropTargetAdvisorBase"/>.
            </para>
            <para>
            This drag and drop manager also updates the cursor to reflect the state of the drag and
            drop operation. If the cursor hovers over a valid drop target, this is clearly indicated,
            taking the <see cref="T:System.Windows.DragDropEffects"/> associated with the drag and drop operation into
            account. Depending on the effects, the cursor for a valid drop target is set to
            <see cref="P:Philips.Platform.Presentation.ExperienceIdentityCursors.DragGrabCursor"/> or
            <see cref="P:Philips.Platform.Presentation.ExperienceIdentityCursors.DragCopyCursor"/>.
            If the cursor hovers over an invalid drop target, this is also clearly indicated
            by changing the cursor to <see cref="P:Philips.Platform.Presentation.ExperienceIdentityCursors.DragGrabNotAllowedCursor"/>.
            </para>
            </remarks>
            <example>
            The following example shows how a <c>Canvas</c> class can be decorated with Drop
            and Drag Behavior in XAML. Please note that a full fledged drag and drop implementation
            requires much more code to be written.
            <code lang="xaml">
            <![CDATA[
            <Canvas x:Name="canvas"
                pt:DragDropManager.DragSourceAdvisor="{StaticResource CanvasDragSourceAdvisor}"
                pt:DragDropManager.DropTargetAdvisor="{StaticResource CanvasDropTargetAdvisor}">
            ]]>
            </code>
            </example>
            <seealso cref="T:Philips.Platform.Presentation.DragSourceAdvisorBase">DragSourceAdvisorBase Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.DropTargetAdvisorBase">DropTargetAdvisorBase Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.DropPreviewAdorner">DropPreviewAdorner Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.DragDropManager.DragSourceAdvisorProperty">
            <summary>
            Attached property for DragSourceAdvisor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.DragDropManager.GetDragSourceAdvisor(System.Windows.DependencyObject)">
            <summary>
            Gets the DragSourceAdvisor property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the DragSourceAdvisorProperty from.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.DragDropManager.SetDragSourceAdvisor(System.Windows.DependencyObject,Philips.Platform.Presentation.DragSourceAdvisorBase)">
            <summary>
            Sets the DragSourceAdvisor property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the DragSourceAdvisorProperty on.
            </param>
            <param name="dragSource">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.DragDropManager.DropTargetAdvisorProperty">
            <summary>
            Attached property for DragSourceAdvisor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.DragDropManager.GetDropTargetAdvisor(System.Windows.DependencyObject)">
            <summary>
            Gets the DropTargetAdvisor property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the DropTargetAdvisorProperty from.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.DragDropManager.SetDropTargetAdvisor(System.Windows.DependencyObject,Philips.Platform.Presentation.DropTargetAdvisorBase)">
            <summary>
            Sets the DragSourceAdvisor property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the DragSourceAdvisorProperty on.
            </param>
            <param name="dropTarget">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.DragDropManager.DragDropTemplateProperty">
            <summary>
            Attached property for DragDropTemplate.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.DragDropManager.GetDragDropTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets the DragDropTemplate property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the DragDropTemplateProperty from.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.DragDropManager.SetDragDropTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Sets the DragDropTemplate property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the DragDropTemplateProperty on.
            </param>
            <param name="dragDropTemplate">The value to set.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.DragDropManager.UpdateCursor(System.Windows.DragDropEffects)">
            <summary>
            Updates the cursor to reflect the state of the drag and drop operation,
            as well as the drag and drop effects associated with the operation.
            </summary>
            <param name="effects">The drag and drop effects.</param>
        </member>
        <member name="T:Philips.Platform.Presentation.DragSourceAdvisorBase">
            <summary>
            Implemented by a source control to advise the <seealso cref="T:Philips.Platform.Presentation.DragDropManager"/>
            on how the source control behaves during drag and drop operations.
            </summary>
            <seealso cref="T:Philips.Platform.Presentation.DragDropManager">DragDropManager Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.DropTargetAdvisorBase">DropTargetAdvisorBase Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.DropPreviewAdorner">DropPreviewAdorner Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.DragSourceAdvisorBase.FinishDrag(System.Windows.UIElement,System.Windows.DragDropEffects)">
            <summary>
            Cleanup operations performed on the source advisor side
            once the drag-and-drop operations are finished.
            </summary>
            <param name="draggedElement">
            The <see cref="T:System.Windows.UIElement"/> used as a drag source.
            </param>
            <param name="dragDropEffects"> 
            Permitted effects of the drag-and-drop operation.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.DragSourceAdvisorBase.GetDataObject(System.Windows.UIElement,System.Windows.Input.MouseEventArgs)">
            <summary>
            Get the data that is transferred during the drag-and-drop operations.
            </summary>
            <param name="draggedElement">
            The <see cref="T:System.Windows.UIElement"/> used as a drag source.
            </param>
            <param name="eventArgs">
            The <see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data performed
            during  the drag operations.
            </param>
            <returns>
            An object that contains the transferred data, wrapped in a <see cref="T:System.Windows.DataObject"/>.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.DragSourceAdvisorBase.CanBeDragged(System.Windows.UIElement)">
            <summary>
            Check if the source control can be used during drag-and-drop operations.
            </summary>
            <param name="draggedElement">
            The <see cref="T:System.Windows.UIElement"/> used as a drag source.
            </param>
            <returns> 
            <see langword="true"/> if source control can be dragged;
            otherwise, <see langword="false"/>. 
            </returns>
        </member>
        <member name="P:Philips.Platform.Presentation.DragSourceAdvisorBase.SourceUI">
            <summary>
            The <see cref="T:System.Windows.UIElement"/> used as a drag source.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.DragSourceAdvisorBase.SupportedEffects">
            <summary>
            Specifies the effects of the drag-and-drop operations.
            Standard it supports move and copy.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.DragSourceAdvisorBase.DataFormat">
            <summary>
            Provides a predefined data format that can be used to
            identify the data object available during the drag-and-drop operation.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.DragSourceAdvisorBase.PresentationTheme">
            <summary>
            Gets the <see cref="P:Philips.Platform.Presentation.DragSourceAdvisorBase.PresentationTheme"/> for which this drag source advisor
            should work.
            </summary>
            <remarks>
            The value of this property determines whether the visualization of the drag-and-drop
            operation, including the cursors that are used, are based on Experience Identity or
            on sDLS.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.DropPreviewAdorner">
            <summary>
            Adorner that provides visual cues during the drag-and-drop operations.
            </summary>
            <seealso cref="T:System.Windows.Documents.Adorner">Adorner Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.DragDropManager">DragDropManager Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.DragSourceAdvisorBase">DragSourceAdvisorBase Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.DropTargetAdvisorBase">DropTargetAdvisorBase Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.DropPreviewAdorner.#ctor(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Constructor.
            </summary>
            <param name="feedbackUI">
            The <see cref="T:System.Windows.UIElement"/> used as a visual cue during the
            drag and drop operations.
            </param>
            <param name="adornedElement">
            <see cref="T:System.Windows.UIElement"/> to which the adorner is bound to.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.DropPreviewAdorner.GetDesiredTransform(System.Windows.Media.GeneralTransform)">
            <summary>
            Returns a Transform for the adorner, based on the transform that is 
            currently applied to the adorned element.
            </summary>
            <param name="transform">
            The transform that is currently applied to the adorned element.
            </param>
            <returns>
            A transform to apply to the adorner.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.DropPreviewAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the content displayed during the drag-and-drop operations.
            </summary>
            <param name="constraint">
            The available size that this element can give to child element.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.DropPreviewAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the adorner taking the content displayed during
            the drag-and-drop operations into account.
            </summary>
            <param name="finalSize">
            The size of the final area within the parent that this element 
            should use to arrange itself and its child.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.DropPreviewAdorner.GetVisualChild(System.Int32)">
            <summary>
            Get the content presenter, which is the only child of the adorner.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.DropPreviewAdorner.Left">
            <summary>
            Gets or sets the position of the adorners's left edge in relation to the desktop.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.DropPreviewAdorner.Top">
            <summary>
            Gets or sets the position of the adorners's top edge in relation to the desktop.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.DropPreviewAdorner.VisualChildrenCount">
            <summary>
            Get the number of visual children within the adorner.
            </summary>
            <remarks>
            The adorner contains only one child.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.DropTargetAdvisorBase">
            <summary>
            Implemented by a target control to advise the <seealso cref="T:Philips.Platform.Presentation.DragDropManager"/> 
            on how the target control behaves during drag and drop operation.
            </summary>
            <seealso cref="T:Philips.Platform.Presentation.DragDropManager">DragDropManager Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.DragSourceAdvisorBase">DragSourceAdvisorBase Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.DropPreviewAdorner">DropPreviewAdorner Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.DropTargetAdvisorBase.IsValidDataObject(System.Windows.IDataObject)">
            <summary>
            Checks whether it accepts given data object used
            during drag-and-drop operations.
            </summary>
            <param name="dataObject">
            The <see cref="T:System.Windows.IDataObject"/> data that needs to be transferred
            during drag-and-drop operations.
            </param>
            <returns> 
            <see langword="true"/> if valid data object to be dropped during
            drag-and-drop operations; otherwise, <see langword="false"/>. 
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.DropTargetAdvisorBase.OnDropCompleted(System.Object,System.Windows.DragEventArgs,System.Windows.Point)">
            <summary>
            Final drag operation during the drag-and-drop operations.
            </summary>
            <param name="sender">
            The initiator of drag operation.
            </param>
            <param name="eventArgs">
            Drag operation event arguments.
            </param>
            <param name="dropPoint">
            The drop point.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.DropTargetAdvisorBase.GetVisualFeedback(System.Windows.IDataObject,System.Windows.DataTemplate)">
            <summary>
            Provides visual feedback during drag-and-drop operations.
            </summary>
            <param name="dataObject">
            An object that contains the transferred data, wrapped in a <see cref="T:System.Windows.IDataObject"/>.
            </param>
            <param name="dataTemplate">
            Visual appearance of the specified data object.
            </param>
            <returns>
            Get <see cref="T:System.Windows.UIElement"/> that provides the visual feedback.
            </returns>
        </member>
        <member name="P:Philips.Platform.Presentation.DropTargetAdvisorBase.TargetUI">
            <summary>
            The <see cref="T:System.Windows.UIElement"/> used as a drop target.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.DropTargetAdvisorBase.DataFormat">
            <summary>
            Provides a predefined data format that can be used to
            identify the data object available during the drag-and-drop operations.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.ExpanderBehavior">
            <summary>
            Exposes attached behavior that can be used to extend the functionality of an <see cref="T:System.Windows.Controls.Expander"/>.
            </summary>
            <remarks>
            <para>
            This attached behavior extends the functionality of an <see cref="T:System.Windows.Controls.Expander"/>.
            By using the <b>ShowExtraMarginsWhenExpanded</b> attached property, the visual style
            of the expander changes, causing it to show extra margins when the <see cref="T:System.Windows.Controls.Expander"/> is expanded.
            Likewise, the <b>ShowExtraPaddingsWhenExpanded</b> attached property causes the <see cref="T:System.Windows.Controls.Expander"/>
            to show extra paddings when expanded.
            </para>
            <code lang="xaml">
            <![CDATA[
            <Expander x:Name="expander"
                pt:ExpanderBehavior.ShowExtraMarginsWhenExpanded="True"
                pt:ExpanderBehavior.ShowExtraPaddingsWhenExpanded="True"/>
            ]]>
            </code>
            </remarks>
            <seealso cref="T:System.Windows.Controls.Expander">Expander Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.ExpanderBehavior.GetShowExtraMarginsWhenExpanded(System.Windows.DependencyObject)">
            <summary>
            Gets whether the specified dependency object <see cref="T:System.Windows.DependencyObject"/>
            will show extra margins when expanded.
            </summary>
            <param name="dependencyObject">
            The dependency object, which should be an <see cref="T:System.Windows.Controls.Expander"/>.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.ExpanderBehavior.SetShowExtraMarginsWhenExpanded(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether the specified dependency object of a <see cref="T:System.Windows.DependencyObject"/>
            will show extra margins when expanded.
            </summary>
            <param name="dependencyObject">
            The dependency object, which should be an <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.ExpanderBehavior.ShowExtraMarginsWhenExpandedProperty">
            <summary>
            Identifies the <c>ShowExtraMarginsWhenExpanded</c> dependency property.
            </summary>
            <remarks>
            By default, the value of this dependency property is <see langword="false"/>,
            which means that, by default, any <see cref="T:System.Windows.Controls.Expander"/> will not show extra margins when expanded.
            This default value is chosen because it reflects the existing
            behavior of the <b>Expander</b> control.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.ExpanderBehavior.GetShowExtraPaddingsWhenExpanded(System.Windows.DependencyObject)">
            <summary>
            Gets whether the specified dependency object <see cref="T:System.Windows.DependencyObject"/>
            will show extra paddings when expanded.
            </summary>
            <param name="dependencyObject">
            The dependency object, which should be an <see cref="T:System.Windows.Controls.Expander"/>.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.ExpanderBehavior.SetShowExtraPaddingsWhenExpanded(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether the specified dependency object of a <see cref="T:System.Windows.DependencyObject"/>
            will show extra paddings when expanded.
            </summary>
            <param name="dependencyObject">
            The dependency object, which should be an <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.ExpanderBehavior.ShowExtraPaddingsWhenExpandedProperty">
            <summary>
            Identifies the <c>ShowExtraPaddingsWhenExpanded</c> dependency property.
            </summary>
            <remarks>
            By default, the value of this dependency property is <see langword="false"/>,
            which means that, by default, any <see cref="T:System.Windows.Controls.Expander"/> will not show extra paddings when expanded.
            This default value is chosen because it reflects the existing
            behavior of the <b>Expander</b> control.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ItemsControlBehavior">
            <summary>
            Exposes attached behavior to govern whether an <see cref="T:System.Windows.Controls.ItemsControl"/> 
            shows or hides its disabled items.
            </summary>
            <remarks>
            <para>
            This attached behavior allows you to extend the functionality of any <see cref="T:System.Windows.Controls.ItemsControl"/>
            with a property that governs whether the <b>ItemsControl</b> should show (visualize) its
            disabled items. This is particularly useful if you have a requirement to hide (or, in XAML
            terms, collapse) the disabled menu items in a <see cref="T:System.Windows.Controls.Menu"/> or a <see cref="T:System.Windows.Controls.ContextMenu"/>.
            By setting the value of the attached property <b>ItemsControlBehavior.ShowDisabledItems</b>
            to <see langword="false"/>, you can make the <b>Menu</b> or the <b>ContextMenu</b> hide its
            disabled items.
            </para>
            <para>
            Note that the use of this attached behavior is not restricted to the <b>Menu</b> or the
            <b>ContextMenu</b>. In principle, this attached behavior can be applied to any control that
            is derived from <see cref="T:System.Windows.Controls.ItemsControl"/>. It is up to the styles for such controls to
            respond to the values of the properties provided by this attached behavior, and to change
            their behavior and visualization accordingly.
            </para>
            <example>
            The following example shows how a <see cref="T:System.Windows.Controls.ContextMenu"/> control can be made to hide its
            disabled menu items using this attached behavior.
            <code lang="xaml">
            <![CDATA[
            <ContextMenu x:Name="contextMenu"
                pt:ItemsControlBehavior.ShowDisabledItems="False"/>
            ]]>
            </code>
            </example>
            </remarks>
            <seealso cref="T:System.Windows.Controls.ItemsControl">ItemsControl Class</seealso>
            <seealso cref="T:System.Windows.Controls.Menu">Menu Class</seealso>
            <seealso cref="T:System.Windows.Controls.ContextMenu">ContextMenu Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ItemsControlBehavior.GetShowDisabledItems(System.Windows.DependencyObject)">
            <summary>
            Gets whether the specified dependency object <see cref="T:System.Windows.DependencyObject"/>
            will show its disabled items. 
            </summary>
            <param name="dependencyObject">
            The dependency object, which should be an <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ItemsControlBehavior.SetShowDisabledItems(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether the specified dependency object of a <see cref="T:System.Windows.DependencyObject"/>
            will show its disabled items.
            </summary>
            <param name="dependencyObject">
            The dependency object, which should be an <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ItemsControlBehavior.ShowDisabledItemsProperty">
            <summary>
            Identifies the <c>ShowDisabledItems</c> dependency property.
            </summary>
            <remarks>
            By default, the value of this dependency property is <see langword="true"/>,
            which means that, by default, any <see cref="T:System.Windows.Controls.ItemsControl"/> will show its
            disabled items. This default value is chosen because it reflects the existing
            behavior of the <b>ItemsControl</b> and its derived controls.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.OverflowBehavior">
            <summary>
            Exposes behavior related to the customization of the overflow functionality
            for controls that support such functionality.
            </summary>
            <remarks>
            <para>
            Some controls such as the <see cref="T:System.Windows.Controls.ToolBar"/> and the <see cref="T:Philips.Platform.Presentation.Controls.MovieBar"/> support
            functionality that moves controls that are hosted to an overflow popup when there is
            not enough space to fit them on the main control. Certain aspects of this overflow
            behavior are subject to customization. This attached behavior class exposes exactly
            those properties that can be customized by integrators of the such controls.
            </para>
            <example>
            The following example shows how you can use this attached behavior to customize the tooltip
            of the overflow button of a <see cref="T:System.Windows.Controls.ToolBar"/>.
            <code lang="xaml">
            <![CDATA[
            <ToolBar x:Name="toolBar"
                pt:OverflowBehavior.OverflowButtonToolTip="Custom overflow button tooltip"/>
            ]]>
            </code>
            </example>
            </remarks>
            <seealso cref="T:System.Windows.Controls.ToolBar">ToolBar Class</seealso>
            <seealso cref="T:System.Windows.Controls.Primitives.ToolBarOverflowPanel">ToolBarOverflowPanel Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.MovieBar">MovieBar Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.OverflowBehavior.GetOverflowButtonToolTip(System.Windows.DependencyObject)">
            <summary>
            Gets the tooltip associated with the overflow button hosted by the specified
            <paramref name="dependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The dependency object, which should be a control that hosts an overflow button,
            such as a <see cref="T:System.Windows.Controls.ToolBar"/> or a <see cref="T:Philips.Platform.Presentation.Controls.MovieBar"/>.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.OverflowBehavior.SetOverflowButtonToolTip(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the tooltip associated with the overflow button hosted by the specified
            <paramref name="dependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The dependency object, which should be a control that hosts an overflow button,
            such as a <see cref="T:System.Windows.Controls.ToolBar"/> or a <see cref="T:Philips.Platform.Presentation.Controls.MovieBar"/>.
            </param>
            <param name="value">
            The value to set, representing the overflow button's tooltip.
            </param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.OverflowBehavior.OverflowButtonToolTipProperty">
            <summary>
            Identifies the <c>OverflowButtonToolTip</c> dependency property.
            </summary>
            <remarks>
            By default, the value of this dependency property is <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.OverflowBehavior.GetToolBarOverflowPanelWrapWidth(System.Windows.DependencyObject)">
            <summary>
            Gets the toolbar overflow panel wrap width of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The dependency object. Must be a <see cref="T:System.Windows.Controls.ToolBar"/>.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.OverflowBehavior.SetToolBarOverflowPanelWrapWidth(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the toolbar overflow panel wrap width of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The dependency object. Must be a <see cref="T:System.Windows.Controls.ToolBar"/>.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.OverflowBehavior.ToolBarOverflowPanelWrapWidthProperty">
            <summary>
            Attached property defining the toolbar overflow panel wrap with of a
            <see cref="T:System.Windows.DependencyObject"/>, which must be a <see cref="T:System.Windows.Controls.ToolBar"/>.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.ScrollBarBehavior">
            <summary>
            Exposes attached behavior that can be used to extend the functionality of any control that
            has a <see cref="T:System.Windows.Controls.ScrollViewer"/> in its control template.
            </summary>
            <remarks>
            <para>
            This attached behavior allows extends the functionality of any control that has a
            <see cref="T:System.Windows.Controls.ScrollViewer"/> in its control template. By using the <b>ScrollBarVisiblity</b>
            attached property, the visibility of the scrollbars can be configured. This would
            otherwise be impossible because the <b>ScrollViewer</b> is hidden inside the control
            template, and is as such not accessible to application builders who use such as control.
            </para>
            <para>
            This attached behavior also extends the <see cref="T:System.Windows.Controls.ScrollViewer"/> with properties to set
            the width of the track of the vertical scroll bar, and the height of the track of the
            horizontal scroll bar. These properties are useful in cases where it is necessary to have
            a scroll bar that is either wider or higher than the default style allows.
            </para>
            <example>
            The following example shows how to set the visibility of the (vertical) scrollbar in a
            context menu. Note that it is essential to set the maximum height of the context menu,
            otherwise the context menu will just grow as high as it needs to be to accommodate all
            its items.
            Only if you restrain the height will the context menu show the scrollbar when there are
            more items than can be accommodated. In this particular example, the vertical scrollbar
            will be shown if there are more items than can be hosted in a context menu that is 200px
            high.
            <code lang="xaml">
            <![CDATA[
            <ContextMenu x:Name="scrollableContextMenu"
                pt:ScrollBarBehavior.ScrollBarVisibility="Auto"
                MaxHeight="200"/>
            ]]>
            </code>
            </example>
            <example>
            The following example shows how to define a <see cref="T:System.Windows.Controls.ScrollViewer"/> that has a
            vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar"/> with a vertical track width of 24px, and a horizontal
            track height of 24px. Note that setting the track width and height only affects the track,
            it does not affect the width of the <see cref="T:System.Windows.Controls.Primitives.Thumb"/>.
            <code lang="xaml">
            <![CDATA[
            <ScrollViewer x:Name="scrollviewer"
                pt:ScrollBarBehavior.HorizontalScrollBarTrackHeight="24"
                pt:ScrollBarBehavior.VerticalScrollBarTrackWidth="24"/>
            ]]>
            </code>
            </example>
            </remarks>
            <seealso cref="T:System.Windows.Controls.ScrollViewer">ScrollViewer Class</seealso>
            <seealso cref="T:System.Windows.Controls.Primitives.ScrollBar">ScrollBar Class</seealso>
            <seealso cref="T:System.Windows.Controls.Primitives.Thumb">Thumb Class</seealso>
            <seealso cref="T:System.Windows.Controls.ScrollBarVisibility">ScrollBarVisibility Enumeration</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.ScrollBarBehavior.GetScrollBarVisibility(System.Windows.DependencyObject)">
            <summary>
            Gets the <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> of the scroll bars associated
            with the <see cref="T:System.Windows.Controls.ScrollViewer"/> in the control template of the specified
            <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The dependency object, which should be a control that hosts a <see cref="T:System.Windows.Controls.ScrollViewer"/>
            in its control template.
            </param>
            <returns>
            The <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> of the scroll bars associated with the
            <see cref="T:System.Windows.Controls.ScrollViewer"/> in the control template of the specified
            <see cref="T:System.Windows.DependencyObject"/>.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ScrollBarBehavior.SetScrollBarVisibility(System.Windows.DependencyObject,System.Windows.Controls.ScrollBarVisibility)">
            <summary>
            Sets the <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> of the scroll bars associated
            with the <see cref="T:System.Windows.Controls.ScrollViewer"/> in the control template of the specified
            <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The dependency object, which should be a control that hosts a <see cref="T:System.Windows.Controls.ScrollViewer"/>
            in its control template.
            </param>
            <param name="value">
            The <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> value to be applied for this dependency property.
            </param>
        </member>
        <member name="F:Philips.Platform.Presentation.ScrollBarBehavior.ScrollBarVisibilityProperty">
            <summary>
            Identifies the <c>ScrollBarVisibleOptions</c> dependency property.
            </summary>
            <remarks>
            By default, the value of this dependency property is <see ScrollBarVisibility="Hidden"/>
            which means the scroll viewer will be hidden, even if the context menu contains more
            items than it can accommodate.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.ScrollBarBehavior.GetHorizontalScrollBarTrackHeight(System.Windows.DependencyObject)">
            <summary>
            Gets the heigth of the track of a horizontal scroll bar.
            </summary>
            <param name="dependencyObject">
            The dependency object, which should be a <see cref="T:System.Windows.Controls.ScrollViewer"/>.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.ScrollBarBehavior.SetHorizontalScrollBarTrackHeight(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the height of the track of a horizontal scroll bar.
            </summary>
            <remarks>
            Setting the height only affects the track, it does not affect the scroll bar thumb.
            </remarks>
            <param name="dependencyObject">
            The dependency object for which to set the horizontal scroll bar track width.
            This should be a <see cref="T:System.Windows.Controls.ScrollViewer"/>.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.ScrollBarBehavior.HorizontalScrollBarTrackHeightProperty">
            <summary>
            Identifies the <c>VerticalScrollBarTrackWidth</c> dependency property.
            </summary>
            <remarks>
            By default, the value of this dependency property is 16. This means that, by default,
            the height of the track of a horizontal scroll bar is 16px.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.ScrollBarBehavior.GetVerticalScrollBarTrackWidth(System.Windows.DependencyObject)">
            <summary>
            Gets the width of the track of a vertical scroll bar.
            </summary>
            <param name="dependencyObject">
            The dependency object, which should be a <see cref="T:System.Windows.Controls.ScrollViewer"/>.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.ScrollBarBehavior.SetVerticalScrollBarTrackWidth(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the width of the track of a vertical scroll bar.
            </summary>
            <remarks>
            Setting the width only affects the track, it does not affect the scroll bar thumb.
            </remarks>
            <param name="dependencyObject">
            The dependency object for which to set the vertical scroll bar track width.
            This should be a <see cref="T:System.Windows.Controls.ScrollViewer"/>.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.ScrollBarBehavior.VerticalScrollBarTrackWidthProperty">
            <summary>
            Identifies the <c>VerticalScrollBarTrackWidth</c> dependency property.
            </summary>
            <remarks>
            By default, the value of this dependency property is 16. This means that, by default,
            the width of the track of a vertical scroll bar is 16px.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.SelectAllOnFocusBehavior">
            <summary>
            Exposes attached behavior to govern whether an input field such as a <see cref="T:System.Windows.Controls.TextBox"/>
            should select all its content (text) when it receives the focus.
            </summary>
            <remarks>
            <para>
            The out-of-the-box WPF <see cref="T:System.Windows.Controls.TextBox"/> control does not select all its content (text)
            when it receives the focus. The control does not expose a property to set this behavior
            either. However, there are many situations in which the user presses tab to quickly navigate
            through a collection if input fields in a form. In such cases, it is often desirable that
            the input fields select all of their content when they receive the focus, so that the user
            can quickly and easily replace it with the content that he or she wants. This attached
            behavior class implements exactly that.
            </para>
            <para>
            This attached behavior is primarily designed for the WPF <see cref="T:System.Windows.Controls.TextBox"/> control,
            but in principle it could be extended to apply to other input controls as well.
            </para>
            <example>
            The following example shows how a <see cref="T:System.Windows.Controls.TextBox"/> control can be decorated with
            this attached behavior.
            <code lang="xaml">
            <![CDATA[
            <TextBox x:Name="selectAllTextOnFocusTextBox"
                pt:SelectAllOnFocusBehavior.SelectAllOnFocus="True"/>
            ]]>
            </code>
            </example>
            </remarks>
            <see cref="T:System.Windows.FrameworkElement">FrameworkElement Class</see>
            <see cref="T:System.Windows.Controls.TextBox">TextBox Class</see>
            <seealso href="http://dutton.me.uk/2013/07/25/how-to-select-all-wpf-textbox-text-on-focus-using-an-attached-behavior/">How To Select All WPF TextBox Text On Focus Using An Attached Behavior</seealso>
            <seealso href="http://blogs.msdn.com/b/argumentnullexceptionblogpost/archive/2013/04/12/a-simple-selectall-behavior-for-textboxes.aspx">A Simple SelectAll Behavior for TextBoxes</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SelectAllOnFocusBehavior.GetSelectAllOnFocus(System.Windows.DependencyObject)">
            <summary>
            Gets whether the specified dependency object will select all its content when it
            receives the focus.
            </summary>
            <param name="dependencyObject">
            The dependency object; typically, a <see cref="T:System.Windows.Controls.TextBox"/>.
            </param>
            <returns>
            <see langword="true"/>, if the specified dependency object will select all its content
            when it receives the focus; <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SelectAllOnFocusBehavior.SetSelectAllOnFocus(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether the specified dependency object will select all its content when it
            receives the focus.
            </summary>
            <param name="dependencyObject">
            The dependency object; typically, a <see cref="T:System.Windows.Controls.TextBox"/>.
            </param>
            <param name="value">
            The Boolean value to be applied for this dependency property.
            </param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SelectAllOnFocusBehavior.SelectAllOnFocusProperty">
            <summary>
            Identifies the <c>SelectAllOnFocus</c> dependency property.
            </summary>
            <remarks>
            By default, the value of this dependency property is <see langword="false"/>,
            because this corresponds with the default behavior of the WPF <see cref="T:System.Windows.Controls.TextBox"/>
            control.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SelectAllOnFocusBehavior.OnSelectAllOnFocusChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="F:Philips.Platform.Presentation.Controls.SelectAllOnFocusBehavior.SelectAllOnFocusProperty"/>.
            </summary>
            <param name="d">The dependency object that triggers the change.</param>
            <param name="e">The event arguments documenting the change.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SelectAllOnFocusBehavior.OnTextBoxGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the event that the text box receives the focus.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SelectAllOnFocusBehavior.OnTextBoxPreviewMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.PreviewMouseDown"/> event on the text box.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.Split">
            <summary>
            Behavior that extends a <see cref="T:System.Windows.Controls.Primitives.ButtonBase">button</see> with a dropdown list.
            </summary>
            <remarks>
            <para>
            This class is OBSOLETE. Please use the <see cref="T:Philips.Platform.Presentation.Controls.SplitButton"/>,
            <see cref="T:Philips.Platform.Presentation.Controls.SplitRadioButton"/>, or <see cref="T:Philips.Platform.Presentation.Controls.SplitToggleButton"/> instead.
            </para>
            <para>
            This behavior can only be applied to a <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/> control. If it is
            applied to a non <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/> control, it will be ignored.
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Controls.Primitives.ButtonBase">ButtonBase Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitButton">SplitButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitRadioButton">SplitRadioButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitToggleButton">SplitToggleButton Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Split.popupDelay">
            <summary>
            The delay with which the popup will open.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Split.popupTimers">
            <summary>
            Holds a popup timer for each button since this timer is specific to a 
            particular button.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.GetComboBox(System.Windows.DependencyObject)">
            <summary>
            Gets the ComboBox property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the ComboBoxProperty from.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.SetComboBox(System.Windows.DependencyObject,System.Windows.Controls.ComboBox)">
            <summary>
            Sets the ComboBox property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the ComboBoxProperty on.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Split.ComboBoxProperty">
            <summary>
            Attached property for the ComboBox property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.GetIsDropDownOpen(System.Windows.DependencyObject)">
            <summary>
            Gets the IsDropDownOpen property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the IsDropDownOpenProperty from.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.SetIsDropDownOpen(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the IsDropDownOpen property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the IsDropDownOpenProperty on.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Split.IsDropDownOpenProperty">
            <summary>
            Attached property for the <b>IsDropDownOpen</b> property.
            </summary>
            <remarks>
            This property binds two way by default.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.GetIsActionEnabled(System.Windows.DependencyObject)">
            <summary>
            Gets the IsActionEnabled property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the IsActionEnabledProperty from.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.SetIsActionEnabled(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the IsActionEnabled property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the IsActionEnabledProperty on.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Split.IsActionEnabledPropertyKey">
            <summary>
            Dependency property key for the <b>IsActionEnabled</b> property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Split.IsActionEnabledProperty">
            <summary>
            Read only dependency property for the <b>IsActionEnabled</b> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.GetWrapWidth(System.Windows.DependencyObject)">
            <summary>
            Gets the width at which wrapping in the popup takes place.
            </summary>
            <remarks>
            Typically, the <see cref="P:System.Windows.Controls.ItemsControl.ItemsPanel"/> of this control will be a 
            <see cref="T:System.Windows.Controls.WrapPanel"/>. By setting the WrapWidth, one can control when wrapping
            occurs. Typically, this property will be bound in the template to the 
            <see cref="P:System.Windows.FrameworkElement.MaxWidth"/> of the content of the <see cref="T:System.Windows.Controls.Primitives.Popup"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.SetWrapWidth(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the width at which wrapping in the popup takes place.
            </summary>
            <remarks>
            Typically, the <see cref="P:System.Windows.Controls.ItemsControl.ItemsPanel"/> of this control will be a 
            <see cref="T:System.Windows.Controls.WrapPanel"/>. By setting the WrapWidth, one can control when wrapping
            occurs. Typically, this property will be bound in the template to the 
            <see cref="P:System.Windows.FrameworkElement.MaxWidth"/> of the content of the <see cref="T:System.Windows.Controls.Primitives.Popup"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Split.WrapWidthProperty">
            <summary>
            Attached property for the WrapWidth property. 
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.OnComboBoxChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the ComboBox property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.SetupBindingWithSelectedItem(System.Windows.Controls.Primitives.ButtonBase,System.Windows.Controls.ComboBox)">
            <summary>
            Sets up a binding between the content of a button and the selected item in the list.
            </summary>
            <remarks>
            By default, the content of a button has to be in sync with the selected item of the 
            ComboBox. If the application developer already set the corresponding property, 
            the binding will not be created. If the application developer sets the property
            locally, later on, it will override the binding.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.InitializeSynchronizationOfIsEnabledOfActionButton(System.Windows.Controls.ComboBox,System.Windows.Controls.Primitives.ButtonBase)">
            <summary>
            Initializes the synchronization between the IsEnabled property of the action button 
            and the IsEnabled property of the selected combo box item.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.SubsribeToIsEnabledOfComboBoxItem(System.Windows.Controls.ComboBox,System.Windows.DependencyPropertyChangedEventHandler,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Subscribes to and un-subscribes from <see cref="E:System.Windows.UIElement.IsEnabledChanged"/> events
            of the combo box items.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.UpdateIsEnabledOfActionButton(System.Windows.Controls.ComboBoxItem,System.Windows.Controls.Primitives.ButtonBase)">
            <summary>
            Updates whether the action button is enabled or not.
            </summary>
            <remarks>
            If the given item is an item container that is disabled, the action button
            should also be disabled.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.UpdateIsEnabledOfActionButton(System.Windows.Controls.ComboBox,System.Windows.Controls.Primitives.ButtonBase)">
            <summary>
            Updates whether the action button is enabled or not.
            </summary>
            <remarks>
            If the selected item points to an item container that is disabled, the action button
            should also be disabled.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.GetComboBoxItemFromItem(System.Windows.Controls.ComboBox,System.Object)">
            <summary>
            Gets the <see cref="T:System.Windows.Controls.ComboBoxItem"/> that hosts the given item.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.SetupBindingWithIsDropDownOpen(System.Windows.Controls.Primitives.ButtonBase,System.Windows.Controls.ComboBox)">
            <summary>
            Sets up a binding between the IsDropDown property of the ComboBox and the attached
            property IsDropDownOpen of the Split behavior.
            </summary>
            <remarks>
            The ComboBox takes care of several things when its IsDropDownOpen property is changed.
            Furthermore, this binding is a two way binding, because the ComboBox will set its 
            IsDropDownOpen to false when the user clicks outside the popup.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.SetupRelationBetweenSelectionAndCheckedState(System.Windows.Controls.Primitives.ButtonBase,System.Windows.Controls.ComboBox)">
            <summary>
            When the user selects an item from the list, a ToggleButton should be checked.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.SubscribeToButtonEvents(System.Windows.Controls.Primitives.ButtonBase)">
            <summary>
            Subscribes to mouse events of the button.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.SubscribeToDropDownButtonEvents(System.Windows.Controls.Primitives.ButtonBase)">
            <summary>
            Subscribes to mouse events of the drop down button.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.ApplyButtonStyle(System.Windows.Controls.Primitives.ButtonBase)">
            <summary>
            Apply the correct style to the <see cref="T:System.Windows.Controls.Primitives.ButtonBase">Button</see>.
            </summary>
            <remarks>
            Instead of exposing three different styles in this class, three static style keys are 
            exposed. They need to have a unique value. This method will search for styles with 
            these style keys. This pattern is used by Microsoft.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.OnPreviewMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown"/> event on the 
            split button.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.OnPreviewMouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"/> event on the split button.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.OnDropDownPreviewMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown"/> event on the 
            dropdown button.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Split.OnDropDownPreviewMouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp"/> event on the 
            dropdown button.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Split.ButtonToolBarStyleKey">
            <summary>
            The style key for a <see cref="T:System.Windows.Controls.Button"/> that is extended with a 
            dropdown list, when it is placed on a <see cref="T:System.Windows.Controls.ToolBar"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Split.ButtonStyleKey">
            <summary>
            The style key for a <see cref="T:System.Windows.Controls.Button"/> that is extended with a 
            dropdown list.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Split.ToggleButtonToolBarStyleKey">
            <summary>
            The style key for a <see cref="T:System.Windows.Controls.Primitives.ToggleButton"/> that is extended with a 
            dropdown list, when it is placed on a <see cref="T:System.Windows.Controls.ToolBar"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Split.ToggleButtonStyleKey">
            <summary>
            The style key for a <see cref="T:System.Windows.Controls.Primitives.ToggleButton"/> that is extended with a 
            dropdown list.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Split.RadioButtonToolBarStyleKey">
            <summary>
            The style key for a <see cref="T:System.Windows.Controls.RadioButton"/> that is extended with a 
            dropdown list, when it is placed on a <see cref="T:System.Windows.Controls.ToolBar"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Split.RadioButtonStyleKey">
            <summary>
            The style key for a <see cref="T:System.Windows.Controls.RadioButton"/> that is extended with a 
            dropdown list.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.SplitToggleButtonBehavior">
            <summary>
            Exposes attached behavior to update the target of the binding of the IsChecked property
            of a SplitToggleButton. Makes it possible to update the 'toggled' status on each click of
            the button.
            </summary>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitToggleButton">SplitToggleButton Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitToggleButtonBehavior.GetUpdateTargetOnClick(System.Windows.DependencyObject)">
            <summary>
            Gets the UpdateTargetOnClick property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the UpdateTargetOnClickProperty from.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitToggleButtonBehavior.SetUpdateTargetOnClick(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the UpdateTargetOnClick property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the UpdateTargetOnClickProperty on.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitToggleButtonBehavior.UpdateTargetOnClickProperty">
            <summary>
            Identifies the <c>UpdateTargetOnClick</c> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitToggleButtonBehavior.OnUpdateTargetOnClickChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="F:Philips.Platform.Presentation.Controls.SplitToggleButtonBehavior.UpdateTargetOnClickProperty"/>.
            </summary>
            <param name="dependencyObject">
            The dependency object of which the property was changed.
            </param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitToggleButtonBehavior.OnClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the <see cref="F:Philips.Platform.Presentation.Controls.SplitButtonBase.ClickEvent"/> event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ThresholdBehavior">
            <summary>
            Exposes attached behavior to define a threshold for <see cref="T:System.Windows.Controls.Primitives.RangeBase"/> controls.
            </summary>
            <remarks>
            <para>
            <see cref="T:System.Windows.Controls.Primitives.RangeBase"/> controls are generally used to visualize the progress of some
            quantity. Sometimes, the user shall be notified when this quantity exceeds a certain
            threshold. For example, consider a <see cref="T:System.Windows.Controls.ProgressBar"/> that is used to indicate
            the amount of free disk space. It would be helpful to draw the user's attention when
            the free disk space drops below a certain threshold (or, conversely, when the amount
            of occupied disk space exceeds a certain threshold). This attached behavior class allows
            you to set a threshold on a <see cref="T:System.Windows.Controls.Primitives.RangeBase"/> control. It is up to the styles of
            the control to adapt its visualization depending on whether this threshold is exceeded
            or not.
            </para>
            <para>
            This behavior exposes two attached properties called <b>LowerThreshold</b> and
            <b>UpperThreshold</b>. This allows users to define a lower threshold that can be used,
            for example, to indicate that the value indicated by the <see cref="T:System.Windows.Controls.Primitives.RangeBase"/> control
            requires attention - a battery may be less than 25% charged, the amount of occupied disk
            space may exceed a certain level, etc. It also allows the user to define an upper threshold
            that can be used, for example, that indicate that the value has become critical - a battery
            may require immediate charging, or the amount of free disk space may have dropped to such
            a low level that it is not possible anymore to store another study.
            </para>
            </remarks>
            <example>
            The following example shows how a <see cref="T:System.Windows.Controls.ProgressBar"/> control can be decorated with
            this attached behavior. In this case, a lower threshold of 0.50 and an upper threshold of
            0.75 is set on the progress bar with a value ranging from 0.00 to 1.00. If the lower 
            threshold of 0.50 is reached, the progress bar will adapt its visualization to notify the
            user (the visualization depends on the style that is applied, but could for example mean
            that the progress bar changes the color of its progress indicator to orange). Similarly,
            if the upper threshold of 0.75 is reached, the progress bar will once again adapt its
            visualization to notify the user (one can think of a progress bar that turns red to
            indicate a critical condition that requires immediate attention).
            <code lang="xaml">
            <![CDATA[
            <ProgressBar x:Name="thresholdProgresBar"
                Minimum="0.00"
                Maximum="1.00"
                pt:ThresholdBehavior.LowerThreshold="0.50"
                pt:ThresholdBehavior.UpperThreshold="0.75"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.Primitives.RangeBase">RangeBase Control</seealso>
            <seealso cref="T:System.Windows.Controls.ProgressBar">ProgressBar Control</seealso>
            <seealso cref="T:System.Windows.Controls.Slider">Slider Control</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ThresholdBehavior.GetLowerThreshold(System.Windows.DependencyObject)">
            <summary>
            Gets the <b>LowerThreshold</b> property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the <see cref="F:Philips.Platform.Presentation.Controls.ThresholdBehavior.LowerThresholdProperty"/> from.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ThresholdBehavior.SetLowerThreshold(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the <b>LowerThreshold</b> property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the <see cref="F:Philips.Platform.Presentation.Controls.ThresholdBehavior.LowerThresholdProperty"/> on.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ThresholdBehavior.LowerThresholdProperty">
            <summary>
            Identifies the <b>LowerThreshold</b> dependency property.
            </summary>
            <remarks>
            <para>
            This property can be used to set a threshold value on a <see cref="T:System.Windows.Controls.Primitives.RangeBase"/> control,
            such as a <see cref="T:System.Windows.Controls.ProgressBar"/> or a <see cref="T:System.Windows.Controls.Slider"/>.
            </para>
            <para>
            The default value of this property is <see cref="F:System.Double.MaxValue"/>, i.e., an infinite
            threshold.
            </para>
            <para>
            Setting this property to a value that is higher than the value of the 
            <see cref="F:Philips.Platform.Presentation.Controls.ThresholdBehavior.UpperThresholdProperty"/> is not possible. The value of this lower threshold
            will be coerced to always be lower than or equal to the value of the upper threshold.
            </para>
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ThresholdBehavior.GetUpperThreshold(System.Windows.DependencyObject)">
            <summary>
            Gets the <b>UpperThreshold</b> property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the <see cref="F:Philips.Platform.Presentation.Controls.ThresholdBehavior.UpperThresholdProperty"/> from.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ThresholdBehavior.SetUpperThreshold(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the <b>UpperThreshold</b> property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the <see cref="F:Philips.Platform.Presentation.Controls.ThresholdBehavior.UpperThresholdProperty"/> on.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ThresholdBehavior.UpperThresholdProperty">
            <summary>
            Identifies the <b>UpperThreshold</b> dependency property.
            </summary>
            <remarks>
            <para>
            This property can be used to set an upper threshold value on a <see cref="T:System.Windows.Controls.Primitives.RangeBase"/>
            control, such as a <see cref="T:System.Windows.Controls.ProgressBar"/> or a <see cref="T:System.Windows.Controls.Slider"/>.
            </para>
            <para>
            The default value of this property is <see cref="F:System.Double.MaxValue"/>, i.e., an infinite
            upper threshold.
            </para>
            <para>
            Setting this property to a value that is lower than the value of the 
            <see cref="F:Philips.Platform.Presentation.Controls.ThresholdBehavior.LowerThresholdProperty"/> is not possible. The value of this upper threshold
            will be coerced to always be higher than or equal to the value of the lower threshold.
            </para>
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ThresholdBehavior.CoerceLowerThreshold(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the <b>LowerThreshold</b> value to ensure that the lower threshold is always
            less than or equal to the upper threshold.
            </summary>
            <remarks>
            This is a so-called <see cref="T:System.Windows.CoerceValueCallback"/> delegate.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ThresholdBehavior.CoerceUpperThreshold(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the <b>UpperThreshold</b> value to ensure that the upper threshold is always
            equal to or greater than the lower threshold.
            </summary>
            <remarks>
            This is a so-called <see cref="T:System.Windows.CoerceValueCallback"/> delegate.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.WatermarkHelper">
            <summary>
            Helper class to attach watermark behavior to controls that receive user input, such as the
            <see cref="T:System.Windows.Controls.TextBox"/>, <see cref="T:System.Windows.Controls.ComboBox"/>, <see cref="T:System.Windows.Controls.PasswordBox"/> and
            <see cref="T:System.Windows.Controls.DatePicker"/> controls.
            </summary>
            <remarks>
            <para>
            This class can be used to attach watermark behavior to controls that expect to receive
            input from the end user. Typically, these are input controls like <see cref="T:System.Windows.Controls.TextBox"/>,
            <see cref="T:System.Windows.Controls.ComboBox"/>, <see cref="T:System.Windows.Controls.PasswordBox"/> and <see cref="T:System.Windows.Controls.DatePicker"/>. Typically,
            in order to increase the usability of these input controls, they display a watermark which
            provides a hint to the user concerning the type and the format of the data that the user
            is expected to type in (or provide via any other input means). The watermark is shown as
            long as the user is not providing any input yet. This means that, usually, the watermark
            disappears as soon as the input control receives the (keyboard) focus.
            </para>
            <para>
            Unfortunately, watermark behavior is not provided out-of-the-box by any of the standard
            WPF input controls. That's where this custom <b>WatermarkHelper</b> class comes in, since
            it provides exactly the watermark behavior that standard WPF is lacking, in a way that is
            consistent across input controls.
            </para>
            <para>
            This class currently supports the <see cref="T:System.Windows.Controls.TextBox"/>, <see cref="T:System.Windows.Controls.ComboBox"/>,
            <see cref="T:System.Windows.Controls.PasswordBox"/> and <see cref="T:System.Windows.Controls.DatePicker"/> controls. It is possible that,
            in the future, watermark support will be provided for additional user input controls.
            </para>
            <para>
            By default, the watermark is only shown for controls that can be edited, i.e., controls
            that are not read-only. The reason for this is that read-only controls usually display
            valid content which the user cannot edit, so there is no need for a watermark. There may,
            however, be cases where the content of a read-only control is temporarily not available.
            In order to be able to show a watermark hinting at the expected content, this class
            provides an attached property <b>ShowWatermarkForReadOnlyContent</b> which can be used to
            display the watermark for a read-only control.
            </para>
            </remarks>
            <example>
            <para>
            The following example shows how the <see cref="T:Philips.Platform.Presentation.Controls.WatermarkHelper"/> can be used.
            In this example, it is used to provide watermark content for a <see cref="T:System.Windows.Controls.TextBox"/>.
            <code lang="xaml">
            <![CDATA[
            <TextBox x:Name="watermarkTextBox"
                pt:WatermarkHelper.WatermarkContent="Watermark"
                ...
            />
            ]]>
            </code>
            </para>
            <para>
            The following example shows how the <see cref="T:Philips.Platform.Presentation.Controls.WatermarkHelper"/> can be used.
            In this example, it is used to provide watermark content for a multiline
            <see cref="T:System.Windows.Controls.TextBox"/>. By setting the watermark content to a <see cref="T:System.Windows.Controls.TextBlock"/>
            that wraps its text, the watermark is also wrapped, if necessary, in the multiline
            text box. If you do not put the watermark content in a wrapping text block, as in the
            example above, the watermark will not be wrapped in the multiline text box, but will
            stretch over a single line only. The reason for this is that WPF implicitly wraps the
            content in a text block, and applies the default style to that text block. The default
            style may or may not have its text wrapping property set to true. In fact, the default
            text block style for the Experience Identity does not have it text wrapping property
            set to true.
            <code lang="xaml">
            <![CDATA[
            <TextBox x:Name="multilineWatermarkTextBox"
                //
                // A multiline text box is a text box that has TextWrapping set to “Wrap”,
                // and AcceptsReturn to “True”.
                //
                TextWrapping="Wrap"
                AcceptsReturn="True"
                ...>
                <pt:WatermarkHelper.WatermarkContent>
                <TextBlock
                    Text="You can edit me, I am a multiline watermark in a text box"
                    TextWrapping="Wrap"/>
                    </pt:WatermarkHelper.WatermarkContent>
                </TextBox>
            ]]>
            </code>
            </para>
            </example>
            <seealso cref="T:System.Windows.Controls.TextBox">TextBox Class</seealso> 
            <seealso cref="T:System.Windows.Controls.ComboBox">ComboBox Class</seealso> 
            <seealso cref="T:System.Windows.Controls.PasswordBox">PasswordBox Class</seealso> 
            <seealso cref="T:System.Windows.Controls.DatePicker">DatePicker Class</seealso> 
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.WatermarkHelper.GetIsWatermarkVisible(System.Windows.DependencyObject)">
            <summary>
            Gets the <c>IsWatermarkVisible</c> property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the <b>IsWatermarkVisible</b> property from.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.WatermarkHelper.SetIsWatermarkVisible(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the <c>IsWatermarkVisible</c> property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the <b>IsWatermarkVisible</b> property on.
            </param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when attached to a dependency object that is not a <see cref="T:System.Windows.Controls.TextBox"/>,
            a <see cref="T:System.Windows.Controls.ComboBox"/>, a <see cref="T:System.Windows.Controls.PasswordBox"/>, or a <see cref="T:System.Windows.Controls.DatePicker"/>.
            </exception>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.WatermarkHelper.IsWatermarkVisiblePropertyKey">
            <summary>
            Dependency property key for the <b>IsWatermarkVisible</b> property.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when attached to a dependency object that is not a <see cref="T:System.Windows.Controls.TextBox"/>,
            a <see cref="T:System.Windows.Controls.ComboBox"/>, a <see cref="T:System.Windows.Controls.PasswordBox"/>, or a <see cref="T:System.Windows.Controls.DatePicker"/>.
            </exception>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.WatermarkHelper.IsWatermarkVisibleProperty">
            <summary>
            Identifies the <b>IsWatermarkVisible</b> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.WatermarkHelper.GetShowWatermarkForReadOnlyContent(System.Windows.DependencyObject)">
            <summary>
            Gets the <c>ShowWatermarkForReadOnlyContent</c> property value of
            a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the <b>ShowWatermarkForReadOnly</b>
            property from.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.WatermarkHelper.SetShowWatermarkForReadOnlyContent(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the <c>ShowWatermarkForReadOnlyContent</c> property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the <b>ShowWatermarkForReadOnly</b> property on.
            </param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when attached to a dependency object that is not a <see cref="T:System.Windows.Controls.TextBox"/>,
            a <see cref="T:System.Windows.Controls.ComboBox"/>, a <see cref="T:System.Windows.Controls.PasswordBox"/>, or a <see cref="T:System.Windows.Controls.DatePicker"/>.
            </exception>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.WatermarkHelper.ShowWatermarkForReadOnlyContentProperty">
            <summary>
            Identifies the <c>ShowWatermarkForReadOnlyContent</c> dependency property.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when attached to a dependency object that is not a <see cref="T:System.Windows.Controls.TextBox"/>,
            a <see cref="T:System.Windows.Controls.ComboBox"/>, a <see cref="T:System.Windows.Controls.PasswordBox"/>, or a <see cref="T:System.Windows.Controls.DatePicker"/>.
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.WatermarkHelper.GetWatermarkContent(System.Windows.DependencyObject)">
            <summary>
            Gets the <c>WatermarkContent</c> property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the <b>WatermarkContent</b> property from.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.WatermarkHelper.SetWatermarkContent(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the <c>WatermarkContent</c> property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the <b>WatermarkContent</b> property on.
            </param>
            <param name="content">The watermark content to set.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when attached to a dependency object that is not a <see cref="T:System.Windows.Controls.TextBox"/>,
            a <see cref="T:System.Windows.Controls.ComboBox"/>, a <see cref="T:System.Windows.Controls.PasswordBox"/>, or a <see cref="T:System.Windows.Controls.DatePicker"/>.
            </exception>
            <example>
            The following example shows how a <c>WatermarkContent</c> can be used with text 
            wrapping property in the multi-line text box.
            <code lang="xaml">
            <![CDATA[
               <TextBox x:Name="multilineWatermarkTextBox"
                    TextWrapping="Wrap"
                    AcceptsReturn="True">
                   <pt:WatermarkHelper.WatermarkContent>
                       <TextBlock 
                            Text="Watermark content which should be wrapped." 
                            TextWrapping="Wrap"/>
                   </pt:WatermarkHelper.WatermarkContent>
               </TextBox>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.WatermarkHelper.WatermarkContentProperty">
            <summary>
            Identifies the <c>WatermarkContent</c> dependency property.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when attached to a dependency object that is not a <see cref="T:System.Windows.Controls.TextBox"/>,
            a <see cref="T:System.Windows.Controls.ComboBox"/>, a <see cref="T:System.Windows.Controls.PasswordBox"/>, or a <see cref="T:System.Windows.Controls.DatePicker"/>.
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.WatermarkHelper.EnsureCorrectControl(System.Windows.DependencyObject)">
            <summary>
            Ensures that the dependency object for which a watermark attached property
            is set is of the correct type. An exception if thrown if this is not the
            case, because this should be considered a programming error.
            </summary>
            <remarks>
            Watermark attached properties are only valid for dependency objects that represent
            content controls - we currently cover <see cref="T:System.Windows.Controls.TextBox"/>, <see cref="T:System.Windows.Controls.ComboBox"/>,
            <see cref="T:System.Windows.Controls.PasswordBox"/>, and <see cref="T:System.Windows.Controls.DatePicker"/>. The <see cref="T:System.Windows.Controls.RichTextBox"/>
            is not covered yet.
            </remarks>
            <param name="dependencyObject">The dependency object.</param>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.AboutBox">
            <summary>
            Custom <see cref="T:System.Windows.Window"/> that serves as the about box for an application.
            </summary>
            <example>
            The following example shows how to initialize and show an <c>AboutBox</c>. Most of
            the content of the <c>AboutBox</c> is defined in text resources that are part of the
            Presentation Toolkit. You can also define your own text resources, but please be aware
            that the text resources that come with the Presentation Toolkit conform to the legal
            requirements for how Philips Healthcare products should be labeled.
            <code lang="csharp">
            <![CDATA[
            var aboutBox =
                new AboutBox {
                    //
                    // Set the AboutBox properties. These define the legal content that is
                    // shown in the AboutBox.
                    //
                    ProductRange = "IPF",
                    ProductName = "Presentation Toolkit",
                    ProductRelease = "MM.mm",
                    ProductReleaseDate = DateTime.Now,
                    CodeNumber = "1111 222 3333",
                    MedicalDeviceClassification = MedicalDeviceClassification.ClassOne,
                    MedicalDeviceClassificationText = LegalTextResources.MedicalDeviceClassOneText,
                    Manufacturer = LegalTextResources.Manufacturer,
                    ManufacturingAddress = LegalTextResources.ManufacturingAddress,
                    Copyright = String.Format(TextResources.Copyright, 2016),
                    CopyrightClause = LegalTextResources.CopyrightClause,
                    SoftwareLicensingStatement = LegalTextResources.SoftwareLicensingStatement,
                    ReengineeringStatement = LegalTextResources.ReengineeringStatement,
                    EndUserLicenseAgreementLink = LegalTextResources.EndUserLicenseAgreementLink,
                    WarrantyDisclaimer =
                        String.Format(
                            LegalTextResources.WarrantyDisclaimer,
                           "Presentation Toolkit MM.mm"
                        ),
                   NonDiagnosticStatement = LegalTextResources.NonDiagnosticStatement
               };
               //
               // Set the font size of the about box to match the font size of the owner, i.e.,
               // the main window. Note that the about box uses different (both larger and smaller)
               // font sizes for some of its content. This is currently taken care of in the
               // AboutBox control.
               //
               aboutBox.Owner = GetWindow(this);
               aboutBox.FontSize = FontSize;
               aboutBox.ShowDialog();
            ]]>
            </code>
            </example>
            <seealso cref="T:Philips.Platform.Presentation.Controls.BrandingScreenBase">BrandingScreenBase Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.StartupScreen">StartupScreen Class</seealso>
            <seealso cref="T:System.Windows.Window">Window Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.BrandingScreenBase">
            <summary>
            Abstract base class for branding related user interface classes.
            </summary>
            <remarks>
            <para>
            This class acts as the abstract base class for a number of branding related screens,
            such as the <see cref="T:Philips.Platform.Presentation.Controls.AboutBox"/>, the <see cref="T:Philips.Platform.Presentation.Controls.StartupScreen"/>, and the 
            <see cref="T:Philips.Platform.Presentation.Controls.LogOnDialog"/>. This abstract base class captures most of the product
            related properties, such as <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.ProductName"/>, <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.ProductReleaseDate"/>,
            or <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.Manufacturer"/>, which are shared by these branding related user interface
            classes. It may be that a particular branding screen does not need all of these properties,
            because the visual design does not require it, but for the sake of uniformity, clarity,
            and being future-proof we recommend that all branding related screens derive from this
            class.
            </para>
            <para>
            In addition to the product related properties, this abstract base class also offers the
            application builder the option to customize whether a derived branding screen has a close
            button or not. In some cases, having a close button on a branding screen can be both useful
            and desirable. Think, for example, of the about box. In other cases, such as a full screen
            startup screen or a full screen logon dialog, there should not be a close button.
            The <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.HasCloseButton"/> and <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.CloseToolTip"/> dependency properties can
            be used to customize this behavior.
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Window">Window Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.AboutBox">AboutBox Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.StartupScreen">StartupScreen Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.LogOnDialog">LogOnDialog Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.ProductRangeProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.ProductRange"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.ProductNameProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.ProductName"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.ProductReleaseProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.ProductRelease"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.CodeNumberProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.CodeNumber"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.MedicalDeviceClassificationProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.MedicalDeviceClassification"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.MedicalDeviceClassificationTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.MedicalDeviceClassificationText"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.ProductReleaseDateProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.ProductReleaseDate"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.ManufacturerProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.Manufacturer"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.ManufacturingAddressProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.ManufacturingAddress"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.CopyrightProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.Copyright"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.CopyrightClauseProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.CopyrightClause"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.SoftwareLicensingStatementProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.SoftwareLicensingStatement"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.ReengineeringStatementProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.ReengineeringStatement"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.EndUserLicenseAgreementLinkProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.EndUserLicenseAgreementLink"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.WarrantyDisclaimerProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.WarrantyDisclaimer"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.NonDiagnosticStatementProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.NonDiagnosticStatement"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.HasCloseButtonProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.HasCloseButton"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.CloseToolTipProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.CloseToolTip"/> dependency property.
            </summary>
            <remarks>
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.HasMaximizeButtonProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.HasMaximizeButton"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.HasMinimizeButtonProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.HasMinimizeButton"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.ProductRange">
            <summary>
            Gets or sets the product range.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.ProductRangeProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.ProductName">
            <summary>
            Gets or sets the product name.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.ProductNameProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.ProductRelease">
            <summary>
            Gets or sets the product release.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.ProductReleaseProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.CodeNumber">
            <summary>
            Gets or sets the 12 NC Code Number.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.CodeNumberProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.MedicalDeviceClassification">
            <summary>
            Gets or sets the medical device classification.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.MedicalDeviceClassificationProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.MedicalDeviceClassificationText">
            <summary>
            Gets or sets the medical device classification text.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.MedicalDeviceClassificationTextProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.ProductReleaseDate">
            <summary>
            Gets or sets the product release date.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.ProductReleaseProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.Manufacturer">
            <summary>
            Gets or sets the legal manufacturer of the device.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.ManufacturerProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.ManufacturingAddress">
            <summary>
            Gets or sets the legal address of the manufacturer of the device.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.ManufacturingAddressProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.Copyright">
            <summary>
            Gets or sets the copyright.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.CopyrightProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.CopyrightClause">
            <summary>
            Gets or sets the copyright clause.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.CopyrightClauseProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.SoftwareLicensingStatement">
            <summary>
            Gets or sets the software licensing statement.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.SoftwareLicensingStatementProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.ReengineeringStatement">
            <summary>
            Gets or sets the reengineering statement.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.ReengineeringStatementProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.EndUserLicenseAgreementLink">
            <summary>
            Gets or sets the text of the end-user license agreement link.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.EndUserLicenseAgreementLinkProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.WarrantyDisclaimer">
            <summary>
            Gets or sets the text of the warranty disclaimer.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.WarrantyDisclaimerProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.NonDiagnosticStatement">
            <summary>
            Gets or sets the text of the non-diagnostic statement.
            </summary>
            <remarks>
            This statement is defined for products where it is explicitly stated in the
            intended use that diagnosis is not supported.
            </remarks>
            <seealso cref="F:Philips.Platform.Presentation.Controls.BrandingScreenBase.NonDiagnosticStatementProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.HasCloseButton">
            <summary>
            Gets or sets whether the branding screen dialog has a <b>Close</b> button.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.CloseToolTip">
            <summary>
            Gets or sets the tooltip that is associated with the branding dialog's <b>Close</b>
            button.
            </summary>
            <remarks>
            Giving this property a decent value is the responsibility of the style. Typically,
            this property is set to <see cref="P:Philips.Platform.Presentation.TextResources.Close"/>. Application builders
            can use this property to configure a tooltip of their choice.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.HasMaximizeButton">
            <summary>
            Gets or sets whether the branding screen dialog has a <b>maximize</b> button.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingScreenBase.HasMinimizeButton">
            <summary>
            Gets or sets whether the branding screen dialog has a <b>minimize</b> button.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AboutBox.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AboutBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.AdvancedToolBar">
            <summary>
            Custom control that offers advanced toolbar functionality.
            </summary>
            <seealso cref="T:System.Windows.Controls.ToolBar">ToolBar Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AdvancedToolBar.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AdvancedToolBar.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolBar.ShowsHeaderProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBar.ShowsHeader"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolBar.ShowsAllToolsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBar.ShowsAllTools"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolBar.ShowsHeader">
            <summary>
            Gets or sets whether the header of the advanced toolbar is shown.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Philips.Platform.Presentation.Controls.AdvancedToolBar"/> class derives from <see cref="T:System.Windows.Controls.ToolBar"/>, which in
            turn derives from <see cref="T:System.Windows.Controls.HeaderedItemsControl"/>. This means that a header can be
            defined for the <c>AdvancedToolBar</c> using one of the inherited
            <see cref="P:System.Windows.Controls.HeaderedItemsControl.Header">Header</see>,
            <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderStringFormat">HeaderStringFormat</see>,
            <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate">HeaderTemplate</see> or
            <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderTemplateSelector">HeaderTemplateSelector</see>
            properties.
            However, if a header is defined, it should still be configurable whether this header
            is shown or not. For that purpose, the <c>ShowsHeader</c> property is introduced.
            It tells the style whether or not to show the header if a header is defined.
            </para>
            <para>
            This property should not be confused with the inherited
            <see cref="P:System.Windows.Controls.HeaderedItemsControl.HasHeader">HasHeader</see> property, which merely tells
            us whether or not a header is defined (by any of the four properties described above),
            but does not tell us whether that header should actually be shown.
            </para>
            <para>
            The default value of this property is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolBar.ShowsAllTools">
            <summary>
            Gets or sets whether all tools are shown, or only the ones that are not in the
            toolbar overflow.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer">
            <summary>
            Custom controls that hosts a <see cref="T:System.Windows.Controls.ToolBarTray"/> which in turn hosts a number of
            <see cref="T:System.Windows.Controls.ToolBar"/>s, and extends the standard <c>ToolBarTray</c> behavior with features
            like expanding/collapsing, pinning/unpinning, and a location hint.
            </summary>
            <remarks>
            <para>
            The <c>AdvancedToolBarContainer</c> replaces the standard WPF <see cref="T:System.Windows.Controls.ToolBarTray"/> as
            the host for <see cref="T:Philips.Platform.Presentation.Controls.AdvancedToolBar"/> controls. It extends the functionality of the
            standard <c>ToolBarTray</c> with a feature to expand and collapse the <see cref="T:System.Windows.Controls.ToolBar"/>
            controls that it hosts. It also provides pinning behavior. An unpinned advanced toolbar
            container can be hidden, only leaving a subtle visual hint pointing out to the user that
            the toolbar container can be made visible. This way, the user can hide the advanced toolbar
            to optimize the amount of screen real estate dedicated to other elements of the user
            interface, such as the display of images or other clinical data.
            </para>
            <para>
            The <c>AdvancedToolBarContainer</c> expects various named template parts to be defined in
            its control template. These template parts are:
            <list type="bullet">
              <item>
                <term>PART_ToolBarTray</term>
                <description>The <see cref="T:System.Windows.Controls.ToolBarTray"/> that the advanced toolbar container uses to
                host its toolbar in.</description>
              </item>
              <item>
                <term>PART_ExpanderButton</term>
                <description>A <see cref="T:System.Windows.Controls.Primitives.ToggleButton"/> that can be used to expand and collapse the
                toolbars that are hosted by the toolbar container.</description>
              </item>
            </list>
            </para>
            The <b>LocationHint</b> is a <see cref="T:System.Windows.UIElement"/> that can be designated to
            indicate the location of the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see>
            when it is not visible. 
            </remarks>
            <example>
            The following example shows how to create an <see cref="T:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer"/> that
            hosts a number of <see cref="T:Philips.Platform.Presentation.Controls.AdvancedToolBar"/> controls.
            <code lang="xaml">
            <![CDATA[
                <pt:AdvancedToolBarContainer x:Name="advancedToolBarContainer">
                    <pt:AdvancedToolBar x:Name="viewToolBar"
                        Header="View">
                        ...
                    </pt:AdvancedToolBar>
                    <pt:AdvancedToolBar x:Name="interactorsToolBar"
                        Header="Interactors">
                        ...
                    </pt:AdvancedToolBar>
                    <pt:AdvancedToolBar x:Name="measurementsToolBar"
                        Header="Measurements">
                        ...
                    </pt:AdvancedToolBar>
                </pt:AdvancedToolBarContainer>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.Control">Control Class</seealso>
            <seealso cref="T:System.Windows.IWeakEventListener">IWeakEventListener Interface</seealso>
            <seealso cref="T:System.Windows.Controls.ToolBarTray">ToolBarTray Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.AdvancedToolBar">AdvancedToolBar Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.ToolBarStyleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.ToolBarStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.IsExpandedProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.IsExpanded"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.PinningModeProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.PinningMode"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.IsPinnedProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.IsPinned"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.LocationHintSideProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.LocationHintSide"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.MouseOffOpacityProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.MouseOffOpacity"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.MouseOffDistanceProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.MouseOffDistance"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.IsToolBarVisiblePropertyKey">
            <summary>
            Dependency property key for the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.IsToolBarVisible"/> property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.IsToolBarVisibleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.IsToolBarVisible"/> read only dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.ShowsHeadersProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.ShowsHeaders"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
            <remarks>
            Hosts the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see>
            in a <see cref="T:System.Windows.Controls.ToolBarTray"/>, if present.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <summary>
            Handles mouse movements in the parent window.
            </summary>
            <remarks>
            The <see cref="T:Philips.Platform.Presentation.Controls.PreviewMouseMoveWeakEventManager"/> is used to subscribe to the 
            <see cref="E:System.Windows.UIElement.PreviewMouseMove"/> event, using a weak reference.
            </remarks>
            <param name="managerType">
            The type of the <see cref="T:System.Windows.WeakEventManager"/> that is used to subscribe to the 
            <see cref="E:System.Windows.UIElement.PreviewMouseMove"/> event.
            </param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
            <returns>true if the event is recognized and handled, false otherwise.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.OnLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <c>ToolBarContainer</c> is loaded.
            </summary>
            <remarks>
            Subscribes to the <see cref="E:System.Windows.UIElement.PreviewMouseMove"/> event of the parent 
            window in order to compute the distance between the mouse and the 
            <c>ToolBarContainer</c>. With this, an appropriate opacity for the 
            <c>ToolBarContainer</c> can be determined. The event is subscribed to using a 
            PreviewMouseMoveWeakEventManager. This prevents a memory leak from occurring.
            </remarks>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.OnUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <c>ToolBarContainer</c> is unloaded.
            </summary>
            <remarks>
            Unsubscribes from the <see cref="E:System.Windows.UIElement.PreviewMouseMove"/> event of the parent 
            window to avoid unnecessary monitoring of the mouse.
            </remarks>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.OnPinningModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.PinningMode"/> property.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.OnToolBarStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.ToolBarStyle"/> property.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.CoerceMouseOffOpacity(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.MouseOffOpacity"/> to ensure that it is between 0 and 1.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.CoerceMouseOffDistance(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.MouseOffDistance"/> to ensure that it is greater than 0.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.OnParentWindowPreviewMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.PreviewMouseMove"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.IsMouseOverInteractiveArea(System.Windows.Point)">
            <summary>
            Determines whether the mouse is over the interactive area of the 
            <see cref="T:Philips.Platform.Presentation.Controls.ToolBarContainer"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.ApplyToolBarStyle">
            <summary>
            Applies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.ToolBarStyle"/> to the 
            <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see>.
            </summary>
            <remarks>
            If the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.ToolBarStyle"/> is <see langword="null"/>, then the ToolBar's
            <see cref="F:System.Windows.FrameworkElement.StyleProperty"/> is cleared, and a fallback to an implicit
            style (possibly the default style) is enabled.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.ApplyPinningMode(Philips.Platform.Presentation.Controls.PinningMode)">
            <summary>
            Applies the specified pinning mode.
            </summary>
            <param name="pinningMode">The pinning mode to apply.</param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.ToolBarStyle">
            <summary>
            Gets or sets the style for the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.ToolBars">
            <summary>
            Gets or sets the collection of toolbars to host.
            </summary>
            <remarks>
            This property is the equivalent of the <see cref="P:System.Windows.Controls.ToolBarTray.ToolBars"/> property.
            It acts as the XAML <see cref="T:System.Windows.Markup.ContentPropertyAttribute">ContentProperty</see> for
            this class.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.IsExpanded">
            <summary>
            Gets or sets whether the advanced toolbar is expanded.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.PinningMode">
            <summary>
            Gets or sets the pinning mode.
            </summary>
            <remarks>
            The default value of this property is
            <see cref="F:Philips.Platform.Presentation.Controls.PinningMode.PinManual"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.IsPinned">
            <summary>
            Gets or sets whether the <b>ToolBarContainer</b> pins down the 
            <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see>.
            </summary>
            <remarks>
            This property is to be used by the template of the 
            <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see> to 
            visualize the <b>IsPinned</b> state.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.LocationHintSide">
            <summary>
            Gets or sets the side on which the <b>LocationHint</b> is located, 
            relative to the <b>ToolBar</b>.
            </summary>
            <remarks>
            The <b>LocationHint</b> is a <see cref="T:System.Windows.UIElement"/> that can be designated to
            indicate the location of the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see> 
            when it is not visible. 
            In general, the position of the <b>LocationHint</b> will be directly related to the 
            <b>DockPanel.Dock"</b> property, if this <see cref="T:Philips.Platform.Presentation.Controls.ToolBarContainer"/> is hosted 
            in a <see cref="T:System.Windows.Controls.DockPanel"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.MouseOffOpacity">
            <summary>
            Gets or sets the opacity of the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see>
            when the mouse is not over it.
            </summary>
            <remarks>
            This property is to be used by the template of the 
            <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.MouseOffDistance">
            <summary>
            Gets or sets the distance to the nearest edge of the <c>ToolBarContainer</c> from the
            point at which the mouse is considered to be 'off' the ToolBarContainer.
            </summary>
            <remarks>
            <para>
            When the <c>ToolBarContainer</c> is pinned, and when the mouse is off the 
            <c>ToolBarContainer</c>, the opacity of the internal toolbar tray will be equal to 
            the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.MouseOffOpacity"/>. When the mouse is directly over the toolbar, the 
            opacity will be 1 and in between, the opacity increases gradually when the mouse 
            approaches the toolbar.
            </para>
            <para>
            When the <c>ToolBarContainer</c> is <c>not</c> pinned, the same holds, except that
            the mouse off opacity is considered to be 0. So the fading in and fading out is
            between opacity 0 and 1 instead of between MouseOffOpacity and 1.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.IsToolBarVisible">
            <summary>
            Gets whether the tool bar is visible.
            </summary>
            <remarks>
            This property should be used in the template to control the visibility of both
            the tool bar itself and the location hint.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolBarContainer.ShowsHeaders">
            <summary>
            Gets or sets whether the headers for all the advanced toolbars are shown.
            </summary>
            <remarks>
            <para>
            Each <see cref="T:Philips.Platform.Presentation.Controls.AdvancedToolBar"/> that is hosted by an advanced toolbar container
            has a property <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolBar.ShowsHeader"/> that can be used to show
            or hide the header for that particular toolbar. To show or hide the headers for
            all the advanced toolbars at once, you can use this property on the container.
            </para>
            <para>
            The default value of this property is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.AdvancedToolTip">
            <summary>
            Custom control that offers advanced tooltip functionality.
            </summary>
            <remarks>
            <para>
            This control is the same as the <see cref="T:Philips.Platform.Presentation.Controls.InfoTip"/> control. You are advised to use the
            <b>InfoTip</b> control instead of the <b>AdvancedToolTip</b> control.
            </para>
            <para>
            This custom advanced tooltip control provides features that make it easier for application
            builders to construct tooltips for one of the most common scenarios. This scenario entails
            a tooltip that displays a header, which can be an icon or a text or both, and a list of
            pairs each consisting of a label and a value. One example in which this scenario plays out
            is in the tooltip for a <see cref="T:Philips.Platform.Presentation.Controls.Pictorial"/>, which often has a list of detailed
            information about the data that is represented by the pictorial. The information is split
            up into a column of labels, and a column of values corresponding to the labels. A typical
            example is a label that would read "Number of images", with the corresponding value listing
            the actual number of images found in the data represented by the pictorial.
            </para>
            <para>
            This class provides several customization options which afford the application builder some
            freedom to influence how the advanced tooltip looks. Apart from properties such as 
            <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.HeaderText"/>, <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.HeaderIcon"/>, and <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelValuePairs"/>, which
            define the content of the advanced tooltip, there are other properties such as 
            <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelColumnWidth"/>, <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.ValueColumnWidth"/>,
            <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelHorizontalAlignment"/>, and <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.ValueHorizontalAlignment"/> that can
            be used to change how the label and value columns look. It is also possible to distribute
            the (label, value) pairs over multiple columns, using the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.Columns"/> property.
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Controls.ToolTip">ToolTip Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.InfoTip">InfoTip Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.LabelValuePair">LabelValuePair Class</seealso>
            <seealso cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelValuePairsControl">LabelValuePairsControl Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AdvancedToolTip.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolTip.HeaderTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.HeaderText"/> dependency property.
            </summary>
            <remarks>
            The default value is an empty string.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolTip.HeaderIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.HeaderIcon"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolTip.TopCustomContentProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.TopCustomContent"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelValuePairsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelValuePairs"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelValuePairsControlProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelValuePairsControl"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelColumnWidthProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelColumnWidth"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is 0.0. Giving this property a decent value is
            the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolTip.ValueColumnWidthProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.ValueColumnWidth"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is 0.0. Giving this property a decent value is
            the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelHorizontalAlignmentProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelHorizontalAlignment"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see cref="F:System.Windows.HorizontalAlignment.Left"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolTip.ValueHorizontalAlignmentProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.ValueHorizontalAlignment"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see cref="F:System.Windows.HorizontalAlignment.Left"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelValuePairMarginProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.ValueHorizontalAlignment"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is a <see cref="T:System.Windows.Thickness"/> with a uniform
            length of 0 on all four sides, i.e., no margin at all. Giving this property a decent
            value the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolTip.ColumnsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.Columns"/> dependency property.
            </summary>
            <remarks>
            <para>
            This property does not have a default value. Giving this property a decent value is
            the responsibility of the style. If you set this property to 1, the (label, value)
            pairs will be displayed in a single-column list, i.e., they will be displayed as one
            long list of items. If you set this property to a value greater than 1,
            the (label, value) pairs will be distributed evenly over as many columns as you have
            defined.
            </para>
            <para>
            This property is similar to the <see cref="P:System.Windows.Controls.Primitives.UniformGrid.Columns"/> property.
            </para> 
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.AdvancedToolTip.BottomCustomContentProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.BottomCustomContent"/> dependency property.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.HeaderText">
            <summary>
            Gets or sets the text that is displayed in the header of the advanced tooltip.
            </summary>
            <remarks>
            The default value is an empty string.
            </remarks> 
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.HeaderIcon">
            <summary>
            Gets or sets the icon that is used in the header of the advanced tooltip.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.TopCustomContent">
            <summary>
             Gets or sets the custom content area in the Advanced ToolTip.
             </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelValuePairs">
            <summary>
            Gets or sets the collection of (label, value) pairs that is displayed by
            the advanced tooltip.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelValuePairsControl">
            <summary>
            Gets or sets the collection of (label, value) pairs that is displayed by
            the advanced tooltip by the control.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelColumnWidth">
            <summary>
            Gets or sets the width of the column that displays the labels of the
            <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelValuePairs"/>.
            </summary>
            <remarks>
            The default value of this property is 0.0. Giving this property a decent value is
            the responsibility of the style.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.ValueColumnWidth">
            <summary>
            Gets or sets the width of the column that displays the values of the
            <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelValuePairs"/>.
            </summary>
            <remarks>
            The default value of this property is 0.0. Giving this property a decent value is
            the responsibility of the style.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelHorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the label.
            </summary>
            <remarks>
            The default value of this property is <see cref="F:System.Windows.HorizontalAlignment.Left"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.ValueHorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the value.
            </summary>
            <remarks>
            The default value of this property is <see cref="F:System.Windows.HorizontalAlignment.Left"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelValuePairMargin">
            <summary>
            Gets or sets the margin between the labels and the values in one column of the
            <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelValuePairs"/> that are displayed by this advanced tooltip.
            </summary>
            <remarks>
            The default value of this property is a <see cref="T:System.Windows.Thickness"/> with a uniform
            length of 0 on all four sides, i.e., no margin at all. Giving this property a decent
            value the responsibility of the style.  
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.Columns">
            <summary>
            Gets or sets the number of columns used to display the <see cref="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.LabelValuePairs"/>.
            </summary>
            <remarks>
            <para>
            This property does not have a default value. Giving this property a decent value is
            the responsibility of the style. If you set this property to 1, the (label, value)
            pairs will be displayed in a single-column list, i.e., they will be displayed as one
            long list of items. If you set this property to a value greater than 1,
            the (label, value) pairs will be distributed evenly over as many columns as you have
            defined.
            </para>
            <para>
            This property is similar to the <see cref="P:System.Windows.Controls.Primitives.UniformGrid.Columns"/> property.
            </para> 
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.AdvancedToolTip.BottomCustomContent">
            <summary>
            Gets or sets the custom content used in the bottom of the Advanced ToolTip.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ApplicationLauncher">
            <summary>
            Custom <see cref="T:System.Windows.Controls.ItemsControl"/> that serves as a container for application launcher items.
            </summary>
            <remarks>
            This <c>ItemsControl</c> can be used to host buttons that correspond with
            different applications. These applications can be started by pressing those buttons.
            </remarks>
            <seealso cref="T:System.Windows.Controls.ItemsControl">ItemsControl Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ApplicationLauncherItem">ApplicationLauncherItem Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ApplicationLauncher.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ApplicationLauncher.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>
            This method returns a new <see cref="T:Philips.Platform.Presentation.Controls.ApplicationLauncherItem"/> instance, which is
            the element type that is hosted by a <b>ApplicationLauncher</b>.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ApplicationLauncher.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            <see langword="true"/>, if the specified item is a <see cref="T:Philips.Platform.Presentation.Controls.ApplicationLauncherItem"/>;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ApplicationLauncher.OnCreateAutomationPeer">
            <summary>
            Gets the automation peer for this <see cref="T:Philips.Platform.Presentation.Controls.ApplicationLauncher"/>.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ApplicationLauncherItem">
            <summary>
            Custom <see cref="T:System.Windows.Controls.HeaderedContentControl"/> which supports commands.
            </summary>
            <remarks>
            Instances of this class will typically be hosted by an <see cref="T:Philips.Platform.Presentation.Controls.ApplicationLauncher"/>.
            They represent applications that can be started. Typically, the template of an 
            <b>ApplicationLauncherItem</b> will contain a <see cref="T:System.Windows.Controls.Button"/> together with some 
            header text. The <see cref="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.IsChecked"/> property indicates that an application is already
            started and the <see cref="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.IsHighlighted"/> property indicates that an application is 
            recommended. The template will typically bind with these properties to change the 
            visualization accordingly.
            </remarks>
            <seealso cref="T:System.Windows.Controls.HeaderedContentControl">HeaderedContentControl Class</seealso>
            <seealso cref="T:System.Windows.Input.ICommandSource">ICommandSource Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ApplicationLauncher">ApplicationLauncher Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.IsCheckedChangedEvent">
            <summary>
            Custom routed event registration for the <see cref="E:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.IsCheckedChanged"/> event.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.IsCheckedProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.IsChecked"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.IsHighlightedProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.IsHighlighted"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.CommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.Command"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.CommandTargetProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.CommandTarget"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.CommandParameterProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.CommandParameter"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.OnIsCheckedChanged(System.Boolean,System.Boolean)">
            <summary>
            Provides derived classes with an opportunity to handle changes to the
            <see cref="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.IsChecked"/> property.
            </summary>
            <remarks>
            By default, this method will raise the <see cref="E:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.IsCheckedChanged"/> event.
            </remarks>
            <param name="oldValue">The old value of the <see cref="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.IsChecked"/> property.</param>
            <param name="newValue">The new value of the <see cref="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.IsChecked"/> property.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.OnIsCheckedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.IsChecked"/> property.
            </summary>
            <param name="dependencyObject">
            The dependency object whose <see cref="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.IsChecked"/> property has changed.
            </param>
            <param name="e">The propery changed event arguments.</param>
        </member>
        <member name="E:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.IsCheckedChanged">
            <summary>
            Raised when the <see cref="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.IsChecked"/> property is changed.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.IsChecked">
            <summary>
            Gets or sets whether this item is checked or not.
            </summary>
            <remarks>
            Typically, the <b>IsChecked</b> property indicates whether an application is already
            started.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.IsHighlighted">
            <summary>
            Gets or sets whether this item is highlighted or not.
            </summary>
            <remarks>
            Typically, the <b>IsHighlighted</b> property indicates that an application is 
            recommended.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.Command">
            <summary>
            Gets or sets the command that is executed when the <b>ApplicationLauncherItem</b>
            is activated.
            </summary>
            <remarks>
            Typically, the template of the <b>ApplicationLauncherItem</b> contains some kind of
            <see cref="T:System.Windows.Input.ICommandSource"/> (for example, a <see cref="T:System.Windows.Controls.Button"/>). That command
            source's <see cref="P:System.Windows.Input.ICommandSource.Command">Command</see> property will bind with
            this property.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.CommandTarget">
            <summary>
            Gets or sets the command target for the <see cref="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.Command"/>.
            </summary>
            <remarks>
            Typically, the template of the <b>ApplicationLauncherItem</b> contains a button of 
            which the <see cref="P:System.Windows.Input.ICommandSource.CommandTarget">CommandTemplate property</see> will 
            bind with this property.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.CommandParameter">
            <summary>
            Gets or sets the command parameter for the <see cref="P:Philips.Platform.Presentation.Controls.ApplicationLauncherItem.Command"/>.
            </summary>
            <remarks>
            Typically, the template of the <b>ApplicationLauncherItem</b> contains a button of 
            which the <see cref="P:System.Windows.Input.ICommandSource.CommandParameter">CommandParameter property</see> 
            will bind with this property.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.Arc">
            <summary>
            Custom shape to create an arc or an arc segment.
            </summary>
            <seealso cref="T:System.Windows.Shapes.Shape">Shape Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Arc.ValueProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Arc.Value"/> dependency property.
            </summary>
            <remarks>
            <see cref="P:Philips.Platform.Presentation.Controls.Arc.Value"/> is already registered in the <see cref="T:System.Windows.Controls.Primitives.RangeBase"/> class. 
            <see cref="T:Philips.Platform.Presentation.Controls.Arc"/> is added as an owner of this property.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Arc.ValueOffsetProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Arc.ValueOffset"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Arc.MinimumProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Arc.Minimum"/> dependency property.
            </summary>
            <remarks>
            <see cref="P:Philips.Platform.Presentation.Controls.Arc.Minimum"/> is already registered in the <see cref="T:System.Windows.Controls.Primitives.RangeBase"/> class. 
            <see cref="T:Philips.Platform.Presentation.Controls.Arc"/> is added as an owner of this property.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Arc.MaximumProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Arc.Maximum"/> dependency property.
            </summary>
            <remarks>
            <see cref="P:Philips.Platform.Presentation.Controls.Arc.Maximum"/> is already registered in the <see cref="T:System.Windows.Controls.Primitives.RangeBase"/> class. 
            <see cref="T:Philips.Platform.Presentation.Controls.Arc"/> is added as an owner of this property.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Arc.OuterRadiusProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Arc.OuterRadius"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Arc.InnerRadiusProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Arc.InnerRadius"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Arc.CreateGeometry">
            <summary>
            Creates the geometry.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Arc.UpdateGeometry">
            <summary>
            Updates the geometry.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Arc.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invalidates the geometry and the rendering when a related property is changed.
            </summary>
            <remarks>
            Invalidating a visual means invalidating its arrangement and rendering, so it gets
            arranged and rendered again. When the shape is rendered again, its DefiningGeometry
            is called in the OnRender method. Because the geometry is invalidated too, its
            elements are re-evaluated in the DefiningGeometry method.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Arc.GetArcPoint(System.Double,System.Double)">
            <summary>
            Compute the point on an arc that is centered at (0,0), 
            starts at 90 degrees and grows clockwise.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Arc.Value">
            <summary>
            Gets or sets the current position of the arc, compared to its <see cref="P:Philips.Platform.Presentation.Controls.Arc.Minimum"/> and
            <see cref="P:Philips.Platform.Presentation.Controls.Arc.Maximum"/> values.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Arc.ValueOffset">
            <summary>
            Gets or sets the position offset of the arc.
            </summary>
            <remarks>
            For example, when an arc has a Minimum of 0, a Maximum of 100, a Value of 75 and 
            a ValueOffset of 25, the arc's start angle will be 0 degrees and its end angle will be
            90 degrees, covering a total of 270 degrees.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Arc.Minimum">
            <summary>
            Gets or sets the minimum <see cref="P:Philips.Platform.Presentation.Controls.Arc.Value"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Arc.Maximum">
            <summary>
            Gets or sets the maximum <see cref="P:Philips.Platform.Presentation.Controls.Arc.Value"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Arc.OuterRadius">
            <summary>
            Gets or sets the relative radius of the arc's outer border, 
            compared to the boundary radius.
            </summary>
            <remarks>
            The value should be between 0 and 1.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Arc.InnerRadius">
            <summary>
            Gets or sets the relative radius of the arc's inner border,
            compared to the boundary radius.
            </summary>
            <remarks>
            The value should be between 0 and 1.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Arc.DefiningGeometry">
            <summary>
            Defines the geometry.
            </summary>
            <remarks>
            In this geometry, two ellipses are included to fixate the boundaries. This is necessary
            because otherwise, the boundaries will vary with the <see cref="P:Philips.Platform.Presentation.Controls.Arc.Value"/> of the Arc. 
            Furthermore, this fixation is necessary for the <see cref="T:System.Windows.Media.RadialGradientBrush"/> to
            fill the geometry correctly.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ArrowBorder">
            <summary>
            Custom <seealso cref="T:System.Windows.Controls.Border"/> which adds an arrow to a normal <seealso cref="T:System.Windows.Controls.Border"/>.
            </summary>
            <remarks>
            Some of the code in this file was copied from Microsoft. It has been obtained by reverse
            engineering Microsoft code.
            </remarks>
            <seealso cref="T:System.Windows.Controls.Border">Border Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ArrowPopupContainer">ArrowPopupContainer Class</seealso>
            <seealso href="http://stackoverflow.com/questions/9179831/can-i-tell-in-code-behind-if-a-popup-has-been-moved-relative-to-its-placement-ta"/>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowBorder.borderOuterGeometry">
            <summary>
            Caches the outer geometry of the border itself.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowBorder.borderInnerGeometry">
            <summary>
            Caches the inner geometry of the border itself.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowBorder.arrowOuterGeometry">
            <summary>
            Caches the outer geometry of the arrow.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowBorder.arrowInnerGeometry">
            <summary>
            Caches the inner geometry of the arrow
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowBorder.isArrowVisible">
            <summary>
            Indicates whether the arrow should be visible.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowBorder.isArrowOutlineVisible">
            <summary>
            Indicates whether the arrow has an outline.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowBorder.arrowSide">
            <summary>
            Specifies the side at which the arrow is visible.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowBorder.offset">
            <summary>
            Specifies the distance between the top or left edge of the border and the arrow, 
            measured along the outer perimeter of the border.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowBorder.isUpdating">
            <summary>
            Indicates whether the arrow border is currently updating.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowBorder.OffsetProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ArrowBorder.Offset"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowBorder.TargetProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ArrowBorder.Target"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowBorder.ArrowWidthProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ArrowBorder.ArrowWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowBorder.ArrowHeightProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ArrowBorder.ArrowHeight"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.Update">
            <summary>
            Updates the arrow position.
            </summary>
            <remarks>
            Currently, calling this method is only necessary when the arrow border is inside a
            <seealso cref="T:System.Windows.Controls.Primitives.Popup"/>. The final position of a popup can only be known by reacting
            on the <see cref="E:System.Windows.Controls.Primitives.Popup.Opened"/> event. The arrow border has to be notified of this 
            final position by calling the Update method. When the arrow border is not inside a 
            popup, this method does not have to be called. A change in one of the arrow properties 
            will invalidate the arrow border and call this method internally.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the arrow border based on the value of the <see cref="P:Philips.Platform.Presentation.Controls.ArrowBorder.ArrowHeight"/>.
            </summary>
            <param name="constraint">The maximum size that the method can return.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the arrow border taking the <see cref="P:Philips.Platform.Presentation.Controls.ArrowBorder.ArrowHeight"/> into account.
            </summary>
            <param name="finalSize">
            The size of the final area within the parent that this element should use to arrange 
            its child.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.OnRender(System.Windows.Media.DrawingContext)">
             <summary>
             Creates the drawing instructions for the border and the arrow.
             </summary>
             <param name="drawingContext">
             The <see cref="T:System.Windows.Media.DrawingContext"/> which contains the drawing instructions for a 
             specific element. This context is provided to the layout system.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.OnArrowPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles a change in one of the arrow properties by updating the arrow border.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.OnCoerceArrowSize(System.Windows.DependencyObject,System.Object)">
            <summary>
            Provides a CoerceValueCallback for the <see cref="P:Philips.Platform.Presentation.Controls.ArrowBorder.ArrowWidth"/> and
            <seealso cref="P:Philips.Platform.Presentation.Controls.ArrowBorder.ArrowHeight"/> to ensure that it is within its bounds.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.RenderBorder(System.Windows.Media.DrawingContext)">
            <summary>
            Renders the original border without the arrow.
            </summary>
            <remarks>
            Rendering the border with <c>base.OnRender</c> will not do, because then the border 
            would fill up the entire available space. Instead, it should be rendered beyond
            the arrow.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.RenderArrowOutline(System.Windows.Media.DrawingContext)">
            <summary>
            Renders the outline of the arrow.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.RenderArrowBackground(System.Windows.Media.DrawingContext)">
            <summary>
            Renders the background of the arrow.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.UpdateArrowSide">
            <summary>
            Updates the arrow side by comparing the position of the arrow border with the 
            position of its target.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.UpdateOffset">
            <summary>
            Updates the offset by comparing the position of the arrow border with the 
            position of its target. 
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.CacheBorderGeometries(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Caches the inner and outer border geometries.
            </summary>
            <remarks>
            The code in this body is copied from Microsoft. It is located in the 
            <c>ArrangeOverride</c> method of:
            <list type="bullet">
              <item>Type: System.Windows.Controls.Border</item>
              <item>Assembly: PresentationFramework,
                    Version=4.0.0.0,
                    Culture=neutral,
                    PublicKeyToken=31bf3856ad364e35
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.GenerateBorderGeometry(System.Windows.Media.StreamGeometryContext,System.Windows.Rect,Philips.Platform.Presentation.Controls.ArrowBorder.Radii)">
            <summary>
            Generates the geometry of the original <seealso cref="T:System.Windows.Controls.Border"/>, without the arrow.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.DrawArc(System.Windows.Media.StreamGeometryContext,System.Windows.Point,System.Double,System.Double)">
            <summary>
            Draws an arc to the specified point.
            </summary>
            <param name="streamGeometryContext">The stream geometry context.</param>
            <param name="point">The point to draw an arc to.</param>
            <param name="width">
            The width of an ellipse whose perimeter is used to draw the arc.
            </param>
            <param name="height">
            The height of an ellipse whose perimeter is used to draw the arc.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.DrawLine(System.Windows.Media.StreamGeometryContext,System.Windows.Point,System.Boolean)">
            <summary>
            Draws a straight line to the specified point.
            </summary>
            <param name="streamGeometryContext">The stream geometry context.</param>
            <param name="point">The point to draw a straight line to.</param>
            <param name="isStroked">Flag indicating whether the line is stroked.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.CacheArrowGeometries(System.Windows.Size)">
            <summary>
            Caches the inner and outer arrow geometries for the specified size.
            </summary>
            <remarks>
            This method clears the cache if either the width or the height of the specified size
            is equal to zero, according to <see cref="M:Philips.Platform.Presentation.DoubleUtility.IsZero(System.Double)"/>.
            </remarks>
            <param name="size">The size for which to cache the arrow geometries.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.GenerateArrowGeometries(System.Windows.Media.StreamGeometryContext,System.Windows.Media.StreamGeometryContext,System.Windows.Size)">
            <summary>
            Generates the arrow geometries.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.DeflateRect(System.Windows.Rect,System.Windows.Thickness)">
            <summary>
            Deflates a <seealso cref="T:System.Windows.Rect"/> by subtracting a certain thickness.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ArrowBorder.Offset">
            <summary>
            Gets or sets the offset of the arrow compared to its normal target point.
            </summary>
            <remarks>
            Normally, the target point is one of the edges of the <seealso cref="P:Philips.Platform.Presentation.Controls.ArrowBorder.Target"/>.
            With an offset this target point can be moved along that edge. An offset in the 
            perpendicular direction can be accomplished by giving the target or arrow border a
            margin.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ArrowBorder.Target">
            <summary>
            Gets or sets the target element to which the arrow should point.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ArrowBorder.ArrowWidth">
            <summary>
            Gets or sets the width of the arrow.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ArrowBorder.ArrowHeight">
            <summary>
            Gets or sets the height of the arrow.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ArrowBorder.Radii">
            <summary>
            Custom structure that holds all border thickness-independent corner radii of a 
            <seealso cref="T:System.Windows.Controls.Border"/>.
            </summary>
            <remarks>
            <para>
            This code is copied from Microsoft code.
            </para>
            <para>
            When setting a corner radius, this corner radius applies to the middle of the
            border(thickness). Both the corner radius at the outer perimeter and the inner 
            perimeter are different. Furthermore, because the border thickness can be different
            at all four sides, there are two corner radii for each corner. This structure
            holds all different corner radii for either the outer perimeter or the inner perimeter.
            </para>
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowBorder.Radii.#ctor(System.Windows.CornerRadius,System.Windows.Thickness,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="cornerRadius">The corner radius of the border.</param>
            <param name="borderThickness">The border thickness.</param>
            <param name="isOuter">
            Indicates whether a Radii instance applies to the outer perimeter of the border.
            </param>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ArrowPopupContainer">
            <summary>
            Custom <see cref="T:System.Windows.Controls.ContentControl"/> which holds the content for an arrow popup.
            </summary>
            <remarks>
            Typically, the template of this control will contain a <see cref="T:System.Windows.Controls.Primitives.Popup"/> which contains
            two <see cref="T:Philips.Platform.Presentation.Controls.ArrowBorder"/>'s. The purpose of one <see cref="T:Philips.Platform.Presentation.Controls.ArrowBorder"/> is to drop
            a shadow while the other <see cref="T:Philips.Platform.Presentation.Controls.ArrowBorder"/> contains the content of this control.
            </remarks>
            <seealso cref="T:System.Windows.Controls.ContentControl">ContentControl Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ArrowBorder">ArrowBorder Class</seealso>
            <seealso cref="T:System.Windows.Controls.Primitives.Popup">Popup Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowPopupContainer.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.CornerRadius"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowPopupContainer.OffsetProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.Offset"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowPopupContainer.ArrowWidthProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.ArrowWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowPopupContainer.ArrowHeightProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.ArrowHeight"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowPopupContainer.IsOpenProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.IsOpen"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowPopupContainer.StaysOpenProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.StaysOpen"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowPopupContainer.PlacementProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.Placement"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowPopupContainer.PlacementTargetProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.PlacementTarget"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowPopupContainer.HorizontalOffsetProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.HorizontalOffset"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ArrowPopupContainer.VerticalOffsetProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.VerticalOffset"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowPopupContainer.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
            <remarks>
            Currently, the arrow borders inside the template of this control are defined as
            template parts in order to be able to update them whenever the popup is opened.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowPopupContainer.OnPopupOpened(System.Object,System.EventArgs)">
            <summary>
            Handles the opening of the <see cref="T:System.Windows.Controls.Primitives.Popup"/>.
            </summary>
            <remarks>
            Currently, listening to the <see cref="E:System.Windows.Controls.Primitives.Popup.Opened"/> event is necessary in order
            to notice the possible repositioning of the popup. Whenever the popup repositions
            itself, the arrows on the arrow borders should also be repositioned (by calling the 
            <see cref="M:Philips.Platform.Presentation.Controls.ArrowBorder.Update"/> method).
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ArrowPopupContainer.UpdateArrowBorders">
            <summary>
            Updates the arrow borders by regenerating their geometries.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.CornerRadius">
            <summary>
            Gets or sets the corner radius.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.Offset">
            <summary>
            Gets or sets the offset of the arrow compared to its normal target point.
            </summary>
            <remarks>
            Normally, the target point is one of the edges of the 
            <seealso cref="P:Philips.Platform.Presentation.Controls.ArrowBorder.Target"/>. With an offset this target point can be moved 
            along that edge. An offset in the  perpendicular direction can be accomplished by 
            giving the target or arrow border a margin.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.ArrowWidth">
            <summary>
            Gets or sets the width of the arrow.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.ArrowHeight">
            <summary>
            Gets or sets the length of the arrow.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.IsOpen">
            <summary>
            Gets or sets whether the internal popup is open.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.StaysOpen">
            <summary>
            Gets or sets whether the internal popup stays open.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.Placement">
            <summary>
            Gets or sets the placement mode of the internal popup.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.PlacementTarget">
            <summary>
            Gets or sets the target element to which the arrow should point and the 
            placement target for the internal popup.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.HorizontalOffset">
            <summary>
            Gets or sets the horizontal offset which the popup should have compared to its
            target element.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ArrowPopupContainer.VerticalOffset">
            <summary>
            Gets or sets the vertical offset which the popup should have compared to its
            target element.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.AutomatableTextBlock">
            <summary>
            Implements a <see cref="T:System.Windows.Controls.TextBlock"/> control visible to automation.
            </summary>
            <seealso cref="T:System.Windows.Controls.TextBlock">TextBlock Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.AutomatableTextBlock.OnCreateAutomationPeer">
            <summary>
            Gets the automation peer for this <see cref="T:Philips.Platform.Presentation.Controls.AutomatableTextBlock"/>.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.CircularProgressBarSize">
            <summary>
            Enumeration defining the different size options for the circular progress bar.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.CircularProgressBarSize.Small">
            <summary>
            Small size
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.CircularProgressBarSize.Medium">
            <summary>
            Medium size
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.CircularProgressBarSize.Large">
            <summary>
            Large size
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ColorPickerControl">
            <summary>
            Custom color picker control.
            </summary>
            <remarks>
            <para>
            This custom color picker control allows the user to pick a color. The color picker offers
            two different ways of doing this. First, the color picker allows the user to pick a color
            from several sets of predefined colors. These are called the Available Colors, the Standard
            Colors, and the Recent Colors. The Available Colors are, by default, equal to the set of
            Experience Identity annotation colors. Application builders can provide their own set of
            available colors if they wish. The Standard Colors are, by default, a small subset of the
            Experience Identity annotation colors known as the Safe Annotation Colors. These colors
            have been carefully selected, and tested, to be distinguishable by color-sensitive users.
            Finally, the Recent Colors are a small number of colors that have recently been picked.
            The maximum number of recent colors that the color picker remembers is configurable through
            the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.MaxRecentColors"/> property.
            </para>
            <para>
            Second, the color picker allows the user to pick a custom color. It uses the
            <see cref="T:Philips.Platform.Presentation.Controls.ColorCanvas"/> to implement the picking of random colors.
            </para>
            <para>
            This color picker control is based on the one from the Extended WPF Toolkit, see
            <see href="http://wpftoolkit.codeplex.com/wikipage?title=ColorPicker"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPickerControl.AvailableColorsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.AvailableColors"/> dependency property.
            </summary>
            <remarks>
            By default, the available colors will be the set of known annotation colors,
            as defined by the <see cref="T:Philips.Platform.Presentation.AnnotationColors"/> class.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPickerControl.CreateAvailableColors">
            <summary>
            Creates the available colors.
            </summary>
            <returns>
            By default, the available colors are equal to the Annotation Colors.
            </returns>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPickerControl.AvailableColorsHeaderProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.AvailableColorsHeader"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the localizable string "Available Colors",
            as defined by <see cref="P:Philips.Platform.Presentation.TextResources.AvailableColors"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPickerControl.ShowAvailableColorsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.ShowAvailableColors"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPickerControl.ShowStandardColorsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.ShowStandardColors"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPickerControl.ShowDropDownButtonProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.ShowDropDownButton"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPickerControl.StandardColorsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.StandardColors"/> dependency property.
            </summary>
            <remarks>
            By default, the standard colors will be the set of known safe annotation colors,
            which is a subset of the annotation colors as defined by the
            <see cref="T:Philips.Platform.Presentation.AnnotationColors"/> class.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPickerControl.CreateStandardColors">
            <summary>
            Creates the standard colors.
            </summary>
            <remarks>
            By default, the standard colors are equal to the so-called Safe Annotation Colors,
            which is the subset of Annotation Colors that are suitable for color-sensitive users.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPickerControl.StandardColorsHeaderProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.StandardColorsHeader"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the localizable string "Standard Colors",
            as defined by <see cref="P:Philips.Platform.Presentation.TextResources.StandardColors"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPickerControl.RecentColorsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.RecentColors"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPickerControl.CreateRecentColors">
            <summary>
            Creates the recent colors.
            </summary>
            <returns>
            By default, the recent colors are an empty collection.
            </returns>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPickerControl.RecentColorsHeaderProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.RecentColorsHeader"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the localizable string "Recent Colors",
            as defined by <see cref="P:Philips.Platform.Presentation.TextResources.RecentColors"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPickerControl.ShowRecentColorsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.ShowRecentColors"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPickerControl.SelectedColorProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.SelectedColor"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see cref="P:System.Windows.Media.Colors.Black"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPickerControl.SelectedColorTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.SelectedColorText"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the localizable string "Black",
            as defined by <see cref="P:Philips.Platform.Presentation.TextResources.ColorBlack"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPickerControl.ColorSwatchHeightProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.ColorSwatchHeight"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is 0.0. Giving this property a decent value is
            the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPickerControl.ColorSwatchWidthProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.ColorSwatchWidth"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is 0.0. Giving this property a decent value is
            the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPickerControl.ColumnsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.Columns"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPickerControl.MaxRecentColorsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.MaxRecentColors"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is 10.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPickerControl.UsingAlphaChannelProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.UsingAlphaChannel"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPickerControl.OnUsingAlphaChannelChanged">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.UsingAlphaChannel"/> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPickerControl.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPickerControl.SelectedColorChangedEvent">
            <summary>
            Custom routed event registration for the <see cref="E:Philips.Platform.Presentation.Controls.ColorPickerControl.SelectedColorChanged"/> event.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPickerControl.AvailableColors">
            <summary>
            Gets or sets the available colors.
            </summary>
            <remarks>
            By default, the available colors will be the set of known annotation colors,
            as defined by the <see cref="T:Philips.Platform.Presentation.AnnotationColors"/> class.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPickerControl.AvailableColorsHeader">
            <summary>
            Gets or sets the header for the "Available Colors" section of the <c>ColorPicker</c>.
            </summary>
            <remarks>
            The default value of this property is the localizable string "Available Colors",
            as defined by <see cref="P:Philips.Platform.Presentation.TextResources.AvailableColors"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPickerControl.ShowAvailableColors">
            <summary>
            Gets or sets whether the available colors are shown.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPickerControl.ShowStandardColors">
            <summary>
            Gets or sets whether the standard colors are shown.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPickerControl.ShowDropDownButton">
            <summary>
            Gets or sets whether the UI element that gives access to the color picker
            functionality shows a drop down button.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPickerControl.StandardColors">
            <summary>
            Gets or sets the standard colors.
            </summary>
            <remarks>
            By default, the standard colors will be the set of known safe annotation colors,
            which is a subset of the annotation colors as defined by the
            <see cref="T:Philips.Platform.Presentation.AnnotationColors"/> class.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPickerControl.StandardColorsHeader">
            <summary>
            Gets or sets the header for the "Standard Colors" section of the <c>ColorPicker</c>.
            </summary>
            <remarks>
            The default value of this property is the localizable string "Standard Colors",
            as defined by <see cref="P:Philips.Platform.Presentation.TextResources.StandardColors"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPickerControl.RecentColors">
            <summary>
            Gets the recent (or recently used) colors.
            </summary>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPickerControl.RecentColorsHeader">
            <summary>
            Gets or sets the header for the "Recent Colors" section of the <c>ColorPicker</c>.
            </summary>
            <remarks>
            The default value of this property is the localizable string "Recent Colors",
            as defined by <see cref="P:Philips.Platform.Presentation.TextResources.RecentColors"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPickerControl.ShowRecentColors">
            <summary>
            Gets or sets whether the recent colors are shown.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPickerControl.SelectedColor">
            <summary>
            Gets or sets the selected color.
            </summary>
            <remarks>
            The default value of this property is <see cref="P:System.Windows.Media.Colors.Black"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPickerControl.SelectedColorText">
            <summary>
            Gets or sets the selected color text.
            </summary>
            <remarks>
            The default value of this property is the localizable string "Black",
            as defined by <see cref="P:Philips.Platform.Presentation.TextResources.ColorBlack"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPickerControl.ColorSwatchHeight">
            <summary>
            Gets or sets the height of color swatches in the various color palette displays.
            </summary>
            <remarks>
            The default value of this property is 0.0. Giving this property a decent value is
            the responsibility of the style.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPickerControl.ColorSwatchWidth">
            <summary>
            Gets or sets the width of color swatches in the various color palette displays.
            </summary>
            <remarks>
            The default value of this property is 0.0. Giving this property a decent value is
            the responsibility of the style.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPickerControl.Columns">
            <summary>
            Gets or sets the number of columns used to display the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.AvailableColors"/>,
            </summary>
            <remarks>
            <para>
            This property does not have a default value. Giving this property a decent value is
            the responsibility of the style.
            </para>
            <para>
            This property is similar to the <see cref="P:System.Windows.Controls.Primitives.UniformGrid.Columns"/> property.
            </para> 
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPickerControl.MaxRecentColors">
            <summary>
            Gets or sets the maximum number of recent colors that are remembered.
            </summary>
            <remarks>
            The default value of this property is 10.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPickerControl.UsingAlphaChannel">
            <summary>
            Gets or sets whether the Alpha channel should be used.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="E:Philips.Platform.Presentation.Controls.ColorPickerControl.SelectedColorChanged">
            <summary>
            Routed event that is raised when the <see cref="P:Philips.Platform.Presentation.Controls.ColorPickerControl.SelectedColor"/> property is changed.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ColorPickerDialog">
            <summary>
            Custom dialog which allows the user to pick a color.
            </summary>
            <remarks>
            <para>
            This custom dialog  hosts a <see cref="T:Philips.Platform.Presentation.Controls.ColorPickerControl"/>, which allows the user
            to pick a color from a list of available colors, a list of standard colors, and a
            list of recently used colors. In addition, the <c>ColorPickerControl</c> provides
            access to a <see cref="T:Philips.Platform.Presentation.Controls.ColorCanvas"/> where the user can pick any color he or she
            likes.
            </para>
            <para>
            This custom color picker dialog expects various named template parts to be
            defined in its control template. These template parts are:
            <list type="bullet">
              <item>
                <term>PART_ColorPickerControl</term>
                <description>The <see cref="T:Philips.Platform.Presentation.Controls.ColorPickerControl"/> hosted by this dialog.</description>
              </item>
              <item>
                <term>PART_OkButton</term>
                <description>The OK button.</description>
              </item>
              <item>
                <term>PART_CancelButton</term>
                <description>The Cancel button.</description>
              </item>
            </list>
            </para>
            <para>
            This color picker control is based on the one from the Extended WPF Toolkit, see
            <see href="http://wpftoolkit.codeplex.com/wikipage?title=ColorPicker"/>.
            </para>
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ColorPickerControl">ColorPickerControl Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.Dialog">
            <summary>
            Basic general purpose dialog class.
            </summary>
            <remarks>
            <para>
            This general purpose dialog class provides various configuration options to the user.
            First of all, the user can configure whether or not the dialog is draggable by setting the
            <see cref="P:Philips.Platform.Presentation.Controls.Dialog.IsDraggable"/> property.
            </para>
            <para>
            Second, the close behavior of the dialog is configurable. The user can choose whether
            the dialog has a <b>Close</b> button at all by setting the <see cref="P:Philips.Platform.Presentation.Controls.Dialog.HasCloseButton"/>
            property. Once the user has decided that the dialog should have a <b>Close</b> button,
            he or she can decide whether the dialog handles the clicking of the <b>Close</b> button
            autonomously, or whether handling of the clicking is left to the application code.
            Typically, the latter is preferred when the application needs to be able to intervene when
            the user expresses the intention to close the dialog. This intervention can take the form
            of popping up a <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/> to give some extra information to the user,
            or to ask him or her to confirm the closing of the dialog. The intervention can also take
            the form of simply blocking the closing of the dialog until certain application specific
            conditions are met. If, on the other hand, the user wants the dialog to close autonomously
            when the <b>Close</b> button is clicked, this is taken care of by setting the <b>Close</b>
            button's extended <see cref="F:Philips.Platform.Presentation.Controls.DialogWindowCloseBehavior.IsCloseButtonProperty"/> to
            <see langword="true"/>.
            </para>
            <para>
            If the user selects a <b>Close</b> button to be present, this class assumes that such a
            button is provided by the <see cref="T:System.Windows.Style"/> that is applied to this control. The 
            <see cref="T:Philips.Platform.Presentation.Controls.DialogWindowCloseBehavior"/> of this <b>Close</b> button must be bound to the
            <see cref="P:Philips.Platform.Presentation.Controls.Dialog.IsAutoClose"/> property. When the <b>Close</b> button is clicked,
            the <see cref="E:Philips.Platform.Presentation.Controls.Dialog.CloseClick"/> event is raised, giving the application the chance to
            intervene as described above.
            </para>
            <para>
            In addition to the <b>Close</b> button, the dialog can also expose <b>Minimize</b> and
            <b>Maximize/Restore</b> buttons to the end users. By default, these buttons are not
            visible. Use the <see cref="P:Philips.Platform.Presentation.Controls.Dialog.HasMinimizeButton"/> and <see cref="P:Philips.Platform.Presentation.Controls.Dialog.HasMaximizeButton"/>
            to expose these buttons in the dialog's user interface. The implementation of the minimize
            and maximize/restore functionality is handled by attached behavior that is provided by
            the <see cref="T:Philips.Platform.Presentation.Controls.DialogWindowMaximizeBehavior"/> class.
            </para>
            <para>
            Note that this dialog class does not make any assumptions about its content, other than
            the presence or absence of the <b>Close</b>, <b>Minimize</b>, and <b>Maximize</b> buttons.
            In particular, this dialog class does not assume that the dialog has an <b>OK</b> button,
            or any other buttons for that matter. Adding an <b>OK</b> button, or other buttons,
            and implementing the handling of clicking these buttons, is the responsibility of the
            application builder.
            </para>
            <para>
            The <c>Dialog</c> expects various named template parts to be defined in its control
            template. These template parts are:
            <list type="bullet">
              <item>
                <term>PART_CloseButton</term>
                <description>The close button. This should always be defined in any control template
                for this control. The presence or absence of the close button in any particular instance
                of this control is governed by the <see cref="P:Philips.Platform.Presentation.Controls.Dialog.HasCloseButton"/> property.</description>
              </item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Window">Window Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.DialogWindowCloseBehavior">DialogWindowCloseBehavior Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.DialogWindowMaximizeBehavior">DialogWindowMaximizeBehavior Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.MessageBox">MessageBox Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Dialog.InternalCloseCommand">
            <summary>
            Internal close command.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Dialog.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Dialog.CloseClickEvent">
            <summary>
            Custom routed event registration for the dialog's <see cref="E:Philips.Platform.Presentation.Controls.Dialog.CloseClick"/> event.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Dialog.IsDraggableProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Dialog.IsDraggable"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Dialog.HasCloseButtonProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Dialog.HasCloseButton"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Dialog.HasMaximizeButtonProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Dialog.HasMaximizeButton"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Dialog.HasMinimizeButtonProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Dialog.HasMinimizeButton"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Dialog.IsAutoCloseProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Dialog.IsAutoClose"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Dialog.RaiseCloseClickEvent">
            <summary>
            Raises the <see cref="E:Philips.Platform.Presentation.Controls.Dialog.CloseClick"/> event.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Dialog.OnExecuteInternalCloseCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the execution of the <see cref="F:Philips.Platform.Presentation.Controls.Dialog.InternalCloseCommand"/>.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="E:Philips.Platform.Presentation.Controls.Dialog.CloseClick">
            <summary>
            Raised when the dialog's <b>Close</b> button is clicked.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Dialog.IsDraggable">
            <summary>
            Gets or sets the whether the dialog can be dragged.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Dialog.HasCloseButton">
            <summary>
            Gets or sets whether the dialog has a <b>Close</b> button.
            </summary>
            <remarks>
            <para>
            The close button is identified by the template part name PART_CloseButton in the
            dialog's control template. It should always be present in the control template.
            Use this property to govern whether it is actually visible or not.
            </para>
            <para>
            The default value of this property is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Dialog.HasMaximizeButton">
            <summary>
            Gets or sets whether the dialog has a <b>maximize</b> button.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Dialog.HasMinimizeButton">
            <summary>
            Gets or sets whether the dialog has a <b>minimize</b> button.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Dialog.IsAutoClose">
            <summary>
            Gets or sets whether the dialog closes itself automatically when the <b>Close</b>
            button is clicked.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPickerDialog.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPickerDialog.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPickerDialog.SelectedColor">
            <summary>
            Gets and sets the selected color.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.Clock">
            <summary>
            Custom control that represents a clock.
            </summary>
            <remarks>
            <para>
            This custom control represents a clock that is capable of displaying the date and the time.
            This control has several properties that influence how the date and the time are displayed.
            The <see cref="P:Philips.Platform.Presentation.Controls.Clock.ClockType"/> property can be used to determine whether the clock should
            display the date and the time, or only the date, or only the time, or whether it should
            alternate between showing date and time. The <see cref="P:Philips.Platform.Presentation.Controls.Clock.ShowsSeconds"/> property can be
            used to determine whether the clock should display hours, minutes, and seconds, or whether
            it should only display hours and minutes. If the clock displays seconds, the display will
            be updated every second; if the clock does not display seconds, the display will be updated
            every minute. The <see cref="M:Philips.Platform.Presentation.Controls.CultureBehavior.SetUseHarmonizedCulture(System.Windows.DependencyObject,System.Boolean)"/> function can used
            to determine whether the clock should display the date and the time using the harmonized
            format as defined by the UICC, which means that the date format is always "dd-MMM-yyyy" (at
            least for Western cultures), and the time format always uses the 24-hour clock. By setting
            this property to <see langword="false"/>, the clock ignores the harmonized date and time
            formatting, and uses the formats associated with the local or operating system culture
            instead.
            </para>
            <para>
            The clock has the option to show an icon of a clock together with the date and the time.
            This icon is just a visual representation to cue the end user in on the fact that he or
            she is looking at a clock on the screen, rather than something else. Whether or not the
            clock shows this icon is configurable via the <see cref="P:Philips.Platform.Presentation.Controls.Clock.ShowsClockIcon"/> dependency
            property.
            </para>
            <para>
            The <c>Clock</c> class does not make any assumptions about the way it is visualized. This
            custom control can be visualized as a digital clock or as an analog clock.
            </para>
            </remarks>
            <example>
            <para>
            The following example shows how the <see cref="T:Philips.Platform.Presentation.Controls.Clock"/> can be used. In this example, the
            clock is used as it comes "out of the box". This means that it will display both the date
            and the time, and it will display the time in hours, minutes, and seconds.
            <code lang="xaml">
            <![CDATA[
            <ptc:Clock />
            ]]>
            </code>
            </para>
            <para>
            The following example shows how the <see cref="T:Philips.Platform.Presentation.Controls.Clock"/> can be used in a different way.
            In this example, the clock will alternate between showing the date and the time; it
            will display the time in hours and minutes (no seconds); and it will use the local or
            operating system time format instead of the harmonized time format. Finally, this clock
            will show a clock icon along with the date and the time.
            <code lang="xaml">
            <![CDATA[
            <ptc:Clock
                ClockType="Alternating"
                Orientation="Horizontal"
                ShowsClockIcon="True"
                ShowsSeconds="False"
                UsesHarmonizedCulture="False"/>
            ]]>
            </code>
            </para>
            </example>
            <seealso cref="T:System.Windows.Controls.Control">Control Class</seealso>
            <seealso cref="P:Philips.Platform.Presentation.Controls.Clock.DateTime">DateTime Structure</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Clock.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Clock.DateTimeProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Clock.DateTime"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Clock.ClockTypeProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Clock.ClockType"/> dependency property.
            </summary>
            <remarks>
            <para>
            This property can be used to determine whether clock displays date and time
            (the default), date only, time only, or alternates between showing date and time.
            </para>
            <para>
            The default value of this property is
            <see cref="F:Philips.Platform.Presentation.Controls.ClockType.DateAndTime">DateAndTime</see>.
            </para>
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Clock.ClockIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Clock.ClockIcon"/> property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Clock.ShowsClockIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Clock.ShowsClockIcon"/> property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>, i.e.,
            by default the clock does not display an icon.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Clock.ShowsSecondsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Clock.ShowsSeconds"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>, i.e.,
            by default the clock displays hours, minutes, and seconds.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Clock.OrientationProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Clock.Orientation"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Clock.OnInitialized(System.EventArgs)">
            <summary>
            Updates the date and time, and initializes and starts the timer.
            </summary>
            <remarks>
            We override this method instead of handling the
            <see cref="E:System.Windows.FrameworkElement.Loaded">Loaded</see> event, because this method is called
            exactly once. The <c>Loaded</c> event is raised every time the clock needs to be loaded
            to be displayed on the screen.
            </remarks>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Clock.OnTimerTick(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Threading.DispatcherTimer.Tick"/> event.
            </summary>
            <remarks>
            This method updates the date and time, and updates the timer interval.
            </remarks>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Clock.UpdateTimerInterval(System.DateTime,System.Boolean)">
            <summary>
            This method updates the timer interval so that the <see cref="T:Philips.Platform.Presentation.Controls.Clock"/> doesn't show
            glitches and hiccups. This way, the accuracy of the clock is better.
            </summary>
            <param name="currentDateTime">The current date and time.</param>
            <param name="showsSeconds">Flag indicating whether the clock should display
            seconds.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Clock.UpdateDateTime(System.DateTime)">
            <summary>
            Updates the date and time that are displayed by the clock.
            </summary>
            <param name="currentDateTime">The current date and time.</param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Clock.DateTime">
            <summary>
            Gets or sets the (current) date and time of the clock.
            </summary>
            <remarks>
            The value of this property will be updated automatically. The update frequency depends
            on the value of the <see cref="P:Philips.Platform.Presentation.Controls.Clock.ShowsSeconds"/> property. If the clock must display the
            time in hours, minutes, and seconds, then the value of this property is updated every
            second; if the clock must display the time in hours and minutes, then the value of this
            property is updated every minute.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Clock.ClockType">
            <summary>
            Gets or sets the type of the <see cref="T:Philips.Platform.Presentation.Controls.Clock"/>.
            </summary>
            <remarks>
            <para>
            This property can be used to determine whether clock displays date and time
            (the default), date only, time only, or alternates between showing date and time.
            </para>
            <para>
            The default value of this property is
            <see cref="F:Philips.Platform.Presentation.Controls.ClockType.DateAndTime">DateAndTime</see>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Clock.ClockIcon">
            <summary>
            Gets or sets the clock icon.
            </summary>
            <remarks>
            <para>
            The actual clock icon that is shown is determined by the <see cref="P:Philips.Platform.Presentation.Controls.Clock.ClockIcon"/>
            property. Different clock icons are available depending on the context of use of the
            clock - for example, a clock that is hosted on an application's sidebar has a different
            clock icon than a clock that is hosted in an application's status bar.
            </para>
            <para>
            The clock icon will only be shown if the value <see cref="P:Philips.Platform.Presentation.Controls.Clock.ShowsClockIcon"/> is
            <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Clock.ShowsClockIcon">
            <summary>
            Gets or sets whether the clock should display an iconic representation of the fact
            that the user is looking at a clock.
            </summary>
            <remarks>
            <para>
            The actual clock icon that is shown is determined by the <see cref="P:Philips.Platform.Presentation.Controls.Clock.ClockIcon"/>
            property. Different clock icons are available depending on the context of use of the
            clock - for example, a clock that is hosted on an application's sidebar has a different
            clock icon than a clock that is hosted in an application's status bar.
            </para>
            <para>
            The default value of this property is <see langword="false"/>, i.e.,
            by default the clock does not display an icon.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Clock.ShowsSeconds">
            <summary>
            Gets or sets whether the clock should display hours, minutes, and seconds, or whether
            it should only display hours and minutes.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>, i.e.,
            by default the clock displays hours, minutes, and seconds.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Clock.Orientation">
            <summary>
            Gets or sets whether the clock should be displayed horizontally or vertically.
            </summary>
            <remarks>
            Horizontal orientation means that date and time are displayed next to each other and 
            a vertical orientation means that date and time are displayed one above the other.
            The default value of this property is <see Orientation="Vertical"/>
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ClockType">
            <summary>
            Enumeration defining the various clock types.
            </summary>
            <remarks>
            The <see cref="T:Philips.Platform.Presentation.Controls.Clock"/> control can be configured to display either the date and the time,
            or only the date, or only the time, or it can alternate between showing the date and the
            time. This enumeration captures all those options.
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.Clock">Clock Class</seealso>
            <seealso cref="T:System.DateTime">DateTime Structure</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ClockType.TimeOnly">
            <summary>
            Clock which only shows the time.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ClockType.DateOnly">
            <summary>
            Clock which only shows the date.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ClockType.DateAndTime">
            <summary>
            Clock which shows both the date and the time.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ClockType.Alternating">
            <summary>
            Clock which alternately shows date or time.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ColorCanvas">
            <summary>
            Custom color canvas control.
            </summary>
            <seealso cref="T:System.Windows.Media.Color">Color Structure</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ColorPicker">ColorPicker Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ColorSpectrumSlider">ColorSpectrumSlider Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.HsvColor">HsvColor Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorCanvas.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorCanvas.SelectedColorProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorCanvas.SelectedColor"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see cref="P:System.Windows.Media.Colors.Black"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorCanvas.OnSelectedColorChanged(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.ColorCanvas.SelectedColor"/> property.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorCanvas.AlphaProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorCanvas.Alpha"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is 255.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorCanvas.OnAlphaChanged(System.Byte,System.Byte)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.ColorCanvas.Alpha"/> property.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorCanvas.RedProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorCanvas.Red"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is 0.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorCanvas.OnRedChanged(System.Byte,System.Byte)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.ColorCanvas.Red"/> property.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorCanvas.GreenProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorCanvas.Green"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is 0.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorCanvas.OnGreenChanged(System.Byte,System.Byte)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.ColorCanvas.Green"/> property
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorCanvas.BlueProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorCanvas.Blue"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is 0.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorCanvas.OnBlueChanged(System.Byte,System.Byte)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.ColorCanvas.Blue"/> property.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorCanvas.HexadecimalStringProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorCanvas.HexadecimalString"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is "#FFFFFFFF".
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorCanvas.OnHexadecimalStringChanged(System.String,System.String)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.ColorCanvas.HexadecimalString"/> property.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorCanvas.HasHexadecimalTextBoxProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorCanvas.HasHexadecimalTextBox"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorCanvas.UsingAlphaChannelProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorCanvas.UsingAlphaChannel"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorCanvas.OnUsingAlphaChannelChanged">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.ColorCanvas.UsingAlphaChannel"/> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorCanvas.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorCanvas.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.KeyDown"/> event.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorCanvas.OnSpectrumSliderValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Handles changes to the value of the color spectrum slider.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorCanvas.OnHexadecimalTextBoxLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.LostFocus"/> event on the hexadecimal textbox.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorCanvas.SelectedColorChangedEvent">
            <summary>
            Custom routed event registration for the <see cref="E:Philips.Platform.Presentation.Controls.ColorCanvas.SelectedColorChanged"/> event.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorCanvas.UpdateSelectedColor">
            <summary>
            Updates the selected color.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorCanvas.UpdateSelectedColor(System.Windows.Media.Color)">
            <summary>
            Updates the selected color to the specified color.
            </summary>
            <param name="color">The color to update the selected color with.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorCanvas.UpdateRgbValues(System.Windows.Media.Color)">
            <summary>
            Updates the ARGB values to those of the specified color.
            </summary>
            <param name="color">The color to update the selected color with.</param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorCanvas.SelectedColor">
            <summary>
            Gets or sets the selected color.
            </summary>
            <remarks>
            The default value of this property is <see cref="P:System.Windows.Media.Colors.Black"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorCanvas.Alpha">
            <summary>
            Gets or sets the "Alpha" component of the selected color.
            </summary>
            <remarks>
            The default value of this property is 255.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorCanvas.Red">
            <summary>
            Gets or sets the "Red" component of the selected color.
            </summary>
            <remarks>
            The default value of this property is 0.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorCanvas.Green">
            <summary>
            Gets or sets the "Green" component of the selected color.
            </summary>
            <remarks>
            The default value of this property is 0.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorCanvas.Blue">
            <summary>
            Gets or sets the "Blue" component of the selected color.
            </summary>
            <remarks>
            The default value of this property is 0.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorCanvas.HexadecimalString">
            <summary>
            Gets or sets the hexadecimal string representing the selected color.
            </summary>
            <remarks>
            The default value of this property is "#FFFFFFFF".
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorCanvas.HasHexadecimalTextBox">
            <summary>
            Gets or sets whether the branding screen dialog has a <b>Close</b> button.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorCanvas.UsingAlphaChannel">
            <summary>
            Gets or sets whether the Alpha channel should be used.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="E:Philips.Platform.Presentation.Controls.ColorCanvas.SelectedColorChanged">
            <summary>
            Routed event that is raised when the <see cref="P:Philips.Platform.Presentation.Controls.ColorCanvas.SelectedColor"/> property is changed.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ColorItem">
            <summary>
            Represents a color item that is used in the <see cref="T:Philips.Platform.Presentation.Controls.ColorPicker"/>.
            </summary>
            <remarks>
            A color item consists of a <see cref="P:Philips.Platform.Presentation.Controls.ColorItem.Color"/> and a color name.
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ColorPicker">ColorPicker Class</seealso>
            <seealso cref="P:Philips.Platform.Presentation.Controls.ColorItem.Color">Color Struct</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorItem.#ctor(System.String,System.Windows.Media.Color,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="key">The (unique) color key.</param>
            <param name="color">The color.</param>
            <param name="name">The human readable color name.</param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorItem.Key">
            <summary>
            Gets or sets the (unique) color key;
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorItem.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorItem.Name">
            <summary>
            Gets or sets the human readable color name.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ColorPicker">
            <summary>
            Custom color picker control.
            </summary>
            <remarks>
            <para>
            This custom color picker control allows the user to pick a color. The color picker offers
            two different ways of doing this. First, the color picker allows the user to pick a color
            from several sets of predefined colors. These are called the <b>Available Colors</b>,
            the <b>Standard Colors</b>, and the <b>Recent Colors</b>.
            </para>
            <para>
            The Available Colors are, by default, equal to the set of Experience Identity annotation
            colors. You can set the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.UsesExperienceIdentityColors"/> to <see langword="true"/>
            to let the available colors be equal to the broader range of Experience Identity colors
            (which excludes semantic colors such as the annotation colors and the notification colors).
            Finally, application builders can provide their own set of available colors if they wish.
            </para>
            <para>
            The Standard Colors are, by default, equal to a small subset of the entire spectrum of
            Experience Identity annotation colors known as the <b>Safe Annotation Colors</b>. These
            colors have been carefully selected, and tested, to be distinguishable by color-sensitive
            users.
            </para>
            <para>
            Finally, the Recent Colors are a small number of colors that have recently been picked by
            the user. The maximum number of recent colors that the color picker remembers can be
            configured through the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.MaxRecentColors"/> property.
            </para>
            <para>
            The color picker also allows the user to pick a custom color. It uses the
            <see cref="T:Philips.Platform.Presentation.Controls.ColorCanvas"/> to implement the picking of random colors.
            </para>
            <para>
            This color picker control is based on the one from the Extended WPF Toolkit, see
            <see href="http://wpftoolkit.codeplex.com/wikipage?title=ColorPicker"/>.
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Media.Color">Color Structure</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ColorCanvas">ColorCanvas Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ColorSpectrumSlider">ColorSpectrumSlider Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.HsvColor">HsvColor Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.AnnotationColors">AnnotationColors Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.annotationColors">
            <summary>
            The collection of annotation colors.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.experienceIdentityColors">
            <summary>
            The collection of Experience Identity colors.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.DefaultSelectedColor">
            <summary>
            The default selected color.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPicker.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPicker.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.AvailableColorsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.AvailableColors"/> dependency property.
            </summary>
            <remarks>
            By default, the available colors will be the set of known annotation colors,
            as defined by the <see cref="T:Philips.Platform.Presentation.AnnotationColors"/> class.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.AvailableColorsHeaderProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.AvailableColorsHeader"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the localizable string "Available Colors",
            as defined by <see cref="P:Philips.Platform.Presentation.TextResources.AvailableColors"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.ColorSwatchHeightProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.ColorSwatchHeight"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is 0.0. Giving this property a decent value is
            the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.ColorSwatchWidthProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.ColorSwatchWidth"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is 0.0. Giving this property a decent value is
            the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.ColumnsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.Columns"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.HasCustomModeProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.HasCustomMode"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.HasHexadecimalTextBoxProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.HasHexadecimalTextBox"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.IsOpenProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.IsOpen"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.MaxRecentColorsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.MaxRecentColors"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is 10.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.RecentColorsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.RecentColors"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.RecentColorsHeaderProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.RecentColorsHeader"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the localizable string "Recent Colors",
            as defined by <see cref="P:Philips.Platform.Presentation.TextResources.RecentColors"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.SelectedColorProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.SelectedColor"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see cref="P:System.Windows.Media.Colors.Black"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.SelectedColorTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.SelectedColorText"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the localizable string "Black",
            as defined by <see cref="P:Philips.Platform.Presentation.TextResources.ColorBlack"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.ShowAvailableColorsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.ShowAvailableColors"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.ShowRecentColorsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.ShowRecentColors"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.ShowStandardColorsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.ShowStandardColors"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.ShowDropDownButtonProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.ShowDropDownButton"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.StandardColorsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.StandardColors"/> dependency property.
            </summary>
            <remarks>
            By default, the standard colors will be the set of known safe annotation colors,
            which is a subset of the annotation colors as defined by the
            <see cref="T:Philips.Platform.Presentation.AnnotationColors"/> class.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.StandardColorsHeaderProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.StandardColorsHeader"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the localizable string "Standard Colors",
            as defined by <see cref="P:Philips.Platform.Presentation.TextResources.StandardColors"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.UsesExperienceIdentityColorsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.UsesExperienceIdentityColors"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPicker.OnUsesExperienceIdentityColorsChanged">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.UsesExperienceIdentityColors"/> property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.UsingAlphaChannelProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.UsingAlphaChannel"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPicker.OnUsingAlphaChannelChanged">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.UsingAlphaChannel"/> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPicker.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPicker.OnKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.KeyDown"/> event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorPicker.SelectedColorChangedEvent">
            <summary>
            Custom routed event registration for the <see cref="E:Philips.Platform.Presentation.Controls.ColorPicker.SelectedColorChanged"/> event.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPicker.OnApplyTemplate(System.Windows.Controls.ListBox,System.String)">
            <summary>
            Called when the template is applied. Handles applying of the template for one of
            the colors list boxes, each of which is related to a template part.
            </summary>
            <param name="listBox">The colors list box.</param>
            <param name="templateChildName">The name of the template part.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPicker.CreateAvailableColors">
            <summary>
            Creates the available colors.
            </summary>
            <returns>
            By default, the available colors are equal to the Annotation Colors.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPicker.CreateStandardColors">
            <summary>
            Creates the standard colors.
            </summary>
            <remarks>
            By default, the standard colors are equal to the so-called Safe Annotation Colors,
            which is the subset of Annotation Colors that are suitable for color-sensitive users.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPicker.CreateRecentColors">
            <summary>
            Creates the collection of recent colors.
            </summary>
            <returns>
            By default, the recent colors are an empty collection.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPicker.CreateAnnotationColors">
            <summary>
            Creates the collection of annotation colors.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPicker.CreateSafeAnnotationColors">
            <summary>
            Creates the collection of safe annotation colors.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorPicker.CreateExperienceIdentityColors">
            <summary>
            Creates the collection of Experience Identity colors.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.AvailableColors">
            <summary>
            Gets or sets the available colors.
            </summary>
            <remarks>
            By default, the available colors will be the set of known annotation colors,
            as defined by the <see cref="T:Philips.Platform.Presentation.AnnotationColors"/> class.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.AvailableColorsHeader">
            <summary>
            Gets or sets the header for the "Available Colors" section of the <c>ColorPicker</c>.
            </summary>
            <remarks>
            The default value of this property is the localizable string "Available Colors",
            as defined by <see cref="P:Philips.Platform.Presentation.TextResources.AvailableColors"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.ColorSwatchHeight">
            <summary>
            Gets or sets the height of color swatches in the various color palette displays.
            </summary>
            <remarks>
            The default value of this property is 0.0. Giving this property a decent value is
            the responsibility of the style.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.ColorSwatchWidth">
            <summary>
            Gets or sets the width of color swatches in the various color palette displays.
            </summary>
            <remarks>
            The default value of this property is 0.0. Giving this property a decent value is
            the responsibility of the style.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.Columns">
            <summary>
            Gets or sets the number of columns used to display the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.AvailableColors"/>,
            the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.StandardColors"/>, and the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.RecentColors"/>.
            </summary>
            <remarks>
            <para>
            This property does not have a default value. Giving this property a decent value is
            the responsibility of the style.
            </para>
            <para>
            This property is similar to the <see cref="P:System.Windows.Controls.Primitives.UniformGrid.Columns"/> property.
            </para> 
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.HasCustomMode">
            <summary>
            Gets or sets whether color picker has a "Custom" mode.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.HasHexadecimalTextBox">
            <summary>
            Gets or sets whether the branding screen dialog has a <b>Close</b> button.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.IsOpen">
            <summary>
            Gets or sets whether that part of the <c>ColorPicker</c> where the user can
            actually select a color is open or not.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.MaxRecentColors">
            <summary>
            Gets or sets the maximum number of recent colors that are remembered.
            </summary>
            <remarks>
            The default value of this property is 10.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.RecentColors">
            <summary>
            Gets the recent (or recently used) colors.
            </summary>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.RecentColorsHeader">
            <summary>
            Gets or sets the header for the "Recent Colors" section of the <c>ColorPicker</c>.
            </summary>
            <remarks>
            The default value of this property is the localizable string "Recent Colors",
            as defined by <see cref="P:Philips.Platform.Presentation.TextResources.RecentColors"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.SelectedColor">
            <summary>
            Gets or sets the selected color.
            </summary>
            <remarks>
            The default value of this property is <see cref="P:System.Windows.Media.Colors.Black"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.SelectedColorText">
            <summary>
            Gets or sets the selected color text.
            </summary>
            <remarks>
            The default value of this property is the localizable string "Black",
            as defined by <see cref="P:Philips.Platform.Presentation.TextResources.ColorBlack"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.ShowAvailableColors">
            <summary>
            Gets or sets whether the available colors are shown.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.ShowRecentColors">
            <summary>
            Gets or sets whether the recent colors are shown.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.ShowStandardColors">
            <summary>
            Gets or sets whether the standard colors are shown.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.ShowDropDownButton">
            <summary>
            Gets or sets whether the UI element that gives access to the color picker
            functionality shows a drop down button.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.StandardColors">
            <summary>
            Gets or sets the standard colors.
            </summary>
            <remarks>
            By default, the standard colors will be the set of known safe annotation colors,
            which is a subset of the annotation colors as defined by the
            <see cref="T:Philips.Platform.Presentation.AnnotationColors"/> class.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.StandardColorsHeader">
            <summary>
            Gets or sets the header for the "Standard Colors" section of the <c>ColorPicker</c>.
            </summary>
            <remarks>
            The default value of this property is the localizable string "Standard Colors",
            as defined by <see cref="P:Philips.Platform.Presentation.TextResources.StandardColors"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.UsesExperienceIdentityColors">
            <summary>
            Gets or sets whether the color picker fills its <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.AvailableColors"/> with
            Experience Identity colors, or with Annotation colors.
            </summary>
            <remarks>
            <para>
            By default, the color picker fills its <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.AvailableColors"/> with the collection
            of known annotation colors. If you want the color picker to fill its use the broader
            range of Experience Identity colors, you can set the value of this property to
            <see langword="true"/>.
            </para>
            <para>
            The default value of this property is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorPicker.UsingAlphaChannel">
            <summary>
            Gets or sets whether the Alpha channel should be used.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="E:Philips.Platform.Presentation.Controls.ColorPicker.SelectedColorChanged">
            <summary>
            Routed event that is raised when the <see cref="P:Philips.Platform.Presentation.Controls.ColorPicker.SelectedColor"/> property is changed.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ColorSpectrumSlider">
            <summary>
            Custom control that can be used as a color spectrum slider.
            </summary>
            <seealso cref="T:System.Windows.Media.Color">Color Structure</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ColorCanvas">ColorCanvas Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ColorPicker">ColorPicker Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.HsvColor">HsvColor Class</seealso>
            <seealso cref="T:System.Windows.Controls.Slider">Slider Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorSpectrumSlider.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorSpectrumSlider.SelectedColorProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorSpectrumSlider.SelectedColor"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see cref="P:System.Windows.Media.Colors.Transparent"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorSpectrumSlider.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorSpectrumSlider.OnValueChanged(System.Double,System.Double)">
            <summary>
            Handles changes to the value of the color spectrum slider.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorSpectrumSlider.CreateColorSpectrum">
            <summary>
            Creates the HSV color spectrum.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorSpectrumSlider.SelectedColor">
            <summary>
            Gets or sets the selected color.
            </summary>
            <remarks>
            The default value of this property is <see cref="P:System.Windows.Media.Colors.Transparent"/>.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ColorSwatch">
            <summary>
            Custom control that represents a unicolor color swatch.
            </summary>
            <remarks>
            <para>
            A color swatch is a small rectangular area that has one single color. Typically,
            a color swatch is used to indicate the color of an element that is shown elsewhere
            on the screen, such as a blood vessel or a segmentation result. The color swatch then
            serves as a legend for the end user to interpret the colored structures or areas he or
            she sees on the screen.
            </para>
            <para>
            The <c>ColorSwatch</c> class exposes a  number of basic properties to get and set the
            <see cref="P:Philips.Platform.Presentation.Controls.ColorSwatch.Color"/>, the <see cref="P:Philips.Platform.Presentation.Controls.ColorSwatch.ColorSwatchBorderColor"/>,
            the <see cref="P:Philips.Platform.Presentation.Controls.ColorSwatch.ColorSwatchWidth"/>, and the <see cref="P:Philips.Platform.Presentation.Controls.ColorSwatch.ColorSwatchHeight"/> of the color
            swatch. Typically, the border color, the width, and the height are set by the color swatch
            style, while the color itself is determined by the application.
            </para>
            <para>
            A color swatch can be editable, allowing the user to select a color by interacting with
            the color swatch. For example, the user can select his or her favorite color for the
            various segmentation results in this way. The ability to edit the color swatch's color
            is determined by the value of the <see cref="P:Philips.Platform.Presentation.Controls.ColorSwatch.IsEditable"/> property. 
            </para>
            <example>
            The following example shows how to define a <see cref="T:Philips.Platform.Presentation.Controls.ColorSwatch"/> that is editable,
            and has its initial color set to <see cref="P:System.Windows.Media.Colors.Red"/>, and its border color to
            <see cref="P:System.Windows.Media.Colors.Black"/>.
            <code lang="csharp">
            <![CDATA[
            <pt:ColorSwatch x:Name="colorSwatch"
                Color="Red"
                ColorSwatchBorderColor="Black"
                Width="{DynamicResource ColorSwatchWidth}"
                Height="{DynamicResource ColorSwatchHeight}"
                IsEditable="True"/>
            ]]>
            </code>
            </example>
            </remarks>
            <seealso cref="T:System.Windows.Controls.Control">Control Class</seealso>
            <seealso cref="P:Philips.Platform.Presentation.Controls.ColorSwatch.Color">Color Struct</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ColorPickerDialog">ColorPickerDialog Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorSwatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorSwatch.#ctor(System.String,System.Windows.Media.Color,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="key">The (unique) color key.</param>
            <param name="color">The color.</param>
            <param name="name">The human readable color name.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorSwatch.ColorProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorSwatch.Color"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorSwatch.ColorNameProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorSwatch.ColorName"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorSwatch.ColorSwatchWidthProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorSwatch.ColorSwatchWidth"/> dependency property.
            </summary>
            <remarks>
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorSwatch.ColorSwatchHeightProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorSwatch.ColorSwatchHeight"/> dependency property.
            </summary>
            <remarks>
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorSwatch.ColorSwatchBorderProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorSwatch.ColorSwatchBorderColor"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see cref="P:System.Windows.Media.Colors.Black"/>
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ColorSwatch.IsEditableProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ColorSwatch.IsEditable"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorSwatch.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorSwatch.OnColorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.ColorSwatch.Color"/> property.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorSwatch.Key">
            <summary>
            Gets or sets the (unique) color key.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorSwatch.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorSwatch.ColorName">
            <summary>
            Gets or sets the name of the color.
            </summary>
            <remarks>
            The name of the color is typically displayed in a tooltip for the color swatch.
            It is the responsibility of the style to define such a tooltip, though.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorSwatch.ColorSwatchWidth">
            <summary>
            Gets or sets the width of the color swatch.
            </summary>
            <remarks>
            <para>
            Giving this property a decent value is the responsibility of the style.
            </para>
            <para>
            This property is called <c>ColorSwatchWidth</c> to distinguish it from
            the already existing <see cref="P:System.Windows.FrameworkElement.Width"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorSwatch.ColorSwatchHeight">
            <summary>
            Gets or sets the height of the color swatch.
            </summary>
            <remarks>
            <para>
            Giving this property a decent value is the responsibility of the style.
            </para>
            <para>
            This property is called <c>ColorSwatchWidth</c> to distinguish it from
            the already existing <see cref="P:System.Windows.FrameworkElement.Height"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorSwatch.ColorSwatchBorderColor">
            <summary>
            Gets or sets the color swatch border color.
            </summary>
            <remarks>
            <para>
            The default value of this property is <see cref="P:System.Windows.Media.Colors.Black"/>
            </para>
            <para>
            This property is called <c>ColorSwatchBorderColor</c> to distinguish it from
            the already existing <see cref="P:System.Windows.Controls.Control.BorderBrush"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ColorSwatch.IsEditable">
            <summary>
            Gets or sets whether the color swatch is editable.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.CropBox">
            <summary>
            A decorator that can crop its child at one of its sides.
            </summary>
            <remarks>
            The main usage of this control is in animations where the contents should gradually appear
            and disappear via a sliding movement.
            </remarks>
            <seealso cref="T:System.Windows.Controls.Decorator">Decorator Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.CropBox.CropFactorChangedEvent">
            <summary>
            Custom RoutedEvent registration for the <see cref="E:Philips.Platform.Presentation.Controls.CropBox.CropFactorChanged"/> event.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CropBox.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.CropBox.CropFactorProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.CropBox.CropFactor"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.CropBox.CropSideProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.CropBox.CropSide"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CropBox.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the crop box based on the values of <see cref="P:Philips.Platform.Presentation.Controls.CropBox.CropFactor"/> and
            <see cref="P:Philips.Platform.Presentation.Controls.CropBox.CropSide"/>.
            </summary>
            <param name="constraint">The maximum size that the method can return.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CropBox.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the child of the crop box taking the <see cref="P:Philips.Platform.Presentation.Controls.CropBox.CropFactor"/> 
            and the <see cref="P:Philips.Platform.Presentation.Controls.CropBox.CropSide"/> into account.
            </summary>
            <param name="finalSize">
            The size of the final area within the parent that this element should use to arrange 
            its child.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CropBox.OnCropFactorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.CropBox.CropFactor"/> property.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> on which the <see cref="P:Philips.Platform.Presentation.Controls.CropBox.CropFactor"/> was set.
            </param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/>.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CropBox.OnCropFactorChanged(System.Double,System.Double)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.CropBox.CropFactor"/> property.
            </summary>
            <param name="oldCropFactor">The old value of the <see cref="P:Philips.Platform.Presentation.Controls.CropBox.CropFactor"/>.</param>
            <param name="newCropFactor">The new value of the <see cref="P:Philips.Platform.Presentation.Controls.CropBox.CropFactor"/>.</param>
            <remarks>
            This event handler raises the <see cref="F:Philips.Platform.Presentation.Controls.CropBox.CropFactorChangedEvent"/> if the new
            <see cref="P:Philips.Platform.Presentation.Controls.CropBox.CropFactor"/> is 0 or 1 or if the new CropFactor is between 0 and 1 and the 
            old CropFactor is 0 or 1. This <see cref="T:System.Windows.RoutedEvent"/> can be handled by 
            the application to check if the contents of the <see cref="T:Philips.Platform.Presentation.Controls.CropBox"/> are fully 
            cropped or not cropped at all.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CropBox.CoerceCropFactor(System.Windows.DependencyObject,System.Object)">
            <summary>
            Provides a CoerceValueCallback for the <see cref="P:Philips.Platform.Presentation.Controls.CropBox.CropFactor"/> 
            to ensure that it is within its bounds.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CropBox.CalculateCropSize(System.Double,Philips.Platform.Presentation.Controls.Side,System.Windows.Size)">
            <summary>
            Calculates the cropped size based on the crop factor, crop side and available size.
            </summary>
            <param name="cropFactor">The crop factor.</param>
            <param name="cropSide">The crop side.</param>
            <param name="availableSize">The available size.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CropBox.CalculateCroppedArrangement(System.Double,Philips.Platform.Presentation.Controls.Side,System.Windows.Size,System.Windows.Size)">
            <summary>
            Calculates the arrangement for the cropped content.
            </summary>
            <param name="cropFactor">The crop factor.</param>
            <param name="cropSide">The crop side.</param>
            <param name="desiredContentSize">The desired size for the cropped content.</param>
            <param name="finalSize">
            The final area within the parent that this element should use to arrange itself
            and its children.
            </param>
        </member>
        <member name="E:Philips.Platform.Presentation.Controls.CropBox.CropFactorChanged">
            <summary>
            Adds or removes a handler for the <see cref="F:Philips.Platform.Presentation.Controls.CropBox.CropFactorChangedEvent"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.CropBox.CropFactor">
            <summary>
            Gets or sets the crop factor.
            </summary>
            <remarks>
            The crop factor should be in the range [0.0, 1.0]. A crop factor of 0.0 indicates
            that no cropping will be done.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.CropBox.CropSide">
            <summary>
            Gets or sets the side at which cropping takes places.
            </summary>
            <remarks>
            This property is often the opposite of the slide direction. For example, when an
            expander expands to the bottom, the <b>CropSide</b> will be <see cref="F:Philips.Platform.Presentation.Controls.Side.Top"/>.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.DataGridBridge">
            <summary>
            Serves as a <b>static bridge</b> or <b>relay</b> for the <see cref="T:System.Windows.Controls.DataGrid"/>.
            </summary>
            <remarks>
            <para>
            The Static Bridge, also called Relay, shares the property between Visual Tree elements
            and the elements that have been removed from the UI, due to source data changes.
            This class is intended to be used with the <see cref="T:System.Windows.Controls.DataGrid"/>. When the user deletes
            a row from a data grid, one or more binding errors may be produced for each of the data
            grid cells of this row. This is caused by the <see cref="T:System.Windows.Controls.DataGridCell"/> style, which
            binds to properties of the parent data grid. For example, in the data grid cell style,
            the <see cref="P:System.Windows.UIElement.Focusable"/> property may be bound to the
            <see cref="P:System.Windows.Controls.DataGrid.CanUserDeleteRows"/> of the data grid.
            Since the parent-child relation is destroyed by the removal of the data grid 
            row (and thus all the data grid cells), the binding produces an error. This binding error
            can be avoided by using this static bridge.
            </para>
            <para>
            This is a well-known WPF problem. See, for example, the following MSDN and Stack Overflow
            articles:
            <list type="bullet">
              <item>
                <see href="http://code.msdn.microsoft.com/windowsdesktop/WpfHowTo-Avoid-Binding-dcadde3a">Static Bridge: Avoid Binding Error - removing a DataGrid Row with RelativeSource</see>
              </item>
              <item>
                <see href="http://stackoverflow.com/questions/11474351/how-to-avoid-binding-error-when-parent-is-removed">How to avoid Binding Error when parent is removed</see>
              </item>
            </list>
            </para>
            <example>
            The following example shows how a <c>DataGridBridge</c> can be used to avoid binding errors
            when deleting a row from the data grid.
            <code lang="xaml">
            <![CDATA[
            <ResourceDictionary>
                <!-- Define a static resource for the DataGridBridge. -->
                <pt:DataGridBridge x:Key="DataGridBridge"/>
            </ResourceDictionary>
            <DataGrid x:Name="dataGrid"
                <!-- Bind the CanUserDeleteRows property to the DataGridBridge's property. -->
                CanUserDeleteRows="{Binding CanUserDeleteRows, Source={StaticResource DataGridBridge}}">
                <!-- The rest of the data grid definition. -->
                ...
            </DataGrid>
            ]]>
            </code>
            </example>
            </remarks>
            <seealso cref="T:System.Windows.FrameworkElement">FrameworkElement Class</seealso>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged">INotifyPropertyChanged Interface</seealso>
            <seealso cref="T:System.Windows.Controls.DataGrid">DataGrid Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridBridge.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Philips.Platform.Presentation.Controls.DataGridBridge"/> class.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridBridge.RaisePropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Philips.Platform.Presentation.Controls.DataGridBridge.PropertyChanged"/> event for the specified property.
            </summary>
            <param name="property">The property for which to raise the event.</param>
        </member>
        <member name="E:Philips.Platform.Presentation.Controls.DataGridBridge.PropertyChanged">
            <summary>
            Notifies clients that a property value has changed.
            </summary>
            <remarks>
            This event implements <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DataGridBridge.CanUserAddRows">
            <summary>
            Gets or sets whether the user can add rows to the data grid.
            </summary>
            <remarks>
            This property acts as a bridge for the <see cref="P:System.Windows.Controls.DataGrid.CanUserAddRows"/> property.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DataGridBridge.CanUserDeleteRows">
            <summary>
            Gets or sets whether the user can delete rows from the data grid.
            </summary>
            <remarks>
            This property acts as a bridge for the <see cref="P:System.Windows.Controls.DataGrid.CanUserDeleteRows"/>
            property.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.DataGridColorSwatchColumn">
            <summary>
            A custom <see cref="T:System.Windows.Controls.DataGridTemplateColumn"/> that hosts <see cref="T:Philips.Platform.Presentation.Controls.ColorSwatch"/> instances
            in its cells.
            </summary>
            <remarks>
            <para>
            This custom <c>DataGridTemplateColumn</c> is capable of hosting <see cref="T:Philips.Platform.Presentation.Controls.ColorSwatch"/>
            instances in its cells. The color swatches in the cells are editable. Clicking a color
            swatch will open a <see cref="T:Philips.Platform.Presentation.Controls.ColorPickerDialog"/> which can be used to pick a suitable
            color for the color swatch. Typically, this color will be related to the semantics of the
            color swatch; if, for example, the color swatch may correspond to the color of a particular
            anatomical feature shown in a viewer, or it may correspond to the color of a measurement,
            or it may correspond to the color of a line or a bar in a graph viewer.
            </para>
            <para>
            This custom column class uses the convention that it binds the value of the <c>Color</c>
            property of the data items that are displayed in its cells to the color of the color swatch.
            This is a convention, because there is no guarantee that the data items actually have a
            property by this name, or that it is the correct property to use for the color of the color
            swatch. Future versions of this control will hopefully handle this in a better way.
            </para>
            </remarks>
            <see cref="T:System.Windows.Controls.DataGridTemplateColumn">DataGridTemplateColumn Class</see>
            <see cref="T:Philips.Platform.Presentation.Controls.ColorSwatch">ColorSwatch Class</see>
            <see cref="T:Philips.Platform.Presentation.Controls.ColorPickerDialog">ColorPickerDialog Class</see>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DataGridColorSwatchColumn.ColorSwatchColorProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.DataGridColorSwatchColumn.ColorSwatchColor"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DataGridColorSwatchColumn.ColorSwatchBorderColorProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.DataGridColorSwatchColumn.ColorSwatchBorderColor"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see cref="P:System.Windows.Media.Colors.Black"/>
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DataGridColorSwatchColumn.ColorSwatchWidthProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.DataGridColorSwatchColumn.ColorSwatchWidth"/> dependency property.
            </summary>
            <remarks>
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DataGridColorSwatchColumn.ColorSwatchHeightProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.DataGridColorSwatchColumn.ColorSwatchHeight"/> dependency property.
            </summary>
            <remarks>
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DataGridColorSwatchColumn.IsEditableProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.DataGridColorSwatchColumn.IsEditable"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridColorSwatchColumn.GenerateElement(System.Windows.Controls.DataGridCell,System.Object)">
            <summary>
            Generates a <see cref="T:System.Windows.FrameworkElement"/> for the specified cell and data item.
            </summary>
            <param name="cell">The data grid cell for which to generate an element.</param>
            <param name="dataItem">The data item displayed in the data grid cell.</param>
            <returns><see cref="T:System.Windows.FrameworkElement"/>
            A framework element for the specified cell and data item. This is either a
            <see cref="T:Philips.Platform.Presentation.Controls.ColorSwatch"/> instance, or else <see langword="null"/> if it is
            not possible to generate a <c>ColorSwatch</c> instance.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridColorSwatchColumn.GenerateColorSwatch(System.Windows.Controls.DataGridCell,System.Object)">
            <summary>
            Generates a <see cref="T:Philips.Platform.Presentation.Controls.ColorSwatch"/> to be hosted in the specified cell.
            </summary>
            <param name="cell">The data grid cell that hosts the generated color swatch.</param>
            <param name="dataItem"></param>
            <returns>
            A <see cref="T:Philips.Platform.Presentation.Controls.ColorSwatch"/> to be hosted in the specified cell;
            or <see langword="null"/> if no proper color swatch can be generated.
            </returns>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DataGridColorSwatchColumn.ColorSwatchColor">
            <summary>
            Gets or sets the color of the <see cref="T:Philips.Platform.Presentation.Controls.ColorSwatch"/> instances hosted
            in the cells of this data grid column.
            </summary>
            <remarks>
            <para>
            Setting this property will set the color of the color swatches in <b>all</b>
            the cells of this column. Therefore, this property should be used with care.
            </para>
            <para>
            The default value of this property is <see cref="P:System.Windows.Media.Colors.White"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DataGridColorSwatchColumn.ColorSwatchBorderColor">
            <summary>
            Gets or sets the border color of the <see cref="T:Philips.Platform.Presentation.Controls.ColorSwatch"/> instances hosted
            in the cells of this data grid column.
            </summary>
            <remarks>
            <para>
            Setting this property will set the border color of the color swatches in <b>all</b>
            the cells of this column. Therefore, this property should be used with care.
            </para>
            <para>
            The default value of this property is <see cref="P:System.Windows.Media.Colors.Black"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DataGridColorSwatchColumn.ColorSwatchWidth">
            <summary>
            Gets or sets the width of the <see cref="T:Philips.Platform.Presentation.Controls.ColorSwatch"/> instances hosted
            in the cells of this data grid column.
            </summary>
            <remarks>
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DataGridColorSwatchColumn.ColorSwatchHeight">
            <summary>
            Gets or sets the height of the <see cref="T:Philips.Platform.Presentation.Controls.ColorSwatch"/> instances hosted
            in the cells of this data grid column.
            </summary>
            <remarks>
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DataGridColorSwatchColumn.IsEditable">
            <summary>
            Gets or sets the option whether the <see cref="T:Philips.Platform.Presentation.Controls.ColorSwatch"/> instances hosted
            in the cells of this data grid column are editable.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.DataGridExtension">
            <summary>
            Extends the functionality of the <see cref="T:System.Windows.Controls.DataGrid"/>, the <see cref="T:System.Windows.Controls.DataGridColumn"/>,
            and the <see cref="T:System.Windows.Controls.DataGridCell"/>.
            </summary>
            <remarks>
            <para>
            A feature that is missing from the standard WPF <see cref="T:System.Windows.Controls.DataGrid"/> is to give a fixed
            width to any <see cref="T:System.Windows.Controls.DataGridColumn"/>. The width of a data grid column can be set, but
            that usually does not prevent the user from changing the width interactively by grabbing
            the column header grippers. This extension class provides a feature to fix the width of
            a data grid column. This is made possible through the
            <see cref="F:Philips.Platform.Presentation.Controls.DataGridExtension.FixedWidthProperty">FixedWidth</see> attached dependency property.
            </para>
            <para>
            This extension class also offers a feature to retain visible row details after sorting a
            <see cref="T:System.Windows.Controls.DataGrid"/>. Without this feature, all the row details would be collapsed after
            sorting the <see cref="T:System.Windows.Controls.DataGrid"/>. To use this feature, set the value of the attached
            property <see cref="F:Philips.Platform.Presentation.Controls.DataGridExtension.RetainsVisibleRowDetailsAfterSortingProperty"/> to
            <see langword="true"/>.
            </para>
            <para>
            Furthermore, it is possible to freeze the <see cref="P:System.Windows.UIElement.Visibility"/> of the vertical
            scrollbar inside the <see cref="T:System.Windows.Controls.DataGrid"/> during the animation of the row details. To use
            this feature, set the value of the attached property
            <see cref="F:Philips.Platform.Presentation.Controls.DataGridExtension.FreezesScrollBarDuringRowDetailsAnimationProperty"/> to <see langword="true"/>.
            </para>
            <para>
            This class also offers a feature to handle mouse clicks on read-only data grid cells
            correctly. There is a known WPF problem with handling mouse clicks on read-only data grid
            cells in case multiple rows of a data grid are already selected. To use this feature, set
            the value of the attached property <see cref="F:Philips.Platform.Presentation.Controls.DataGridExtension.HandlesReadOnlyDataGridCellClicksProperty"/>
            on a <see cref="T:System.Windows.Controls.DataGridCell"/> to <see langword="true"/>.
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Controls.DataGrid">DataGrid Class</seealso>
            <seealso cref="T:System.Windows.Controls.DataGridColumn">DataGridColumn Class</seealso>
            <seealso cref="T:System.Windows.Controls.DataGridCell">DataGridCell Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DataGridExtension.visibleRowDetailsWhenSorting">
            <summary>
            List to cache the items for which the corresponding rows show their row details.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.GetFixedWidth(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Philips.Platform.Presentation.Controls.DataGridExtension.FixedWidthProperty"/> for the specified
            dependency object.
            </summary>
            <param name="dependencyObject">
            The dependency object. Typically, this is a <see cref="T:System.Windows.Controls.DataGridColumn"/>.
            </param>
            <returns>
            The value of the <see cref="F:Philips.Platform.Presentation.Controls.DataGridExtension.FixedWidthProperty"/> property for the specified
            dependency object.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.SetFixedWidth(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the value of the <see cref="F:Philips.Platform.Presentation.Controls.DataGridExtension.FixedWidthProperty"/> for the specified
            dependency object.
            </summary>
            <param name="dependencyObject">
            The dependency object. Typically, this is a <see cref="T:System.Windows.Controls.DataGridColumn"/>.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DataGridExtension.FixedWidthProperty">
            <summary>
            Identifies the <b>FixedWidth</b> dependency property.
            </summary>
            <remarks>
            This dependency property can be used to extend data grid elements with a fixed width.
            For example, a <see cref="T:System.Windows.Controls.DataGridColumn"/> can be given a fixed width, meaning that
            the data grid column's width is fixed to the specified value, and cannot be changed
            by the user, not even by 
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.GetHandlesReadOnlyDataGridCellClicks(System.Windows.DependencyObject)">
            <summary>
            Gets whether a <see cref="T:System.Windows.DependencyObject"/> handles mouse clicks on read-only data
            grid cells correctly.
            </summary>
            <param name="dependencyObject">
            The dependency object. Must be a <see cref="T:System.Windows.Controls.DataGridCell"/>.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.SetHandlesReadOnlyDataGridCellClicks(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether a <see cref="T:System.Windows.DependencyObject"/> handles mouse clicks on read-only data
            grid cells correctly.
            </summary>
            <param name="dependencyObject">
            The dependency object. Must be a <see cref="T:System.Windows.Controls.DataGridCell"/>.
            </param>
            <param name="value">The new value.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DataGridExtension.HandlesReadOnlyDataGridCellClicksProperty">
            <summary>
            Attached property defining whether a <see cref="T:System.Windows.DependencyObject"/> handles mouse clicks
            on read-only data grid cells correctly.
            </summary>
            <remarks>
            This property should be set on a <see cref="T:System.Windows.Controls.DataGridCell"/>. If set to
            <see langword="true"/>, the data grid cell will respond correctly to mouse clicks
            even if the data grid cell is read-only, and multiple rows of the data grid are
            selected. Failure to respond correctly to mouse clicks under these conditions is
            a known problem of the WPF data grid.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.GetRetainsVisibleRowDetailsAfterSorting(System.Windows.DependencyObject)">
            <summary>
            Gets the RetainsVisibleRowDetailsAfterSorting property value of a 
            <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the 
            RetainsVisibleRowDetailsAfterSortingProperty from.
            </param>
            <remarks>
            This property should be set on a <see cref="T:System.Windows.Controls.DataGrid"/>. If set to true, any visible
            row detail on a row will stay visible when the <see cref="T:System.Windows.Controls.DataGrid"/> is sorted.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.SetRetainsVisibleRowDetailsAfterSorting(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the RetainsVisibleRowDetailsAfterSorting property of a 
            <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the 
            RetainsVisibleRowDetailsAfterSortingProperty on.
            </param>
            <param name="value">The value to set.</param>
            <remarks>
            This property should be set on a <see cref="T:System.Windows.Controls.DataGrid"/>. If set to true, any visible
            row detail on a row will stay visible when the <see cref="T:System.Windows.Controls.DataGrid"/> is sorted.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DataGridExtension.RetainsVisibleRowDetailsAfterSortingProperty">
            <summary>
            Attached property for the RetainsVisibleRowDetailsAfterSorting property.
            </summary>
            <remarks>
            This property should be set on a <see cref="T:System.Windows.Controls.DataGrid"/>. If set to true, any visible
            row detail on a row will stay visible when the <see cref="T:System.Windows.Controls.DataGrid"/> is sorted.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.GetFreezesScrollBarDuringRowDetailsAnimation(System.Windows.DependencyObject)">
            <summary>
            Gets the FreezesScrollBarDuringRowDetailsAnimation property value of a 
            <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the 
            FreezesScrollBarDuringRowDetailsAnimationProperty from.
            </param>
            <remarks>
            This property should be set on a <see cref="T:System.Windows.Controls.DataGrid"/>. If set to true, the 
            <see cref="P:System.Windows.UIElement.Visibility"/> of the vertical scrollbar inside the
            <see cref="T:System.Windows.Controls.DataGrid"/> will be frozen during the animation of the row details.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.SetFreezesScrollBarDuringRowDetailsAnimation(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the FreezesScrollBarDuringRowDetailsAnimation property of a 
            <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the 
            FreezesScrollBarDuringRowDetailsAnimationProperty on.
            </param>
            <param name="value">The value to set.</param>
            <remarks>
            This property should be set on a <see cref="T:System.Windows.Controls.DataGrid"/>. If set to true, the 
            <see cref="P:System.Windows.UIElement.Visibility"/> of the vertical scrollbar inside the
            <see cref="T:System.Windows.Controls.DataGrid"/> will be frozen during the animation of the row details.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DataGridExtension.FreezesScrollBarDuringRowDetailsAnimationProperty">
            <summary>
            Attached property for the FreezesScrollBarDuringRowDetailsAnimation property.
            </summary>
            <remarks>
            This property should be set on a <see cref="T:System.Windows.Controls.DataGrid"/>. If set to true, the 
            <see cref="P:System.Windows.UIElement.Visibility"/> of the vertical scrollbar inside the
            <see cref="T:System.Windows.Controls.DataGrid"/> will be frozen during the animation of the row details.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.GetCanUserSelectRows(System.Windows.DependencyObject)">
            <summary>
            Gets whether the user can select rows in a <see cref="T:System.Windows.Controls.DataGrid"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the CanUserSelectRowsProperty from.
            </param>
            <remarks>
            This property should be set on a <see cref="T:System.Windows.Controls.DataGrid"/>. If set to 
            <see langword="true"/>, the user is able to select rows.
            The default value is <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.SetCanUserSelectRows(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether the user can select rows in a <see cref="T:System.Windows.Controls.DataGrid"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the CanUserSelectRowsProperty on.
            </param>
            <param name="value">The value to set.</param>
            <remarks>
            This property should be set on a <see cref="T:System.Windows.Controls.DataGrid"/>. If set to 
            <see langword="true"/>, the user is able to select rows.
            The default value is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DataGridExtension.CanUserSelectRowsProperty">
            <summary>
            Attached property for the CanUserSelectRows property.
            </summary>
            <remarks>
            This property should be set on a <see cref="T:System.Windows.Controls.DataGrid"/>. If set to 
            <see langword="true"/>, the user is able to select rows.
            The default value is <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.OnFixedWidthPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <b>FixedWidth</b> dependency property.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> on which the <b>FixedWidth</b> property has
            changed value.
            </param>
            <param name="e">
            Event data that is issued by any event that tracks changes to the effective
            value of the <b>FixedWidth</b> property.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.OnHandlesReadOnlyDataGridCellClicksChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="F:Philips.Platform.Presentation.Controls.DataGridExtension.HandlesReadOnlyDataGridCellClicksProperty"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.OnDataGridCellPreviewMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.PreviewMouseDown"/> event on the data grid cell.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.OnRetainsVisibleRowDetailsAfterSortingChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in the <see cref="F:Philips.Platform.Presentation.Controls.DataGridExtension.RetainsVisibleRowDetailsAfterSortingProperty"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.OnDataGridSorting(System.Object,System.Windows.Controls.DataGridSortingEventArgs)">
            <summary>
            Handles a change in sorting.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
            <remarks>
            This handler caches an item if its container currently shows its row details.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.OnDataGridLoadingRow(System.Object,System.Windows.Controls.DataGridRowEventArgs)">
            <summary>
            Initializes the DataGridRow when it is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
            <remarks>
            The <see cref="E:System.Windows.Controls.DataGrid.LoadingRow"/> event has to be handled, because otherwise, 
            the DetailsVisibility is set in the DataGrid code, to Visible. 
            Initially, the row details of a row should be collapsed.
            Setting it in the DataGridRowStyle does not solve this.
            The current exception is that when row details were visible before a column was 
            sorted, then this state has to be restored. While sorting, all rows are regenerated.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.OnFreezesScrollBarDuringRowDetailsAnimationChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in the <see cref="F:Philips.Platform.Presentation.Controls.DataGridExtension.RetainsVisibleRowDetailsAfterSortingProperty"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.OnCropFactorChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles changes in the <see cref="P:Philips.Platform.Presentation.Controls.CropBox.CropFactor"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.OnCanUserSelectRowsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in the CanUserSelectRows property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DataGridExtension.OnDataGridSelectionChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles changes in the selection of a <see cref="T:System.Windows.Controls.DataGrid"/>.
            </summary>
            <remarks>
            This method prevents that the selection on a data grid can be changed from within code, 
            if the CanUserSelectRows attached property on this data grid has been set to 
            <see langword="false"/>.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner">
            <summary>
            General purpose spinner control, which can be used to select a value from a specified
            collection of available values.
            </summary>
            <remarks>
            <para>
            This class represents a general purpose spinner control, which can be used to display
            and select a double value from a collection of predefined double values. This spinner only
            accepts values that are in the collection of predefined values, and will raise an exception
            if an attempt is made to assign it a value that is not in that collection.
            </para>
            <para>
            This class assumes that there is an increment ("+") and a decrement ("-") button provided
            by the applied style. The commands of these buttons are bound to the class commands
            <see cref="F:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.InternalIncreaseCommand"/> and <see cref="F:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.InternalDecreaseCommand"/>. The "+"
            button will set the spinner's value to the first value from the collection that is higher
            than the current value (if any); the "-" button will set the spinner's value to the first
            value from the collection that is lower than the current value (if any).
            </para>
            <para>
            This class allows the user to define the unit that is displayed alongside the value.
            For example, the user can set the unit to "mm" or "fps", or anything that suits the
            need of the application he or she is building. Also, this class allows the user to
            define the tooltips that are used for the spinner's increment and decrement buttons.
            By exposing these properties, the control itself remains agnostic to what exactly
            the value that it visualizes represents, while giving the maximum amount of freedom
            to the user to customize the control's visual appearance.
            </para>
            <para>
            A typical use case for this spinner is a frame rate control that allows the user to set
            the frame rate only to a set of predefined values.
            </para>
            </remarks>
            <example>
            The following example shows how a <c>DoubleCollectionSpinner</c> can be set up in XAML
            to represent a frame rate control, where the manipulated unit is "frames per second",
            and where the acceptable frame rates bound to a collection of frame rate values,
            and where the spinner's current value is set to 10 fps (we assume that this is one
            of the acceptable frame rate values).
            <code lang="xaml">
            <![CDATA[
            <ptc:DoubleCollectionSpinner
                Values="{Binding FrameRateValues}"
                Value="10.0"
                Unit="fps"
                IncreaseToolTip="Faster"
                DecreaseToolTip="Slower"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.Control">Control Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.DoubleSpinner">DoubleSpinner Class</seealso>
            <seealso cref="T:System.Collections.ObjectModel.ObservableCollection`1">ObservableCollection Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.InternalIncreaseCommand">
            <summary>
            Internal command for incrementing the spinner's value.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.InternalDecreaseCommand">
            <summary>
            Internal command for decrementing the spinner's value.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.ValueProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.Value"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.ValuesProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.Values"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.UnitProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.Unit"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.IncreaseToolTipProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.IncreaseToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.DecreaseToolTipProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.DecreaseToolTip"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.OnExecuteIncreaseCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executes the Increase command.
            </summary>
            <remarks>
            This method assumes that the Increase command can indeed be executed.
            </remarks>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.OnExecuteDecreaseCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executes the Decrease command.
            </summary>
            <remarks>
            This method assumes that the Decrease command can indeed be executed.
            </remarks>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.OnIncrease">
            <summary>
            Increases the value of the double collection spinner.
            </summary>
            <remarks>
            This method assumes that the value can indeed be increased.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.OnDecrease">
            <summary>
            Decreases the value of the double collection spinner.
            </summary>
            <remarks>
            This method assumes that the value can indeed be decreased.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.Value">
            <summary>
            Gets or sets the current value.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.ValueProperty">
            Dependency property associated with this property.
            </seealso>
            <exception cref="T:System.ArgumentException">
            Thrown when an attempt is made to set this property to a value that is not
            one of the accepted <see cref="P:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.Values"/> for this spinner.
            </exception>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.Values">
            <summary>
            Gets or sets the collection of values.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.ValuesProperty">
            The dependency property associated with this property.
            </seealso>
            <remarks>
            <para>
            The collection of values may not be <see langword="null"/>.
            If an attempt is made to set the collection of values to <see langword="null"/>,
            an <see cref="T:System.ArgumentNullException"/> is raised.
            </para>
            <para>
            The default value of this property is an empty <c>ObservableCollection</c>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when an attempt is made to set this property to <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.Unit">
            <summary>
            Gets or sets the text for the unit to be displayed.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.UnitProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is an empty string.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.IncreaseToolTip">
            <summary>
            Gets or sets the tooltip for the increase button.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.IncreaseToolTipProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is an empty string.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.DecreaseToolTip">
            <summary>
            Gets or sets the tooltip for the decrease button.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner.DecreaseToolTipProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is an empty string.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.DoubleSpinner">
            <summary>
            General purpose spinner control, which can be used to choose a value within a
            specific range.
            </summary>
            <remarks>
            <para>
            This class represents a general purpose spinner control, which can be used to display
            and select a double value. This class derives from <see cref="T:System.Windows.Controls.Primitives.RangeBase"/>, which means
            that the values that can be selected are limited to the range specified by the base
            class. The base class uses the properties <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"/> and
            <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum"/> to determine the range of selectable values.
            </para>
            <para>
            The <c>DoubleSpinner</c> expects various named template parts to be defined in its control
            template. These template parts are:
            <list type="bullet">
              <item>
                <term>PART_TextBox</term>
                <description>A <see cref="T:System.Windows.Controls.TextBox"/> that displays the current value of the double
                spinner. Can also be used as a value entry field is the <see cref="P:Philips.Platform.Presentation.Controls.DoubleSpinner.IsReadOnly"/>
                dependency property is set to <see langword="false"/>.
                </description>
              </item>
              <item>
                <term>PART_DecreaseButton</term>
                <description>A <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/> that can be used to decrease the value of the
                double spinner. Clicking this button will decrease the value by an amount specified
                by the <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange"/> property. Clicking this button will respect
                the value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"/> property, as well as the value of
                the <see cref="P:Philips.Platform.Presentation.Controls.DoubleSpinner.IsCyclic"/> property.
                </description>
              </item>
              <item>
                <term>PART_IncreaseButton</term>
                <description>A <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/> that can be used to increase the value of the
                double spinner. Clicking this button will increase the value by an amount specified
                by the <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange"/> property. Clicking this button will respect
                the value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"/> property, as well as the value of
                the <see cref="P:Philips.Platform.Presentation.Controls.DoubleSpinner.IsCyclic"/> property.
                </description>
              </item>
            </list>
            </para>
            <para>
            So, this class assumes that there an increase ("+") and a decrease ("-") button are provided
            by the applied style. The commands of these buttons are bound to the class commands
            <see cref="F:Philips.Platform.Presentation.Controls.DoubleSpinner.InternalIncreaseCommand"/> and <see cref="F:Philips.Platform.Presentation.Controls.DoubleSpinner.InternalDecreaseCommand"/>.
            </para>
            <para>
            This class allows the user to define the unit that is displayed alongside the value.
            For example, the user can set the unit to "mm" or "fps", or anything that suits the
            need of the application he or she is building. Also, this class allows the user to
            define the tooltips that are used for the spinner's increment and decrement buttons.
            By exposing these properties, the control itself remains agnostic to what exactly
            the value that it visualizes represents, while giving the maximum amount of freedom
            to the user to customize the control's visual appearance.
            </para>
            </remarks>
            <example>
            The following example shows how a <c>DoubleSpinner</c> can be set up in XAML to
            represent a frame rate control, where the manipulated unit is "frames per second",
            and where the acceptable frame rate ranges from 5 fps to 60 fps, and where the
            frame rate can be increased or decreased in steps of 0.5 fps:
            <code lang="xaml">
            <![CDATA[
            <ptc:DoubleSpinner
                Minimum="5"
                Maximum="60"
                SmallChange="0.5"
                Unit="fps"
                IncreaseToolTip="Faster"
                DecreaseToolTip="Slower"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.Primitives.RangeBase">RangeBase Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner">DoubleCollectionSpinner Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.Spinner">Spinner Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DoubleSpinner.textBox">
            <summary>
            Caches the internal text box that is used by this control.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DoubleSpinner.InternalIncreaseCommand">
            <summary>
            Internal command to increase the spinner's <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value">Value</see>.
            </summary>
            <remarks>
            This command is executed when the "PART_IncreaseButton" is clicked.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DoubleSpinner.InternalDecreaseCommand">
            <summary>
            Internal command to decrease the spinner's <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value">Value</see>.
            </summary>
            <remarks>
            This command is executed when the "PART_DecreaseButton" is clicked.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.#ctor">
            <summary>
            Initializes a new <see cref="T:Philips.Platform.Presentation.Controls.DoubleSpinner"/> instance.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DoubleSpinner.StringFormatProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.DoubleSpinner.StringFormat"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.OnStringFormatChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.DoubleSpinner.StringFormat"/> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.OnStringFormatChanged">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.DoubleSpinner.StringFormat"/> property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DoubleSpinner.FormattedValuePropertyKey">
            <summary>
            Dependency property key for the <see cref="P:Philips.Platform.Presentation.Controls.DoubleSpinner.FormattedValue"/> property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DoubleSpinner.FormattedValueProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.DoubleSpinner.FormattedValue"/> read only dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DoubleSpinner.IsReadOnlyProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.DoubleSpinner.IsReadOnly"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DoubleSpinner.IsValueDisplayedProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.DoubleSpinner.IsValueDisplayed"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DoubleSpinner.IsCyclicProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.DoubleSpinner.IsCyclic"/> dependency property.
            </summary>
            <para>
            By default, the value of this property is <see langword="true"/>.
            </para>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DoubleSpinner.UnitProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.DoubleSpinner.Unit"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DoubleSpinner.IncreaseToolTipProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.DoubleSpinner.IncreaseToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.DoubleSpinner.DecreaseToolTipProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.DoubleSpinner.DecreaseToolTip"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.OnValueChanged(System.Double,System.Double)">
            <summary>
            Handles a change in the value.
            </summary>
            <remarks>
            With this method, the <see cref="P:Philips.Platform.Presentation.Controls.DoubleSpinner.FormattedValue"/> is kept in sync with the
            <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value"/>.
            </remarks>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Overridden such that the double spinner only accepts numbers,
            action keys (Delete, Back, Tab, Return, Alt), one decimal separator, + and - keys.
            </summary>
            <param name="e">The keyboard event arguments</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.UpdateFormattedValue">
            <summary>
            Updates the formatted value.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.InitializeTextBinding(System.Windows.Controls.TextBox)">
            <summary>
            Creates a binding between the internal text box and the <see cref="P:Philips.Platform.Presentation.Controls.DoubleSpinner.FormattedValue"/>.
            </summary>
            <param name="textBox">The internal text box.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.InitializeEditableTextBinding(System.Windows.Controls.TextBox)">
            <summary>
            Creates a binding between the internal text box and the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value"/>.
            </summary>
            <param name="textBox">The internal text box.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.OnExecuteIncreaseCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executes the <see cref="F:Philips.Platform.Presentation.Controls.DoubleSpinner.InternalIncreaseCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.OnExecuteDecreaseCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executes the <see cref="F:Philips.Platform.Presentation.Controls.DoubleSpinner.InternalDecreaseCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.OnIncrease">
            <summary>
            Increases the current <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.OnDecrease">
            <summary>
            Decreases the current <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.OnCanExecuteIncreaseCommand(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether the <see cref="F:Philips.Platform.Presentation.Controls.DoubleSpinner.InternalIncreaseCommand"/> can execute.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.OnCanIncrease">
            <summary>
            Determines whether the <see cref="F:Philips.Platform.Presentation.Controls.DoubleSpinner.InternalIncreaseCommand"/> can execute.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.OnCanExecuteDecreaseCommand(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether the <see cref="F:Philips.Platform.Presentation.Controls.DoubleSpinner.InternalDecreaseCommand"/> can execute.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.OnCanDecrease">
            <summary>
            Determines whether the <see cref="F:Philips.Platform.Presentation.Controls.DoubleSpinner.InternalDecreaseCommand"/> can execute.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.MayCycle">
            <summary>
            Determines whether the <see cref="T:Philips.Platform.Presentation.Controls.DoubleSpinner"/> may cycle through its values.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.IsNumberKey(System.Windows.Input.Key)">
            <summary>
            Check if the key entered is a number
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.IsActionKey(System.Windows.Input.Key)">
            <summary>
            Check if the key entered is an action key
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.IsFirstDecimalSeparator(System.Windows.Input.Key)">
            <summary>
            Checks whether the given key is a decimal separator, and if so,
            whether it is the first such separator in the double spinner's input field.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.IsKeyPlusMinus(System.Windows.Input.Key)">
            <summary>
            Checks whether the given key is is either '+' or '-', and if so,
            whether it is the first such character in the double spinner's input field.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleSpinner.IsKeyPlusMinusAllowed(System.String,System.Int32,System.String)">
            <summary>
            Checks whether the input "+" or "-" is allowed in the current position.
            </summary>
            <param name="text">Content of the textbox</param>
            <param name="selectionStart">Indicates the starting index of the
            current selection in the textbox. If there is no selection then it
            is the index of the cursor in the textbox.</param>
            <param name="selectedText">Text selected in the text box</param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DoubleSpinner.StringFormat">
            <summary>
            Gets or sets the string format used to display the spinner's
            <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value">Value</see>.
            </summary>
            <remarks>
            <para>
            Any template that is used to style this spinner control should make sure that it applies
            this string format to the presentation of its value. Furthermore, it should make sure
            by applying the proper binding that the <see cref="P:Philips.Platform.Presentation.Controls.DoubleSpinner.FormattedValue"/> property returns
            the value with the proper string format applied to it.
            </para>
            <para>
            By default, the value of this property is "0.0", which means that the spinner's value
            is displayed with a precision of one decimal place.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DoubleSpinner.FormattedValue">
            <summary>
            Gets the formatted version of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value"/>, based on the
            <see cref="P:Philips.Platform.Presentation.Controls.DoubleSpinner.StringFormat"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DoubleSpinner.IsReadOnly">
            <summary>
            Gets or sets whether the value should be read only.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DoubleSpinner.IsValueDisplayed">
            <summary>
            Gets or sets whether the spinner's <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value">Value</see> should
            be displayed.
            </summary>
            <remarks>
            <para>
            This property can be used to create a spinner that does not display its current value.
            Such a spinner will only display an increase and a decrease button. Changes to the
            current value are not reflected directly in the user interface of the spinner, but
            might possibly lead to observable changes elsewhere in the user interface. This property
            is mainly used to create spinners that occupy a minimum amount of screen real estate,
            and for which it is completely clear to the user what will happen when he or she presses
            the increase or decrease button.
            </para>
            <para>
            By default, the value of this property is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DoubleSpinner.IsCyclic">
            <summary>
            Gets or sets whether this control can cycle through its values.
            </summary>
            <remarks>
            <para>
            Cycling means:
            <list type="bullet">
              <item>
                When the value is equal to the minimum value and the decrease button is pressed,
                the value will become the maximum value.
              </item>
              <item>
                When the value is equal to the maximum value and the increase button is pressed,
                the value will become the minimum value.
              </item>
            </list>
            </para>
            <para>
            By default, the value of this property is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DoubleSpinner.Unit">
            <summary>
            Gets or sets the text for the unit to be displayed.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.DoubleSpinner.UnitProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is an empty string.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DoubleSpinner.IncreaseToolTip">
            <summary>
            Gets or sets the tooltip for the increase button.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.DoubleSpinner.IncreaseToolTipProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is an empty string.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DoubleSpinner.DecreaseToolTip">
            <summary>
            Gets or sets the tooltip for the decrease button.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.DoubleSpinner.DecreaseToolTipProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is an empty string.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ExtendedCalendar">
            <summary>
            Custom <see cref="T:System.Windows.Controls.Calendar"/> that adds extra functionality to the standard 
            <see cref="T:System.Windows.Controls.Calendar"/>.
            </summary>
            <remarks>
            This control extends the <see cref="T:System.Windows.Controls.Calendar"/> by:
            <list type="bullet">
            <item>Preventing the calendar from capturing the mouse.</item>
            <item>
            Adding commands for selecting today, navigating to the previous month,
            navigating to the next month, navigating to the previous year and navigating to the 
            next year.
            </item>
            <item>
            An attached IsTodayButtonVisible property is added too. With this, a regular
            <see cref="T:System.Windows.Controls.Calendar"/>, a <see cref="T:Philips.Platform.Presentation.Controls.ExtendedCalendar"/> and a <see cref="T:System.Windows.Controls.DatePicker"/> can 
            all incorporate a Today button in their template. The reason that this property is an 
            attached property is that a <see cref="T:System.Windows.Controls.DatePicker"/> generates a regular Calendar in its 
            code. Adding functionality to this regular Calendar means exposing attached properties in 
            the ExtendedCalendar. For situations in which a normal calendar is necessary (instead 
            of a DatePicker), it is best to use the ExtendedCalendar.
            </item>
            <item>
            Adding functionality to add week numbers inside a <see cref="T:System.Windows.Controls.Calendar"/>. You can set the
            <c>AreWeekNumbersVisible</c> property on a <see cref="T:System.Windows.Controls.Calendar"/>, 
            a <see cref="T:Philips.Platform.Presentation.Controls.ExtendedCalendar"/> and a <see cref="T:System.Windows.Controls.DatePicker"/>. The <c>CalendarWeekRule</c> 
            property is used to control the way the first week of the year is determined. This 
            property can also be set on all three controls. Finally, the read-only 
            <c>WeekNumber</c> properties are used to get the week numbers of the current month.
            </item>
            </list>
            </remarks>
            <seealso cref="T:System.Windows.Controls.Calendar">Calendar Class</seealso>
            <seealso cref="T:System.Windows.Controls.DatePicker">DatePicker Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.SelectTodayCommand">
            <summary>
            Internal command to select today.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.PreviousMonthCommand">
            <summary>
            Internal command to navigate to the previous month.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.NextMonthCommand">
            <summary>
            Internal command to navigate to the next month.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.PreviousYearCommand">
            <summary>
            Internal command to navigate to the previous year.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.NextYearCommand">
            <summary>
            Internal command to navigate to the next year.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.GetIsTodayButtonVisible(System.Windows.DependencyObject)">
            <summary>
            Gets whether the today button in this calendar is visible or not.
            </summary>
            <remarks>
            Since the <seealso cref="T:System.Windows.Controls.Calendar"/> and the <seealso cref="T:Philips.Platform.Presentation.Controls.ExtendedCalendar"/>
            templates both have a <seealso cref="T:System.Windows.Controls.Primitives.CalendarItem"/> which uses one style, and since
            the <seealso cref="T:System.Windows.Controls.Primitives.CalendarItem"/> class is sealed, this has to be an attached 
            property. As such, it can be set on a <seealso cref="T:Philips.Platform.Presentation.Controls.ExtendedCalendar"/> and the
            <seealso cref="T:System.Windows.Controls.Calendar"/> can still use the same style for the 
            <seealso cref="T:System.Windows.Controls.Primitives.CalendarItem"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.SetIsTodayButtonVisible(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether the today button in this calendar is visible or not.
            </summary>
            <remarks>
            Since the <seealso cref="T:System.Windows.Controls.Calendar"/> and the <seealso cref="T:Philips.Platform.Presentation.Controls.ExtendedCalendar"/>
            templates both have a <seealso cref="T:System.Windows.Controls.Primitives.CalendarItem"/> which uses one style, and since
            the <seealso cref="T:System.Windows.Controls.Primitives.CalendarItem"/> class is sealed, this has to be an attached 
            property. As such, it can be set on a <seealso cref="T:Philips.Platform.Presentation.Controls.ExtendedCalendar"/> and the
            <seealso cref="T:System.Windows.Controls.Calendar"/> can still use the same style for the 
            <seealso cref="T:System.Windows.Controls.Primitives.CalendarItem"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.IsTodayButtonVisibleProperty">
            <summary>
            Attached property for the IsTodayButtonVisible property.
            </summary>
            <remarks>
            Since the <seealso cref="T:System.Windows.Controls.Calendar"/> and the <seealso cref="T:Philips.Platform.Presentation.Controls.ExtendedCalendar"/>
            templates both have a <seealso cref="T:System.Windows.Controls.Primitives.CalendarItem"/> which uses one style, and since
            the <seealso cref="T:System.Windows.Controls.Primitives.CalendarItem"/> class is sealed, this has to be an attached 
            property. As such, it can be set on a <seealso cref="T:Philips.Platform.Presentation.Controls.ExtendedCalendar"/> and the
            <seealso cref="T:System.Windows.Controls.Calendar"/> can still use the same style for the 
            <seealso cref="T:System.Windows.Controls.Primitives.CalendarItem"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.GetAreWeekNumbersVisible(System.Windows.DependencyObject)">
            <summary>
            Gets whether the week numbers in this calendar are visible or not.
            </summary>
            <remarks>
            Since the <seealso cref="T:System.Windows.Controls.Calendar"/> and the <seealso cref="T:Philips.Platform.Presentation.Controls.ExtendedCalendar"/>
            templates both have a <seealso cref="T:System.Windows.Controls.Primitives.CalendarItem"/> which uses one style, and since
            the <seealso cref="T:System.Windows.Controls.Primitives.CalendarItem"/> class is sealed, this has to be an attached 
            property. As such, it can be set on a <seealso cref="T:Philips.Platform.Presentation.Controls.ExtendedCalendar"/> and the
            <seealso cref="T:System.Windows.Controls.Calendar"/> can still use the same style for the 
            <seealso cref="T:System.Windows.Controls.Primitives.CalendarItem"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.SetAreWeekNumbersVisible(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether the week numbers in this calendar are visible or not.
            </summary>
            <remarks>
            Since the <seealso cref="T:System.Windows.Controls.Calendar"/> and the <seealso cref="T:Philips.Platform.Presentation.Controls.ExtendedCalendar"/>
            templates both have a <seealso cref="T:System.Windows.Controls.Primitives.CalendarItem"/> which uses one style, and since
            the <seealso cref="T:System.Windows.Controls.Primitives.CalendarItem"/> class is sealed, this has to be an attached 
            property. As such, it can be set on a <seealso cref="T:Philips.Platform.Presentation.Controls.ExtendedCalendar"/> and the
            <seealso cref="T:System.Windows.Controls.Calendar"/> can still use the same style for the 
            <seealso cref="T:System.Windows.Controls.Primitives.CalendarItem"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.AreWeekNumbersVisibleProperty">
            <summary>
            Attached property for the AreWeekNumbersVisible property.
            </summary>
            <remarks>
            Since the <seealso cref="T:System.Windows.Controls.Calendar"/> and the <seealso cref="T:Philips.Platform.Presentation.Controls.ExtendedCalendar"/>
            templates both have a <seealso cref="T:System.Windows.Controls.Primitives.CalendarItem"/> which uses one style, and since
            the <seealso cref="T:System.Windows.Controls.Primitives.CalendarItem"/> class is sealed, this has to be an attached 
            property. As such, it can be set on a <seealso cref="T:Philips.Platform.Presentation.Controls.ExtendedCalendar"/> and the
            <seealso cref="T:System.Windows.Controls.Calendar"/> can still use the same style for the 
            <seealso cref="T:System.Windows.Controls.Primitives.CalendarItem"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.GetCalendarWeekRule(System.Windows.DependencyObject)">
            <summary>
            Gets the <c>CalendarWeekRule</c> that is applied to the (internal) calendar.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.SetCalendarWeekRule(System.Windows.DependencyObject,System.Globalization.CalendarWeekRule)">
            <summary>
            Sets the <c>CalendarWeekRule</c> that is applied to the (internal) calendar. 
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.CalendarWeekRuleProperty">
            <summary>
            Attached property for the <c>CalendarWeekRule</c> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.GetFirstWeekNumber(System.Windows.DependencyObject)">
            <summary>
            Gets the current first week number in the month view.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.SetFirstWeekNumber(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets the current first week number in the month view.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.FirstWeekNumberPropertyKey">
            <summary>
            Attached property key for the <c>FirstWeekNumber</c> property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.FirstWeekNumberProperty">
            <summary>
            Read only attached property for the <c>FirstWeekNumber</c> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.GetSecondWeekNumber(System.Windows.DependencyObject)">
            <summary>
            Gets the current second week number in the month view.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.SetSecondWeekNumber(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets the current second week number in the month view.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.SecondWeekNumberPropertyKey">
            <summary>
            Attached property key for the <c>SecondWeekNumber</c> property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.SecondWeekNumberProperty">
            <summary>
            Read only attached property for the <c>SecondWeekNumber</c> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.GetThirdWeekNumber(System.Windows.DependencyObject)">
            <summary>
            Gets the current third week number in the month view.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.SetThirdWeekNumber(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets the current third week number in the month view.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.ThirdWeekNumberPropertyKey">
            <summary>
            Attached property key for the <c>ThirdWeekNumber</c> property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.ThirdWeekNumberProperty">
            <summary>
            Read only attached property for the <c>ThirdWeekNumber</c> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.GetFourthWeekNumber(System.Windows.DependencyObject)">
            <summary>
            Gets the current fourth week number in the month view.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.SetFourthWeekNumber(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets the current fourth week number in the month view.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.FourthWeekNumberPropertyKey">
            <summary>
            Attached property key for the <c>FourthWeekNumber</c> property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.FourthWeekNumberProperty">
            <summary>
            Read only attached property for the <c>FourthWeekNumber</c> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.GetFifthWeekNumber(System.Windows.DependencyObject)">
            <summary>
            Gets the current fifth week number in the month view.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.SetFifthWeekNumber(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets the current fifth week number in the month view.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.FifthWeekNumberPropertyKey">
            <summary>
            Attached property key for the <c>FifthWeekNumber</c> property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.FifthWeekNumberProperty">
            <summary>
            Read only attached property for the <c>FifthWeekNumber</c> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.GetSixthWeekNumber(System.Windows.DependencyObject)">
            <summary>
            Gets the current sixth week number in the month view.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.SetSixthWeekNumber(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets the current sixth week number in the month view.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.SixthWeekNumberPropertyKey">
            <summary>
            Attached property key for the <c>SixthWeekNumber</c> property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.SixthWeekNumberProperty">
            <summary>
            Read only attached property for the <c>SixthWeekNumber</c> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Prevents the <see cref="T:System.Windows.Controls.Primitives.CalendarItem"/> from capturing the mouse.
            </summary>
            <remarks>
            When selecting a date, the CalendarItem would capture the mouse. This is very annoying
            because when one would want to interact with another control outside the calendar
            (like opening a combo box), one should first give that control focus. Capturing the 
            mouse is only necessary when a popup is opened (like the DatePicker does). 
            Clicking outside the popup should close the popup and for this reason, a popup 
            should indeed capture the mouse.
            </remarks>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.CoerceDisplayMode(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the <see cref="P:System.Windows.Controls.Calendar.DisplayMode"/> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.OnAreWeekNumbersVisibleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in the <c>AreWeekNumbersVisible</c> property.
            </summary>
            <remarks>
            This property may only be set on a <see cref="T:System.Windows.Controls.Calendar"/>, 
            (or <see cref="T:Philips.Platform.Presentation.Controls.ExtendedCalendar"/>) or on a <see cref="T:System.Windows.Controls.DatePicker"/>. The week numbers 
            are always displayed inside a <c>Calendar</c>; in both situations, we have to subscribe 
            to the <see cref="E:System.Windows.Controls.Calendar.DisplayDateChanged"/> event of the (internal) 
            <c>Calendar</c>. This is because a <c>DatePicker</c> does not expose a 
            <c>DisplayDateChanged</c> event like the <c>Calendar</c> does.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.OnDatePickerCalendarOpened(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Controls.DatePicker.CalendarOpened"/> event.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.UpdateSubscriptionToDisplayDateChangedEventOfCalendar(System.Windows.Controls.Calendar,System.Boolean)">
            <summary>
            Updates the subscription to the <see cref="E:System.Windows.Controls.Calendar.DisplayDateChanged"/> event of a 
            <see cref="T:System.Windows.Controls.Calendar"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.OnDisplayDateChanged(System.Object,System.Windows.Controls.CalendarDateChangedEventArgs)">
            <summary>
            Handles changes in the <see cref="P:System.Windows.Controls.Calendar.DisplayDate"/> property.
            </summary>
            <remarks>
            This method updates the week numbers in the calendar when the user navigates to 
            an other month.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.OnFirstDayOfWeekChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="P:System.Windows.Controls.Calendar.FirstDayOfWeek"/> property.
            </summary>
            <remarks>
            This method updates the week numbers in the calendar when the <c>FirstDayOfWeek</c>
            property changes.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.OnCalendarWeekRuleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <c>CalendarWeekRule</c> property.
            </summary>
            <remarks>
            This method updates the week numbers in the calendar when the <c>CalendarWeekRule</c>
            property changes.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.UpdateWeekNumbers(System.Windows.Controls.Calendar)">
            <summary>
            Updates the week number properties.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.GetNumberOfDisplayedDaysFromPreviousMonth(System.Windows.Controls.Calendar,System.Globalization.Calendar,System.DateTime)">
            <summary>
            Gets the number of displayed days from the previous month.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.OnExecuteSelectTodayCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the execution of the <see cref="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.SelectTodayCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.OnExecutePreviousMonthCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the execution of the <see cref="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.PreviousMonthCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.OnExecuteNextMonthCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the execution of the <see cref="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.NextMonthCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.OnExecutePreviousYearCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the execution of the <see cref="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.PreviousYearCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedCalendar.OnExecuteNextYearCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the execution of the <see cref="F:Philips.Platform.Presentation.Controls.ExtendedCalendar.NextYearCommand"/>.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ExtendedStatusBar">
            <summary>
            Represents a status bar with extended functionality. It is derived from the standard WPF
            <see cref="T:System.Windows.Controls.Primitives.StatusBar"/> control.
            </summary>
            <remarks>
            The <c>ExtendedStatusBar</c> provides some advanced features on top of the standard WPF
            <see cref="T:System.Windows.Controls.Primitives.StatusBar"/> control. First of all, the <c>ExtendedStatusBar</c> has the option
            to show a <see cref="P:Philips.Platform.Presentation.Controls.ExtendedStatusBar.Clock"/>. By default, the clock will be shown, but this is
            customizable through the <see cref="P:Philips.Platform.Presentation.Controls.ExtendedStatusBar.ShowsClock"/> property.
            Also, the <c>ExtendedStatusBar</c> can display up to two users who are interacting with
            the system. These are called the "primary user" and the "secondary user".
            The intention here is that the "primary user" identifies the user who is logged on to the
            system, while the "secondary user" identifies another user who may be looking over the
            shoulder, either from a local or a remote location.
            </remarks>
            <example>
            The following example shows how the <see cref="T:Philips.Platform.Presentation.Controls.ExtendedStatusBar"/> can be used.
            Here, the <c>ExtendedStatusBar</c> shows a digital clock (by default), as well the names
            of the primary and secondary users. It also shows a custom <see cref="T:System.Windows.Controls.Primitives.StatusBarItem"/>,
            which in this example is a <see cref="T:System.Windows.Controls.ProgressBar"/>, but in general this could be anything.
            <code lang="xaml">
            <![CDATA[
                <ptc:ExtendedStatusBar x:Name="extendedStatusBar"
                    Grid.Row="2" Grid.ColumnSpan="3"
                    PrimaryUser="Dr. Blair"
                    ShowsPrimaryUser="True"
                    SecondaryUser="Dr. Hamilton"
                    ShowsSecondaryUser="True">
                    <ptc:ExtendedStatusBar.Clock>
                        <ptc:Clock x:Name="digitalClock"
                            Style="{DynamicResource StatusBarDigitalClockStyle}"
                            ClockType="TimeOnly"/>
                    </ptc:ExtendedStatusBar.Clock>
                    <StatusBarItem>
                        <ProgressBar x:Name="progressBar"
                            Value="50"
                            Width="100"/>
                    </StatusBarItem>
                </ptc:ExtendedStatusBar>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.Primitives.StatusBar">StatusBar Class</seealso>
            <seealso cref="T:System.Windows.Controls.Primitives.StatusBarItem">StatusBarItem Class</seealso>
            <seealso cref="P:Philips.Platform.Presentation.Controls.ExtendedStatusBar.Clock">Clock Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedStatusBar.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedStatusBar.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedStatusBar.ClockProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtendedStatusBar.Clock"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedStatusBar.ShowsClockProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtendedStatusBar.ShowsClock"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedStatusBar.PrimaryUserProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtendedStatusBar.PrimaryUser"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedStatusBar.ShowsPrimaryUserProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtendedStatusBar.ShowsPrimaryUser"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedStatusBar.SecondaryUserProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtendedStatusBar.SecondaryUser"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtendedStatusBar.ShowsSecondaryUserProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtendedStatusBar.ShowsSecondaryUser"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedStatusBar.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">Element used to display the specified item.</param>
            <param name="item">Specified item.</param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtendedStatusBar.Clock">
            <summary>
            Gets or sets the <see cref="P:Philips.Platform.Presentation.Controls.ExtendedStatusBar.Clock"/> that is shown in the status bar.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtendedStatusBar.ShowsClock">
            <summary>
            Gets or sets whether a clock is shown in the status bar.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtendedStatusBar.PrimaryUser">
            <summary>
            Gets or sets the primary user.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtendedStatusBar.ShowsPrimaryUser">
            <summary>
            Gets or sets whether the primary user is shown.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtendedStatusBar.SecondaryUser">
            <summary>
            Gets or sets the secondary user.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtendedStatusBar.ShowsSecondaryUser">
            <summary>
            Gets or sets whether the secondary user is shown.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ExtendedTabControl">
            <summary>
            Custom <see cref="T:System.Windows.Controls.TabControl"/> that makes sure that the tab items are retained,
            and are not reloaded every time a switch to another tab item is effectuated.
            </summary>
            <remarks>
            By default, a WPF tab control destroys and recreates its tab items each time a
            switch to another tab is made. This is detrimental to the performance of switching
            between tab items. To mitigate this problem, a suggestion made by various StackOverflow
            articles is followed, which introduces an extension of the standard tab control.
            </remarks>
            <seealso cref="T:System.Windows.Controls.TabControl">TabControl Class</seealso>
            <seealso href="http://stackoverflow.com/questions/9794151/stop-tabcontrol-from-recreating-its-children"/>
            <seealso href="http://stackoverflow.com/questions/8808076/how-to-preserve-the-full-state-of-the-view-when-navigating-between-views-in-an-m/"/>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedTabControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedTabControl.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedTabControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            When the items change we remove any generated panel children 
            and add any new ones as necessary
            </summary>
            <param name="e">The event arguments.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown when this method is called with the event arguments set to
            <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"/>, because this option
            is not implemented yet.
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedTabControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the selection changed event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtendedTabControl.RetrieveSelectedTabItem">
            <summary>
            Retrieves the selected tab item.
            </summary>
            <returns>The selected tab item.</returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ExtensibleTabControl">
            <summary>
            Custom <see cref="T:System.Windows.Controls.TabControl"/> that can be extended with two extension controls.
            </summary>
            <remarks>
            This custom <see cref="T:System.Windows.Controls.TabControl"/> extends the standard WPF tab control with an optional 
            <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtension"/> and an optional <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtension"/>. Typically, the 
            template adds these elements to the left and right of the tab control's tab items.
            Furthermore, different styles can be provided for the first, last, in between, single, and
            selected tab items.
            </remarks>
            <seealso cref="T:System.Windows.Controls.TabControl">TabControl Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtensibleTabControl.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtensibleTabControl.ContentSiteStyleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.ContentSiteStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtensibleTabControl.FirstTabItemStyleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.FirstTabItemStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtensibleTabControl.InBetweenTabItemStyleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.InBetweenTabItemStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtensibleTabControl.LastTabItemStyleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.LastTabItemStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtensibleTabControl.SingleTabItemStyleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.SingleTabItemStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtensibleTabControl.SelectedTabItemStyleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.SelectedTabItemStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtensionProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtension"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtensionTemplateProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtensionTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtensionTemplateSelectorProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtensionTemplateSelector"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtensionStringFormatProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtensionStringFormat"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtensionProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtension"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtensionTemplateProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtensionTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtensionTemplateSelectorProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtensionTemplateSelector"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtensionStringFormatProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtensionStringFormat"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ExtensibleTabControl.TabSelectorItemTemplateProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.TabSelectorItemTemplate"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtensibleTabControl.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
            <remarks>
            Applies the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.ContentSiteStyle"/> to the content site template part,
            if present.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtensibleTabControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Update the TabItem styles when a remove, move or replace action takes place.
            </summary>
            <param name="e">The event arguments.</param>
            <remarks>
            When the action is Add or Reset, the container is not yet available.
            The <see cref="M:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)"/> method deals with 
            this situation.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Update the TabItem styles when a new item is added
            </summary>
            <param name="element">The container.</param>
            <param name="item">The data item.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtensibleTabControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles changes to the selection.
            </summary>
            <remarks>
            The selection is handled by applying the appropriate styles to the tab items.
            The appropriate style depends on the tab item's index (whether it is the first,
            the last, somewhere in between, or whether it is the only tab item), and it
            depends on whether or not the tab item is selected.
            </remarks>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtensibleTabControl.OnCreateAutomationPeer">
            <summary>
            Gets the automation peer for the <see cref="T:Philips.Platform.Presentation.Controls.ExtensibleTabControl"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtensibleTabControl.ApplyNonSelectedTabItemsStyle">
            <summary>
            Applies the appropriate style to the non-selected tab items.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtensibleTabControl.ApplyStyle(System.Windows.Controls.TabItem,System.Windows.Style)">
            <summary>
            Applies the specified style to the specified tab item.
            </summary>
            <param name="tabItem">The tab item to style. May not be <see langword="null"/>.</param>
            <param name="style">The style to apply.</param>
            <remarks>
            If the specified style is not <see langword="null"/>, then the style is applied to
            the tab item. If the specified style is <see langword="null"/>, then the
            <see cref="P:System.Windows.Controls.ItemsControl.ItemContainerStyle"/> is applied to the tab item.
            If the <b>ItemContainerStyle</b> is also <see langword="null"/>, the tab item's
            <see cref="F:System.Windows.FrameworkElement.StyleProperty"/> is cleared, and a fallback to an implicit
            style (possibly the default style) is enabled.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="tabItem"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtensibleTabControl.ApplySingleTabItemStyle(System.Windows.Controls.TabItem)">
            <summary>
            Applies the Single Tab Item Style to the specified tab item.
            </summary>
            <param name="tabItem">The tab item to style.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtensibleTabControl.ApplyFirstTabItemStyle(System.Windows.Controls.TabItem)">
            <summary>
            Applies the First Tab Item Style to the specified tab item.
            </summary>
            <param name="tabItem">The tab item to style.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtensibleTabControl.ApplyInBetweenTabItemStyle(System.Windows.Controls.TabItem)">
            <summary>
            Applies the InBetween Tab Item Style to the specified tab item.
            </summary>
            <param name="tabItem">The tab item to style.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExtensibleTabControl.ApplyLastTabItemStyle(System.Windows.Controls.TabItem)">
            <summary>
            Applies the Last Tab Item Style to the specified tab item.
            </summary>
            <param name="tabItem">The tab item to style.</param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.ContentSiteStyle">
            <summary>
            Gets or sets the style for the content site.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.FirstTabItemStyle">
            <summary>
            Gets or sets the style for the first TabItem.
            </summary>
            <remarks>
            If this style is not set, the ItemContainerStyle is checked for null.
            If not null, it is applied to the corresponding TabItem.
            If it is null, the local value is cleared and the style
            will fallback to an implicit style.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.InBetweenTabItemStyle">
            <summary>
            Gets or sets the style for TabItem's that are between the first and last TabItem.
            </summary>
            <remarks>
            If this style is not set, the ItemContainerStyle is checked for null.
            If not null, it is applied to the corresponding TabItem.
            If it is null, the local value is cleared and the style
            will fallback to an implicit style.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.LastTabItemStyle">
            <summary>
            Gets or sets the style for the last TabItem.
            </summary>
            <remarks>
            If this style is not set, the ItemContainerStyle is checked for null.
            If not null, it is applied to the corresponding TabItem.
            If it is null, the local value is cleared and the style
            will fallback to an implicit style.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.SingleTabItemStyle">
            <summary>
            Gets or sets the style for a single TabItem.
            </summary>
            <remarks>
            If this style is not set, the ItemContainerStyle is checked for null.
            If not null, it is applied to the corresponding TabItem.
            If it is null, the local value is cleared and the style
            will fallback to an implicit style.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.SelectedTabItemStyle">
            <summary>
            Gets or sets the style for the selected TabItem.
            </summary>
            <remarks>
            If this style is not set, the ItemContainerStyle is checked for null.
            If not null, it is applied to the corresponding TabItem.
            If it is null, the local value is cleared and the style
            will fallback to an implicit style.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtension">
            <summary>
            Gets or sets the PreExtension which is typically placed on the left of the TabItems.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtensionTemplate">
            <summary>
            Gets or sets the template for the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtension"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtensionTemplateSelector">
            <summary>
            Gets or sets the template selector for the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtension"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtensionStringFormat">
            <summary>
            Gets or sets the string format for the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtension"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtension">
            <summary>
            Gets or sets the PostExtension which is typically placed on the right of the TabItems.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtensionTemplate">
            <summary>
            Gets or sets the template for the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtension"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtensionTemplateSelector">
            <summary>
            Gets or sets the template selector for the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtension"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtensionStringFormat">
            <summary>
            Gets or sets the string format for the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtension"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtensionPresenter">
            <summary>
            Gets the presenter for the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PreExtension"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtensionPresenter">
            <summary>
            Gets the presenter for the <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.PostExtension"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.TabSelectorItemTemplate">
            <summary>
            Gets or sets the item template for the tab selector.
            </summary>
            <remarks>
            A <see cref="T:System.Windows.Controls.Primitives.Selector"/> in the template of the <see cref="T:Philips.Platform.Presentation.Controls.ExtensibleTabControl"/>
            can templatebind this property to its <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate"/>. 
            By exposing this property, application developers have a means to define this
            item template. For example, the item template of a <see cref="T:Philips.Platform.Presentation.Controls.ExtensibleTabControl"/>
            may stack an icon, text and a closebutton next to each other. However, the 
            item template of the tab selector should probably not contain the closebutton. The
            <see cref="P:Philips.Platform.Presentation.Controls.ExtensibleTabControl.TabSelectorItemTemplate"/> can then be used to define an alternative
            item template.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.FormattedDoubleSpinner">
            <summary>
            Dedicated <see cref="T:Philips.Platform.Presentation.Controls.DoubleSpinner"/> that formats its value given the number of
            decimal places.
            </summary>
            <remarks>
            <para>
            This custom control extends the <see cref="T:Philips.Platform.Presentation.Controls.DoubleSpinner"/> with a dependency property
            <see cref="P:Philips.Platform.Presentation.Controls.FormattedDoubleSpinner.DecimalPlaces"/> that can be used to specify the number of decimals that
            are used to display the double spinner's value. For example, if the double spinner's
            value is 1.2345, and the <b>DecimalPlaces</b> property is set to 2, the value will be
            displayed as 1.23.
            </para>
            <para>
            This custom control exists for historical reasons. A better way to implement this would
            be to define attached behavior for the <see cref="T:Philips.Platform.Presentation.Controls.DoubleSpinner"/> class.
            </para>
            </remarks>
            <example>
            The following example shows how the <see cref="T:Philips.Platform.Presentation.Controls.FormattedDoubleSpinner"/> can be used.
            In this example, a double spinner is defined with a range from 0 to 10, and the number
            of decimal places is set to 2. The step size is set to 0.1.
            <code lang="xaml">
            <![CDATA[
                <ptc:FormattedDoubleSpinner
                    Minimum="0"
                    Maximum="10"
                    SmallChange="0.1"
                    DecimalPlaces="2"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:Philips.Platform.Presentation.Controls.DoubleSpinner">DoubleSpinner Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.FormattedDoubleSpinner.#cctor">
            <summary>
            Static constructor; needed to override meta data.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.FormattedDoubleSpinner.DecimalPlacesProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.FormattedDoubleSpinner.DecimalPlaces"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.FormattedDoubleSpinner.OnApplyTemplate">
            <summary>
            See <see cref="M:Philips.Platform.Presentation.Controls.DoubleSpinner.OnApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.FormattedDoubleSpinner.OnDecimalPlacesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.FormattedDoubleSpinner.DecimalPlaces"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.FormattedDoubleSpinner.CoerceStringFormat(System.Windows.DependencyObject,System.Object)">
            <summary>
            Ensures that the string format will not differ from <see cref="P:Philips.Platform.Presentation.Controls.FormattedDoubleSpinner.DecimalPlaces"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.FormattedDoubleSpinner.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places.
            </summary>
            <remarks>
            The default value of this property is 1, i.e., by default, double values will
            be displayed with a precision of one decimal place.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.HeaderBehaviorMode">
            <summary>
            Enumeration defining the possible modes of (list) header behavior.
            </summary>
            <remarks>
            This enumeration type is closely associated with the <see cref="T:Philips.Platform.Presentation.Controls.ListHeaderControl"/>.
            It is not restricted to be used only with this control, though.
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ListHeaderControl">ListHeaderControl Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.HeaderBehaviorMode.SticksToTop">
            <summary>
            The header sticks to the top of the control that hosts the content associated
            with this header.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.HeaderBehaviorMode.SticksToContent">
            <summary>
            The header sticks to the top of content associated with this header.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.HelpDialog">
            <summary>
            Custom <see cref="T:System.Windows.Window"/> that serves as the help dialog for an application.
            </summary>
            <remarks>
            <para>
            The <b>HelpDialog</b> is a custom dialog dedicated to presenting help content to the end
            user. To harmonize the way in which help content is presented to the user, the help dialog
            has a help icon (question mark) in the title bar, and optionally has a close button in
            the title bar as well.
            </para>
            <para>
            The <b>HelpDialog</b> is a special kind of dialog. It differs from the
            <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/> in that the <b>HelpDialog</b> usually presents static information
            to the end user that is meant to be read only, and does not require any action or choice
            from the user. The <b>MessageBox</b>, on the other hand, usually presents information that
            requires the user to confirm that he or she has read it, or that requires the user to make
            an explicit choice.
            </para>
            </remarks>
            <example>
            The following example shows how to initialize and show an <c>HelpDialog</c>. The content
            of the <c>HelpDialog</c> is defined as a resource in calling class.
            <code lang="csharp">
            <![CDATA[
            var helpDialog =
                new HelpDialog {
                    // Set the HelpDialog properties.
                    Title = "Example of a HelpDialog", 
                    Content = FindResource("helpDialogContent")
                };
            helpDialog.DataContext = DataContext;
            helpDialog.ShowDialog();
            ]]>
            </code>
            You can also create a new class derived from <b>HelpDialog</b> and specify the Content
            there. From code behind create an instance of the new class and call ShowDialog() on it.
            <code lang="csharp">
            <![CDATA[
            var myHelpDialog = new MyHelpDialog();
            myHelpDialog.DataContext = DataContext;
            myHelpDialog.ShowDialog();
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Window">Window Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.Dialog">Dialog Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.MessageBox">MessageBox Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.HelpDialog.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.HelpDialog.#ctor">
            <summary>
            Initializes a new <see cref="T:Philips.Platform.Presentation.Controls.HelpDialog"/> instance.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.IconLabelButton">
            <summary>
            Custom control which represents a button that is visualized as an icon with
            a label next to it.
            </summary>
            <remarks>
            <para>
            The <c>IconLabelButton</c> is one of several different button types that were first designed
            to be used in the context of the <see cref="T:Philips.Platform.Presentation.Controls.NavigationPane"/>, but that possibly have a much
            wider applicability. This custom button is designed to be a custom control for the
            convenience of the application designer, who can explicitly choose to use this custom button
            when needed.
            </para>
            <para>
            The <c>IconLabelButton</c> introduces two properties that replace the regular 
            <see cref="P:System.Windows.Controls.ContentControl.Content">Content</see> property. These properties allow the user
            to set both the <see cref="P:Philips.Platform.Presentation.Controls.IconLabelButton.Icon"/> and the <see cref="P:Philips.Platform.Presentation.Controls.IconLabelButton.Label"/>, which are displayed next to
            each other. The <c>Content</c> property must not be set, to prevent the content of this
            custom control to be defined more than once.
            </para>
            <para>
            The <c>IconLabelButton</c> distinguishes itself from the <see cref="T:Philips.Platform.Presentation.Controls.IconTextButton"/>
            primarily in the way it is visualized. The <c>IconLabelButton</c> visualizes its <c>Icon</c>
            as a button, and its <c>Label</c> as a label next to the button. To the user, it seems that
            the <c>Label</c> stands apart from the <c>Icon</c>, even though the entire area covering
            both the <c>Icon</c> and the <c>Label</c> is clickable.
            </para>
            </remarks>
            <example>
            The following example shows how to define an <c>IconLabelButton</c> that triggers a function
            to create a vessel path segmentation. Note that the <c>Icon</c> and the <c>Label</c>
            properties are set, while the <c>Content</c> property is ignored.
            <code lang="xaml">
            <![CDATA[
            <pt:IconLabelButton
                Icon="{StaticResource VesselSegmentationIcon}"
                Label="Segment Path"
                Width="180"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.Button">Button Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.IconTextButton">IconTextButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.IconLabelToggleButton">IconLabelToggleButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.IconTextToggleButton">IconTextToggleButton Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.IconLabelButton.IconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.IconLabelButton.Icon"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.IconLabelButton.LabelProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.IconLabelButton.Label"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.IconLabelButton.TextWrappingProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.IconLabelButton.TextWrapping"/> dependency property.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.IconLabelButton.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.IconLabelButton.Label">
            <summary>
            Gets or sets the label.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.IconLabelButton.TextWrapping">
            <summary>
            Gets or sets how the text should be wrapped.
            </summary>
            <remarks>
            The default value of this property is <see cref="F:System.Windows.TextWrapping.NoWrap"/>.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.IconLabelToggleButton">
            <summary>
            Custom control which represents a toggle button that is visualized as an icon with
            a label next to it.
            </summary>
            <remarks>
            <para>
            The <c>IconLabelToggleButton</c> is one of several different button types that were first
            designed to be used in the context of the <see cref="T:Philips.Platform.Presentation.Controls.NavigationPane"/>, but that possibly
            have a much wider applicability. This custom button is designed to be a custom control for
            the convenience of the application designer, who can explicitly choose to use this custom
            button when needed.
            </para>
            <para>
            The <c>IconLabelToggleButton</c> introduces two properties that replace the regular 
            <see cref="P:System.Windows.Controls.ContentControl.Content">Content</see> property. These properties allow the user
            to set both the <see cref="P:Philips.Platform.Presentation.Controls.IconLabelToggleButton.Icon"/> and the <see cref="P:Philips.Platform.Presentation.Controls.IconLabelToggleButton.Label"/>, which are displayed next to
            each other. The <c>Content</c> property must not be set, to prevent the content of this
            custom control to be defined more than once.
            </para>
            <para>
            The <c>IconLabelToggleButton</c> distinguishes itself from the 
            <see cref="T:Philips.Platform.Presentation.Controls.IconTextToggleButton"/> primarily in the way it is visualized.
            The <c>IconLabelToggleButton</c> visualizes its <c>Icon</c> as a button, and its
            <c>Label</c> as a label next to the button. To the user, it seems that the <c>Label</c>
            stands apart from the <c>Icon</c>, even though the entire area covering both the <c>Icon</c>
            and the <c>Label</c> is clickable.
            </para>
            </remarks>
            <example>
            The following example shows how to define an <c>IconLabelToggleButton</c> that brings the
            application in mode where (segmentation) paths can be drawn. Note that the <c>Icon</c> and
            the <c>Label</c> properties are set, while the <c>Content</c> property is ignored.
            <code lang="xaml">
            <![CDATA[
            <pt:IconLabelToggleButton
                Icon="{StaticResource VesselSegmentationIcon}"
                Label="Draw Path"
                Width="180"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.Primitives.ToggleButton">ToggleButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.IconLabelButton">IconLabelButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.IconTextButton">IconTextButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.IconTextToggleButton">IconTextToggleButton Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.IconLabelToggleButton.IconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.IconLabelToggleButton.Icon"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.IconLabelToggleButton.LabelProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.IconLabelToggleButton.Label"/> dependency property.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.IconLabelToggleButton.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.IconLabelToggleButton.Label">
            <summary>
            Gets or sets the label.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.IconTextButton">
            <summary>
            Custom control which represents a button that is visualized as an icon with
            a text, both within the borders of the button.
            </summary>
            <remarks>
            <para>
            The <c>IconTextButton</c> is one of several different button types that were first designed
            to be used in the context of the <see cref="T:Philips.Platform.Presentation.Controls.NavigationPane"/>, but that possibly have a much
            wider applicability. This custom button is designed to be a custom control for the
            convenience of the application designer, who can explicitly choose to use this custom button
            when needed.
            </para>
            <para>
            The <c>IconTextButton</c> introduces two properties that replace the regular 
            <see cref="P:System.Windows.Controls.ContentControl.Content">Content</see> property. These properties allow the user
            to set both the <see cref="P:Philips.Platform.Presentation.Controls.IconTextButton.Icon"/> and the <see cref="P:Philips.Platform.Presentation.Controls.IconTextButton.Text"/>, which are displayed next to
            each other. The <c>Content</c> property must not be set, to prevent the content of this
            custom control to be defined more than once.
            </para>
            <para>
            The <c>IconTextButton</c> distinguishes itself from the <see cref="T:Philips.Platform.Presentation.Controls.IconLabelButton"/>
            primarily in the way it is visualized. The <c>IconTextButton</c> visualizes both its
            <c>Icon</c> and its <c>Text</c> within the borders of the button.
            </para>
            </remarks>
            <example>
            The following example shows how to define an <c>IconTextButton</c> that triggers a function
            to create a vessel path segmentation. Note that the <c>Icon</c> and the <c>Text</c>
            properties are set, while the <c>Content</c> property is ignored. The text can be wrapped
            by setting the <see cref="P:Philips.Platform.Presentation.Controls.IconTextButton.TextWrapping"/> property. In the example below, this property is
            set such that the text will not be wrapped.
            <code lang="xaml">
            <![CDATA[
            <pt:IconTextButton
                Icon="{StaticResource ConfigurationIcon}"
                Text="Settings"
                TextWrapping="NoWrap"
                Width="180"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.Button">Button Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.IconLabelButton">IconLabelButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.IconLabelToggleButton">IconLabelToggleButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.IconTextToggleButton">IconTextToggleButton Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.IconTextButton.IconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.IconTextButton.Icon"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.IconTextButton.TextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.IconTextButton.Text"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.IconTextButton.TextWrappingProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.IconTextButton.TextWrapping"/> dependency property.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.IconTextButton.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.IconTextButton.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.IconTextButton.TextWrapping">
            <summary>
            Gets or sets how the text should be wrapped.
            </summary>
            <remarks>
            The default value of this property is <see cref="F:System.Windows.TextWrapping.NoWrap"/>.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.IconTextToggleButton">
            <summary>
            Custom control which represents a button that is visualized as an icon with
            a text, both within the borders of the button.
            </summary>
            <remarks>
            <para>
            The <c>IconTextToggleButton</c> is one of several different button types that were first
            designed to be used in the context of the <see cref="T:Philips.Platform.Presentation.Controls.NavigationPane"/>, but that possibly
            have a much wider applicability. This custom button is designed to be a custom control for
            the convenience of the application designer, who can explicitly choose to use this custom
            button when needed.
            </para>
            <para>
            The <c>IconTextToggleButton</c> introduces two properties that replace the regular 
            <see cref="P:System.Windows.Controls.ContentControl.Content">Content</see> property. These properties allow the user
            to set both the <see cref="P:Philips.Platform.Presentation.Controls.IconTextToggleButton.Icon"/> and the <see cref="P:Philips.Platform.Presentation.Controls.IconTextToggleButton.Text"/>, which are displayed next to
            each other. The <c>Content</c> property must not be set, to prevent the content of this
            custom control to be defined more than once.
            </para>
            <para>
            The <c>IconTextToggleButton</c> distinguishes itself from the
            <see cref="T:Philips.Platform.Presentation.Controls.IconLabelToggleButton"/> primarily in the way it is visualized.
            The <c>IconTextToggleButton</c> visualizes both its <c>Icon</c> and its <c>Text</c> within
            the borders of the button.
            </para>
            </remarks>
            <example>
            The following example shows how to define an <c>IconTextToggleButton</c> that brings the
            application in mode where (segmentation) paths can be drawn. Note that the <c>Icon</c> and
            the <c>Label</c> properties are set, while the <c>Content</c> property is ignored.
            <code lang="xaml">
            <![CDATA[
            <pt:IconTextToggleButton
                Icon="{StaticResource VesselSegmentationIcon}"
                Text="Draw Path"
                Width="180"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.Primitives.ToggleButton">ToggleButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.IconLabelButton">IconLabelButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.IconTextButton">IconTextButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.IconLabelToggleButton">IconLabelToggleButton Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.IconTextToggleButton.IconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.IconTextToggleButton.Icon"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.IconTextToggleButton.TextProperty">
            <summary>
            Identifies for the <see cref="P:Philips.Platform.Presentation.Controls.IconTextToggleButton.Text"/> dependency property.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.IconTextToggleButton.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.IconTextToggleButton.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.InfoTip">
            <summary>
            Custom control that offers info tip functionality.
            </summary>
            <remarks>
            An info tip is a special kind of tooltip that has the ability to provide more elaborate
            information in a customizable way to the user. The <b>InfoTip</b> is the same as the 
            <see cref="T:Philips.Platform.Presentation.Controls.AdvancedToolTip"/>, but we prefer the <b>InfoTip</b> as this is more in
            line with the UICC and Philips Design specifications, both for Experience Identity (EI)
            and for Design Language System (sDLS). But at heart, the <b>InfoTip</b> is just another
            name for the <b>AdvancedToolTip</b>, and does not offer any additional functionality or
            configuration options. For the sake of consistency, though, we recommend that you use
            the <b>InfoTip</b> class everywhere in your code.
            </remarks>
            <seealso cref="T:System.Windows.Controls.ToolTip">ToolTip Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.AdvancedToolTip">AdvancedToolTip Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ItemsControlExtension">
            <summary>
            An extension class for the <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </summary>
            <seealso cref="T:System.Windows.Controls.ItemsControl">ItemsControl Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ItemsControlExtension.GetShowSeparators(System.Windows.DependencyObject)">
            <summary>
            Gets whether the <see cref="T:System.Windows.Controls.ItemsControl"/> shows separators between consecutive rows
            of items in a <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the <see cref="F:Philips.Platform.Presentation.Controls.ItemsControlExtension.ShowSeparatorsProperty"/> from.
            </param>
            <remarks>
            This property should be set on a <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ItemsControlExtension.SetShowSeparators(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether the <see cref="T:System.Windows.Controls.ItemsControl"/> shows separators between consecutive rows
            of items in a <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the <see cref="F:Philips.Platform.Presentation.Controls.ItemsControlExtension.ShowSeparatorsProperty"/> on.
            </param>
            <param name="value">The value to set.</param>
            <remarks>
            This property should be set on a <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ItemsControlExtension.ShowSeparatorsProperty">
            <summary>
            Attached property for the <c>ShowSeparators</c> property.
            </summary>
            <remarks>
            This property should be set on a <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ItemsControlExtension.InsertItem(System.Windows.Controls.ItemsControl,System.Object,System.Int32)">
            <summary>
            Inserts an item in an <see cref="T:System.Windows.Controls.ItemsControl"/> at the specified index.
            </summary>
            <remarks>
            <para>
            This extension method inserts an item in an <see cref="T:System.Windows.Controls.ItemsControl"/> at a specified
            index. This extension method works if (a) the <c>ItemsControl</c> does not have its
            <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource"/> property set; (b) the <c>ItemsControl</c> has its
            <c>ItemsControl.ItemsSource</c> property set to a non-generic list; or (c)
            the <c>ItemsControl</c> has its <c>ItemsControl.ItemsSource</c> property set to a
            generic list.
            </para>
            <para>
            This extension method does nothing if the item to insert is <see langword="null"/>.
            </para>
            </remarks>
            <param name="itemsControl">The <see cref="T:System.Windows.Controls.ItemsControl"/> in which to insert the item.</param>
            <param name="item">The item to insert.</param>
            <param name="index">The zero-based index at which to insert the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified index is not valid.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown if the operation of inserting an item is not supported, for example, if the
            <c>ItemsControl.ItemsSource</c> property is set to a read-only list.
            </exception>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.LabelValuePair">
            <summary>
            A helper class that defines a (label, value) pair.
            </summary>
            <remarks>
            This helper class is used to define the content of the <see cref="T:Philips.Platform.Presentation.Controls.InfoTip"/>.
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.InfoTip">InfoTip Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.LabelValuePairsControl">LabelValuePairsControl Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.LabelValuePair.#ctor(System.Object,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="label">The label.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.LabelValuePair.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LabelValuePair.Label">
            <summary>
            Gets or sets the label of the (label, value) pair.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LabelValuePair.Value">
            <summary>
            Gets or sets the value of the (label, value) pair.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.LabelValuePairsControl">
            <summary>
            Specialized <see cref="T:System.Windows.Controls.ItemsControl"/> where the items are instances of <see cref="T:Philips.Platform.Presentation.Controls.LabelValuePair"/>
            </summary>
            <remarks>
            This helper class is used to define the content of the <see cref="T:Philips.Platform.Presentation.Controls.InfoTip"/>.
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.InfoTip">InfoTip Class</seealso>
            <seealso cref="T:System.Windows.Controls.ItemsControl">ItemsControl class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.LabelValuePair">LabelValuePair Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.LabelValuePairsControl.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            <see langword="true"/>, if the specified item is a <see cref="T:Philips.Platform.Presentation.Controls.LabelValuePair"/>;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ListHeaderControl">
            <summary>
            This <see cref="T:Philips.Platform.Presentation.Controls.ListHeaderControl"/> represents a Header control for <see cref="T:System.Windows.Controls.GroupItem"/>
            in a <see cref="T:System.Windows.Controls.ListBox"/>.
            </summary>
            <seealso cref="T:System.Windows.Controls.HeaderedContentControl">HeaderedContentControl Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialIndex">PictorialIndex Class</seealso>
            <seealso cref="T:System.Windows.Controls.ListBox">ListBox Class</seealso>
            <seealso cref="T:System.Windows.IWeakEventListener">IWeakEventListener Interface</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ListHeaderControl.DistanceBetweenCollapsingHeaders">
            <summary>
            Represents the distance between two collapsing headers.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ListHeaderControl.offsetFromViewport">
            <summary>
            Represents the distance between the top of the ListHeaderControl and the top of the
            viewport of the scroll viewer.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ListHeaderControl.scrollViewerPadding">
            <summary>
            Represents the distance between the top of the host items presenter and the top of the
            scrollable area of the scroll viewer.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ListHeaderControl.headerHost">
            <summary>
            Caches the PART_HeaderHost template part.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ListHeaderControl.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ListHeaderControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ListHeaderControl.HeaderBehaviorModeProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ListHeaderControl.HeaderBehaviorMode"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ListHeaderControl.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
            <remarks>
            Overrides the default <see cref="M:System.Windows.FrameworkElement.OnApplyTemplate"/> method to
            find the host of the header.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ListHeaderControl.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <summary>
            Handles changes to the scroll viewer's scroll position, extent, or viewport size.
            </summary>
            <remarks>
            Calculates the header top offset, which moves the header up or down.
            The <see cref="T:Philips.Platform.Presentation.Controls.ScrollChangedWeakEventManager"/> is used to subscribe to the 
            <see cref="E:System.Windows.Controls.ScrollViewer.ScrollChanged"/> event, using a weak reference.
            </remarks>
            <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager"/> that is used
            to subscribe to the <see cref="E:System.Windows.Controls.ScrollViewer.ScrollChanged"/> event.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
            <returns>true if the event is recognized and handled, false otherwise.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ListHeaderControl.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Gets the scroll viewer parent. This is needed to know when the scroll viewer is 
            scrolled.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ListHeaderControl.OnLayoutUpdated(System.Object,System.EventArgs)">
            <summary>
            Handles a layout update.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ListHeaderControl.UpdateHeaderOffset">
            <summary>
            Updates the header offset.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ListHeaderControl.HeaderBehaviorMode">
            <summary>
            Gets or sets the Header behavior mode.
            </summary>
            <remarks>
            By default, this property has the value
            <see cref="F:Philips.Platform.Presentation.Controls.HeaderBehaviorMode.SticksToTop">SticksToTop</see>.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.OkButtonClickEventHandler">
            <summary>
            Event handler handling the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click"/> event of the OK button.
            </summary>
            <remarks>
            This delegate can be used to inject custom handling of the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click"/>
            event on controls that allow this delegate to be set. For example,
            the <see cref="T:Philips.Platform.Presentation.Controls.LogOnControl"/> class exposes a property that can be used to assign a custom
            delegate to handle clicking the OK button. By using this, application builders can attach
            their own custom business logic to clicking the OK button on the Log On control.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.CancelButtonClickEventHandler">
            <summary>
            Event handler handling the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click"/> event of the Cancel button.
            </summary>
            <remarks>
            This delegate can be used to inject custom handling of the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click"/>
            event on controls that allow this delegate to be set. For example,
            the <see cref="T:Philips.Platform.Presentation.Controls.LogOnControl"/> class exposes a property that can be used to assign a custom
            delegate to handle clicking the Cancel button. By using this, application builders can
            attach their own custom business logic to clicking the Cancel button on the Log On control.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.LogOnControl">
            <summary>
            Custom <see cref="T:System.Windows.Controls.Control"/> that serves as the body of a logon dialog for an application.
            The control can also be hosted in other UI components. All logon functionality is provided
            by this control.
            </summary>
            <remarks>
            <para>
            The <c>LogOnControl</c> allows the user to enter his or her username and password
            credentials. The credentials can be validated, and access to the rest of the application
            or system can be granted or denied. The <c>LogOnControl</c> gives a warning when the Caps
            Lock key is turned on, since this is a common source of providing invalid credentials.
            </para>
            <para>
            The <c>LogOnControl</c> expects various named template parts to be defined in its control
            template. These template parts are:
            <list type="bullet">
              <item>
                <term>PART_UserNameTextBox</term>
                <description>A <see cref="T:System.Windows.Controls.TextBox"/> where the user can enter his
                or her username.</description>
              </item>
              <item>
                <term>PART_PasswordBox</term>
                <description>A <see cref="T:System.Windows.Controls.PasswordBox"/> where the user can enter his or her
                password credentials.</description>
              </item>
              <item>
                <term>PART_OkButton</term>
                <description>A <see cref="T:System.Windows.Controls.Button"/> that acts as the OK button. Usually, this button
                has the text "Log on" instead of "OK", but its function is that of the OK button in
                the sense that it allows the user to confirm the credentials he or she
                entered.</description>
              </item>
              <item>
                <term>PART_CancelButton</term>
                <description>A <see cref="T:System.Windows.Controls.Button"/> that acts as the Cancel button.</description>
              </item>
              <item>
                <term>PART_ShutdownButton</term>
                <description>A <see cref="T:System.Windows.Controls.Button"/> that acts as the Shut Down button.</description>
              </item>
            </list>
            The <b>Cancel</b> and <b>Shut Down</b> button should be mutually exclusive. A logon control
            either has an OK (Log on) and a Cancel button, or it has an OK and a Shut Down button. In
            case the logon control has a Shut Down button, the command that is executed when this button
            is clicked can be set via the <see cref="P:Philips.Platform.Presentation.Controls.LogOnControl.ShutdownCommand"/> property.
            </para>
            <para>
            In order to guarantee the confidentiality of the data that is entered by the user,
            the password is exposed only as a <see cref="T:System.Security.SecureString"/>. This means that the password
            is encrypted for privacy when being used, and deleted from computer memory when no longer
            needed. This <c>LogOnControl</c> does not expose a human readable version of the password
            that is not secure.
            </para>
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.LogOnDialog">LogOnDialog Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.LogOnResult">LogOnResult Enumeration</seealso>
            <seealso cref="T:System.Windows.Controls.Control">Control Class</seealso>
            <seealso cref="T:System.Windows.Controls.PasswordBox">PasswordBox Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnControl.userNameTextBox">
            <summary>
            The text box that is used to enter the username.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnControl.passwordBox">
            <summary>
            The password box that is used to enter the password.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnControl.logOnResult">
            <summary>
            The result of validating the username/password combination.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.LogOnControl.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.LogOnControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnControl.TopCustomContentProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnControl.TopCustomContent"/> dependency property.
            </summary>
            <remarks>
            The default value for this property is null.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnControl.BottomCustomContentProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnControl.BottomCustomContent"/> dependency property.
            </summary>
            <remarks>
            The default value for this property is null.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnControl.CredentialsTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnControl.CredentialsText"/> dependency property.
            </summary>
            <remarks>
            <para>
            This property allows application builders to choose the text that they want to display
            on the Ok button of the dialog. Typically it is something like "Log On", "Log In", or
            "Sign In" (properly localized of course).
            </para>
            <para>
            The default value for this property is the localized string <see cref="P:Philips.Platform.Presentation.TextResources.LogOn"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnControl.UserNameProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnControl.UserName"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnControl.UserNameLabelProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnControl.UserNameLabel"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnControl.PasswordLabelProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnControl.PasswordLabel"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnControl.BindableDummyProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnControl.BindableDummy"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnControl.MaxUserNameLengthProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnControl.MaxUserNameLength"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnControl.MaxPasswordLengthProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnControl.MaxPasswordLength"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnControl.CancelTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnControl.CancelText"/> dependency property.
            </summary>
            <remarks>
            <para>
            This property allows application builders to choose the text that they want to display
            on the Cancel button of the dialog. Typically it is something like "Cancel", or
            "Skip" (properly localized of course).
            </para>
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnControl.HasCancelButtonProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnControl.HasCancelButton"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnControl.HasShutdownButtonProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnControl.HasShutdownButton"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnControl.ShutdownCommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnControl.ShutdownCommand"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.LogOnControl.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.LogOnControl.OnOkButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles clicking the "OK" button.
            </summary>
            <remarks>
            Clicking the "OK" button will cause the <see cref="P:Philips.Platform.Presentation.Controls.LogOnControl.CredentialsValidator"/> delegate
            to be called, which will take care of validating the username and password combination.
            </remarks>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.LogOnControl.OnCancelButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles clicking the "Cancel" button.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnControl.CredentialsValidator">
            <summary>
            Gets or sets the event handler used to validate the username and password.
            </summary>
            <remarks>
            The <see cref="P:Philips.Platform.Presentation.Controls.LogOnControl.CredentialsValidator"/> is a delegate, which allows application builder
            to plug in a method that provides custom credentials validation logic. The logon control
            provided by the WPF Toolkit does not implement credentials validation, because this
            often involves passing the credentials to an authentication service and so on. So,
            it is preferred to leave the actual implementation of the credentials validation up to
            the application builder.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnControl.OkButtonClickEventHandler">
            <summary>
            Gets or sets the event handler which is called when the "OK" button is clicked.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnControl.CancelButtonClickEventHandler">
            <summary>
            Gets or sets the event handler which is called when the "Cancel" button is clicked.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnControl.SecurePassword">
            <summary>
            Gets the secure password, which is an encrypted version of the password that the user
            entered in the logon dialog's password box.
            </summary>
            <remarks>
            This method returns a <b>copy</b> of the password box's secure password. It is the
            client's responsibility to dispose of this copy when it is no longer needed.
            </remarks>
            <returns>
            The secure password that the user entered in the logon dialog's password box.
            If it is not possible to retrieve this, this property returns a new, empty instance
            of the <see cref="T:System.Security.SecureString"/> class.
            </returns>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnControl.TopCustomContent">
            <summary>
            Gets or sets the top custom content.
            </summary>
            <remarks>
            The default value for this property is null.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnControl.BottomCustomContent">
            <summary>
            Gets or sets the bottom custom content.
            </summary>
            <remarks>
            The default value for this property is null.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnControl.CredentialsText">
            <summary>
            Gets or sets the text that is used on the Ok button of the dialog.
            </summary>
            <remarks>
            <para>
            This property allows application builders to choose the text that they want to display
            on the OK button of the dialog. Typically it is something like "Log on" or "Sign in"
            (properly localized of course).
            </para>
            <para>
            The default value for this property is the localized string <see cref="P:Philips.Platform.Presentation.TextResources.LogOn"/>.
            </para>
            </remarks>
            <seealso cref="F:Philips.Platform.Presentation.Controls.LogOnControl.CredentialsTextProperty">Dependency property associated with this property.</seealso>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnControl.UserName">
            <summary>
            Gets or sets the username.
            </summary>
            <remarks>
            <para>
            This property can be used to retrieve the username after the user has provided his
            or her credentials. The username is stored as a normal <see cref="T:System.String"/>, unlike
            the password which is stored as a <see cref="T:System.Security.SecureString"/>.
            </para>
            <para>
            This property can also be used to set a predefined username for the logon dialog.
            This can be useful if a "Remember me" feature is implemented, and the user expects his
            or her username to be already filled in; it can also be useful in scenarios where
            several users share the same username, or where the users decide they want to have a
            single username to gain access to the system. This property should be used with care.
            </para>
            <para>
            The default value of this property is <see cref="F:System.String.Empty"/>.
            </para>
            </remarks>
            <seealso cref="F:Philips.Platform.Presentation.Controls.LogOnControl.UserNameProperty">Dependency property associated with this property.</seealso>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnControl.UserNameLabel">
            <summary>
            Gets or sets the username Label
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnControl.PasswordLabel">
            <summary>
            Gets or sets the password Label
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnControl.BindableDummy">
            <summary>
            Dummy property to have a binding on the PasswordBox to be able to add validation as
            you can not bind to the Password property itself.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnControl.MaxUserNameLength">
            <summary>
            Gets or sets the maximum length for usernames to be handled by this <c>LogOnControl</c>.
            </summary>
            <remarks>
            <para>
            This property allows the user to choose the maximum length for the username field.
            It in the same way as the <see cref="P:System.Windows.Controls.PasswordBox.MaxLength"/> property. 
            This means that a value of zero (<b>0</b>) means that there is no limit 
            to the length of the usernames that are handled by this <c>LogOnControl</c>.
            </para>
            <para>
            The default value of this property is <b>0</b>, i.e., by default no maximum length
            restriction applies to the usernames to be handled by this <c>LogOnControl</c>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnControl.MaxPasswordLength">
            <summary>
            Gets or sets the maximum length for passwords to be handled by this <c>LogOnControl</c>.
            </summary>
            <remarks>
            <para>
            This property is meant to expose the <see cref="P:System.Windows.Controls.PasswordBox.MaxLength"/> to the users
            of the <c>LogOnControl</c>. This property behaves in the same way as the 
            <see cref="P:System.Windows.Controls.PasswordBox.MaxLength"/> property. This means that a value of zero (<b>0</b>)
            means that there is no limit to the length of the passwords that are handled by this
            <c>LogOnControl</c>.
            </para>
            <para>
            The default value of this property is <b>0</b>, i.e., by default no maximum length
            restriction applies to the passwords to be handled by this <c>LogOnControl</c>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnControl.CancelText">
            <summary>
            Gets or sets the text that is used on the Cancel button of the dialog.
            </summary>
            <remarks>
            <para>
            This property allows application builders to choose the text that they want to display
            on the Cancel button of the dialog. Typically it is something like "Cancel" or "Skip"
            (properly localized of course).
            </para>
            </remarks>
            <seealso cref="F:Philips.Platform.Presentation.Controls.LogOnControl.CancelTextProperty">Dependency property associated with this property.</seealso>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnControl.HasCancelButton">
            <summary>
            Gets or sets whether the patient bar has a <b>Cancel</b> button.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnControl.HasShutdownButton">
            <summary>
            Gets or sets whether the patient bar has a <b>Shutdown</b> button.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnControl.ShutdownCommand">
            <summary>
            Gets or sets the command that is executed when the <b>Shutdown</b> button is clicked.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.CredentialsValidator">
            <summary>
            A callback method for external validation of username and password.
            </summary>
            <param name="userName">The username to validate.</param>
            <param name="securePassword">The secure password string to validate.</param>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.LogOnDialog">
            <summary>
            Custom <see cref="T:System.Windows.Window"/> that serves as the logon dialog for an application.
            </summary>
            <remarks>
            <para>
            The <c>LogOnDialog</c> allows the user to enter his or her username and password
            credentials. The credentials can be validated, and access to the rest of the application
            or system can be granted or denied. The <c>LogOnDialog</c> gives a warning when the Caps
            Lock key is turned on, since this is a common source of providing invalid credentials.
            </para>
            <para>
            In order to guarantee the confidentiality of the data that is entered by the user,
            the password is exposed only as a <see cref="T:System.Security.SecureString"/>. This means that the password
            is encrypted for privacy when being used, and deleted from computer memory when no longer
            needed.
            </para>
            <para>
            The <c>LogOnDialog</c> expects the following named template parts to be defined in its
            control template:
            <list type="bullet">
              <item>
                <term>PART_LogOnControl</term>
                <description>The <see cref="T:Philips.Platform.Presentation.Controls.LogOnControl"/> that hosts the actual logon user interface.
                </description>
              </item>   
            </list>
            </para>
            </remarks>
            <example>
            The following example shows how to initialize and show an <c>LogOnDialog</c>. Most of
            the content of the <c>LogOnDialog</c> is defined in text resources that are part of
            the WPF Toolkit. You can also define your own text resources, but please be aware
            that the text resources that come with the WPF Toolkit conform to the legal
            requirements for how Philips Healthcare products should be labeled.
            <code lang="csharp">
            <![CDATA[
            var logOnDialog =
                new LogOnDialog {
                    //
                    // Set the LogOnDialog properties.
                    //
                    ProductRange = "IPF",
                    ProductName = "Presentation Toolkit",
               };
               //
               // Set the font size of the logon dialog to match the font size of the owner, i.e.,
               // the main window. Note that the logon dialog uses different (both larger and smaller)
               // font sizes for some of its content. This is currently taken care of in the
               // LogOnDialog control.
               //
               logOnDialog.Owner = GetWindow(this);
               logOnDialog.FontSize = logOnDialog.Owner.FontSize;
               logOnDialog.ShowDialog();
            ]]>
            </code>
            </example>
            <seealso cref="T:Philips.Platform.Presentation.Controls.BrandingDialog">BrandingDialog Class</seealso>
            <seealso cref="T:System.Windows.Window">Window Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.LogOnControl">LogOnControl Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.LogOnResult">LogOnResult Enumeration</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.BrandingDialog">
            <summary> 
            Custom <see cref="T:System.Windows.Window"/> that serves as the branding dialog for an application.
            </summary>
            <remarks>
            The <c>BrandingDialog</c> allows the user to show content full screen or in the center of 
            the monitor with the minimal branding size.
            </remarks>
            <example>
            The following example shows how to initialize and show a <c>BrandingDialog</c>.
            <code lang="csharp">
            <![CDATA[
            var brandingDialog =
                new BrandingDialog {
                    FullScreen = false,
                    ProductRange = "IPF",
                    ProductName = "Presentation Toolkit"
                };
                //
                // Set the font size of the branding dialog to match the font size of the owner, i.e.,
                // the main window. Note that the branding dialog uses different (both larger and
                // smaller) font sizes for some of its content. This is currently taken care of in the
                // BrandingDialog control.
                //
                brandingDialog.Owner = GetWindow(this);
                brandingDialog.FontSize = brandingDialog.Owner.FontSize;
                brandingDialog.ShowDialog();
            ]]>
            </code>
            </example>
            <seealso cref="T:Philips.Platform.Presentation.Controls.BrandingScreenBase">BrandingScreenBase Class</seealso>
            <seealso cref="T:System.Windows.Window">Window Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.BrandingDialog.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.BrandingDialog.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.BrandingDialog.IsFullScreenProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.BrandingDialog.IsFullScreen"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BrandingDialog.IsFullScreen">
            <summary>
            Gets or sets whether the dialog is shown in full screen mode.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.LogOnDialog.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.LogOnDialog.#ctor">
            <summary>
            Initializes a new <see cref="T:Philips.Platform.Presentation.Controls.LogOnDialog"/> instance.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnDialog.TopCustomContentProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnDialog.TopCustomContent"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnDialog.BottomCustomContentProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnDialog.BottomCustomContent"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnDialog.CredentialsValidatorProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnDialog.CredentialsValidator"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnDialog.CredentialsTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnDialog.CredentialsText"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnDialog.CancelTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnDialog.CancelText"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnDialog.UserNameProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnDialog.UserName"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnDialog.UserNameLabelProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnDialog.UserNameLabel"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnDialog.PasswordLabelProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnDialog.PasswordLabel"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnDialog.MaxUserNameLengthProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnDialog.MaxUserNameLength"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnDialog.MaxPasswordLengthProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnDialog.MaxPasswordLength"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnDialog.HasCancelButtonProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnDialog.HasCancelButton"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnDialog.HasShutdownButtonProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnDialog.HasShutdownButton"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnDialog.ShutdownCommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.LogOnDialog.ShutdownCommand"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.LogOnDialog.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnDialog.SecurePassword">
            <summary>
            Gets the secure password, which is an encrypted version of the password that the user
            entered in the logon dialog's password box.
            </summary>
            <remarks>
            This method returns a <b>copy</b> of the password box's secure password. It is the
            client's responsibility to dispose of this copy when it is no longer needed.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnDialog.TopCustomContent">
            <summary>
            Gets or sets the top custom content.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnDialog.BottomCustomContent">
            <summary>
            Gets or sets the bottom custom content.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnDialog.CredentialsValidator">
            <summary>
            Gets or sets the event handler which is used to validate the username and password.
            </summary>
            <remarks>
            The <see cref="P:Philips.Platform.Presentation.Controls.LogOnDialog.CredentialsValidator"/> is a delegate, which allows application builder
            to plug in a method that provides custom credentials validation logic. The logon dialog
            provided by the WPF Toolkit does not implement credentials validation, because this
            often involves passing the credentials to an authentication service and so on. So,
            it is preferred to leave the actual implementation of the credentials validation up to
            the application builder.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnDialog.CredentialsText">
            <summary>
            Gets or sets the text that is used on the Ok button of the dialog.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnDialog.CancelText">
            <summary>
            Gets or sets the text that is used on the Cancel button of the dialog.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnDialog.UserName">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnDialog.UserNameLabel">
            <summary>
            Gets or sets the username label.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnDialog.PasswordLabel">
            <summary>
            Gets or sets the password label.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnDialog.MaxUserNameLength">
            <summary>
            Gets or sets the maximum length for usernames to be handled by this <c>LogOnDialog</c>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnDialog.MaxPasswordLength">
            <summary>
            Gets or sets the maximum length for passwords to be handled by this <c>LogOnDialog</c>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnDialog.HasCancelButton">
            <summary>
            Gets or sets whether the logon dialog has a <b>Cancel</b> button. 
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnDialog.HasShutdownButton">
            <summary>
            Gets or sets whether the logon dialog has a <b>Shutdown</b> button.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.LogOnDialog.ShutdownCommand">
            <summary>
            Gets or sets the command that is executed when the <b>Shutdown</b> button is clicked.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.LogOnResult">
            <summary>
            Enumeration defining the various results of providing logon credentials.
            </summary>
            <remarks>
            The values defined by this enumeration can be used to communicate whether the logon
            credentials that are provided by a user, such as the username and the password, are
            valid or invalid. In case the logon credentials are invalid, a distinction can be made
            between a generally invalid condition, or a more specific invalid condition such as an
            incorrect username or an incorrect username/password combination.
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.LogOnControl">LogOnControl Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.LogOnDialog">LogOnDialog Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnResult.Valid">
            <summary>
            The credentials provided by the user are valid.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnResult.Invalid">
            <summary>
            The credentials provided by the user are invalid.
            </summary>
            <remarks>
            This result can be used to provide a non-specific message of invalidity.
            For example, if it is not known whether the username or the password is incorrect,
            or perhaps if this distinction is not relevant, this generic invalid result provides
            an option to communicate that something is wrong without specifying exactly what is
            wrong.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnResult.InvalidUserName">
            <summary>
            The credentials provided by the user contain an invalid username.
            </summary>
            <remarks>
            This result can be used to provide a specific message of invalidity.
            In this case, the specific message states that the username is invalid.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.LogOnResult.InvalidPassword">
            <summary>
            The credentials provided by the user contain an invalid password, or a password
            that does not match the username.
            </summary>
            <remarks>
            This result can be used to provide a specific message of invalidity.
            In this case, the specific message states that the password is invalid.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.MedicalDeviceClassification">
            <summary>
            Enumeration defining the various types of medical devices as they are
            categorized by the European Union (EU).
            </summary>
            <remarks>
            <para>
            The Medical Device Classification is described in the document "MEDICAL DEVICES:
            Guidance Document - Classification of Medical Devices", MEDDEV 2.4/1 Rev. 9, June 2010,
            issued by the European Commission DG Health and Consumer, Directorate B, Unit B2
            "Cosmetics and medical devices". The document can be found here:
            <see href="http://ec.europa.eu/health/medical-devices/files/meddev/2_4_1_rev_9_classification_en.pdf"/>
            </para>
            <para>
            The Medical Device Classification is further worked out in the "STANDARD Labelling of
            Products", Version 5, a Philips Healthcare standard. This document can be found here:
            <see href="http://ehvuas02.diamond.philips.com/apps/q_dir/e36693/QSYS_SCD.NSF/802560390052fbc980256037003ac58b/17100e80946ba3f8c1256e2b004c7fc8?OpenDocument"/>
            </para>
            <para>
            The Medical Device Classification determines whether the product should be identified with
            a label (CE label) and an accompanying text. This identification is to be displayed on the
            Startup Screen, the About Box, etc.
            </para>
            </remarks>
            <seealso href="http://ec.europa.eu/health/medical-devices/files/meddev/2_4_1_rev_9_classification_en.pdf">MEDICAL DEVICES:
            Guidance Document - Classification of Medical Devices</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MedicalDeviceClassification.None">
            <summary>
            Medical Device Classification: None.
            </summary>
            <remarks>
            Use this to indicate that your product is not a medical device.
            This is the "zero" value of this enumeration.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MedicalDeviceClassification.ClassOne">
            <summary>
            Medical Device Classification: Class I.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MedicalDeviceClassification.ClassOneSterile">
            <summary>
            Medical Device Classification: Class I Sterile.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MedicalDeviceClassification.ClassOneMeasuring">
            <summary>
            Medical Device Classification: Class I with measuring function.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MedicalDeviceClassification.ClassTwoA">
            <summary>
            Medical Device Classification: Class IIa.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MedicalDeviceClassification.ClassTwoB">
            <summary>
            Medical Device Classification: Class IIb.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MedicalDeviceClassification.ClassThree">
            <summary>
            Medical Device Classification: Class III.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MedicalDeviceClassification.Unlicensed">
            <summary>
            Medical Device Classification: Unlicensed.
            </summary>
            <remarks>
            Use this to indicate that your product is unlicensed.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.MessageBar">
            <summary>
            Custom control representing a message bar, which is a kind of combo box filled with 
            <see cref="T:Philips.Platform.Presentation.Controls.MessageBarItem"/> instances. Each message bar item contains a message text,
            an icon, and a (nullable) timestamp.
            </summary>
            <remarks>
            <para>
            A "transient" message is a message that is shown for (at most) a specified amount of time 
            (<see cref="P:Philips.Platform.Presentation.Controls.MessageBar.MessageShowDuration"/> milliseconds). This message is replaced by a newer 
            transient message, if that newer message arrives before the number of milliseconds defined
            by <see cref="P:Philips.Platform.Presentation.Controls.MessageBar.MessageShowDuration"/> has passed.
            </para>
            <para>
            A "permanent" message, on the other hand, is a message that is shown for a much longer time,
            possibly with no upper time limit. It can be temporarily replaced by a newer transient 
            message, but as soon as the transient message expires, the permanent message is shown again.
            A permanent message is only removed when a newer permanent message arrives. So, there will 
            always be at most 1 permanent message. A permanent message can also be explicitly removed 
            by the application. This is usually done when the condition that is reported in the
            permanent message no longer exists.
            </para>
            <para>
            Transient messages will be used to report transient events, i.e., events that only require
            the user’s attention for a limited period of time.
            Permanent messages will be used to report semi-permanent events, i.e., events that require
            the user’s attention for a longer period of time.
            </para>
            <para>
            An example of a transient message might be “Printing the images for patient X has 
            succeeded.” An example of a permanent message might be “Battery low.”
            </para>
            <para>
            The MessageBar uses a <see cref="T:System.Windows.Controls.ComboBox"/> to visualize its MessageBarItem, and to allow
            the user to view the data represented by the MessageBarItems.  By default a "transient"
            message is shown for <see cref="P:Philips.Platform.Presentation.Controls.MessageBar.MessageShowDuration"/> milliseconds.
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Controls.ComboBox">ComboBox Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.MessageBarItem">MessageBarItem Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBar.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBar.IsHistoryEnabledProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBar.IsHistoryEnabled"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBar.MessageShowDurationProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBar.MessageShowDuration"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is 0.0. It is considered the responsibility of
            the <c>MessageBar</c> style or the application programmer to provide a suitable value
            for this property.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBar.MaxNumberOfHistoricalMessagesProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBar.MaxNumberOfHistoricalMessages"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is 50.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBar.PermanentMessageProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBar.PermanentMessage"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBar.MessageProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBar.Message"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBar.ClearMessages">
            <summary>
            Clears all the messages.
            </summary>
            <remarks>
            This method clears both the permanent and the transient messages.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBar.AddMessage(System.String,System.Windows.Media.ImageSource,System.Nullable{System.DateTime},System.Guid)">
            <summary>
            Adds a message, this is a timed message and it uses the message show duration.
            </summary>
            <param name="messageText">The message text.</param>
            <param name="imageSource">The image that belongs to the text.</param>
            <param name="timestamp">The timestamp of the message.</param>
            <param name="identifier">The unique identifier for the message.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBar.AddMessage(System.String,System.Windows.Media.ImageSource,System.Nullable{System.DateTime},System.Guid,System.Boolean)">
            <summary>
            Adds a message or permanent message, for the timed message it uses the message show 
            duration.
            </summary>
            <param name="messageText">The message text</param>
            <param name="imageSource">The image that belongs to the text.</param>
            <param name="timestamp">The timestamp of the message.</param>
            <param name="identifier">The unique identifier for the message.</param>
            <param name="isPermanent">Specifies whether this message is a permanent message.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBar.AddMessage(System.String,System.Windows.Media.ImageSource,System.Nullable{System.DateTime},System.Guid,System.Boolean,System.Double)">
            <summary>
            Adds a message or permanent message, for the timed message it uses the default given 
            message show duration.
            </summary>
            <param name="messageText">The message text.</param>
            <param name="imageSource">The image that belongs to the text.</param>
            <param name="timestamp">The timestamp of the message.</param>
            <param name="identifier">The unique identifier for the message.</param>
            <param name="isPermanent">Specifies whether this message is a permanent message.</param>
            <param name="messageShowDuration">The message show duration.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBar.RemoveMessage(System.Guid)">
            <summary>
            Removes the message with the given identifier.
            </summary>
            <param name="identifier">The identifier of the item that should be removed.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBar.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBar.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles changes to the selection.
            </summary>
            <remarks>
            This method makes sure that the selected item is always the last item. 
            If there are no items the selected index should be -1.
            </remarks>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBar.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles changes to the items collection.
            </summary>
            <remarks>
            This method makes sure that the selected item is always the last item. 
            If there are no items the selected index should be -1.
            </remarks>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBar.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>
            This method returns a new <see cref="T:Philips.Platform.Presentation.Controls.MessageBarItem"/> instance, which is
            the element type that is hosted by a <b>MessageBar</b>.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBar.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            <see langword="true"/>, if the specified item is a <see cref="T:Philips.Platform.Presentation.Controls.MessageBarItem"/>;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBar.CoerceIsHistoryEnabled(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the <see cref="P:Philips.Platform.Presentation.Controls.MessageBar.IsHistoryEnabled"/> property value.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBar.AnimateOpacityTimedMessage(System.Double)">
            <summary>
            Animates the <see cref="P:System.Windows.UIElement.Opacity"/> of the timed message border.
            </summary>
            <param name="showDuration">The message show duration.</param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBar.IsHistoryEnabled">
            <summary>
            Gets or sets whether the history is enabled.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBar.MessageShowDuration">
            <summary>
            Gets or sets the message show duration for the <see cref="P:Philips.Platform.Presentation.Controls.MessageBar.Message"/>.
            </summary>
            <remarks>
            By default, the value of this property is 0.0. It is considered the responsibility of
            the <c>MessageBar</c> style or the application programmer to provide a suitable value
            for this property.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBar.MaxNumberOfHistoricalMessages">
            <summary>
            Gets or sets the maximum number of historical items <see cref="T:Philips.Platform.Presentation.Controls.MessageBarItem"/>.
            </summary>
            <remarks>
            By default, the value of this property is 50.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBar.PermanentMessage">
            <summary>
            Gets or sets the permanent message.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBar.Message">
            <summary>
            Gets or sets the transient message.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.MessageBarItem">
            <summary>
            Represents a message bar item in a <see cref="T:Philips.Platform.Presentation.Controls.MessageBar"/>.
            </summary>
            <seealso cref="T:Philips.Platform.Presentation.Controls.MessageBar">MessageBar Class</seealso>
            <seealso cref="T:System.Windows.Controls.ComboBoxItem">ComboBoxItem Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBarItem.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBarItem.ImageProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBarItem.Image"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is ImageSource.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBarItem.TimestampProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBarItem.Timestamp"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is null./&gt;
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBarItem.Guid">
            <summary>
            Gets or sets the GUID of the message.
            </summary>
            <remarks>
            The default value of this property is <see cref="F:System.Guid.Empty"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBarItem.Image">
            <summary>
            Gets or sets the image of the message.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBarItem.Timestamp">
            <summary>
            Gets or sets the time stamp of the message.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.MessageBox">
            <summary>
            Custom <see cref="T:System.Windows.Window"/> that serves as a WPF variant of the MessageBox.
            </summary>
            <remarks>
            <para>
            This custom <c>MessageBox</c> class is introduced to bridge the gap between the
            functionality of the Win32 <c>MessageBox</c> and the WPF <c>MessageBox</c>. The former
            allows the user to define more button combinations, such as Abort/Retry/Ignore, and
            Retry/Cancel, that are not provided by the standard Microsoft WPF <c>MessageBox</c>.
            The API of this custom class mimics the WPF API as closely as possible. Only where it
            offers functionality that is not supported by the standard Microsoft WPF <c>MessageBox</c>
            does it revert to using Win32 types.
            </para>
            <para>
            As a result of this, there are 16 overloaded <c>Show</c> methods; ten of these are copies
            of <c>Show</c> methods that you will find on the Microsoft WPF <c>MessageBox</c> API;
            the other six are copies of <c>Show</c> methods that you will find on the Microsoft Win32
            <c>MessageBox</c>. These methods differ only from the standard <c>Show</c> methods in that
            they take a <see cref="T:System.Windows.Window"/> parameter to define the owner of the message box, rather
            than an <see cref="T:System.Windows.Forms.IWin32Window"/>. This makes the Win32 <c>Show</c>
            methods compatible with the WPF API, and users do not have to go through the trouble of
            converting a WPF window to a Win32 window handle. The overloaded methods are chosen in
            such a way that preference is given to the WPF API, while still enabling the functionality
            of the Win32 API.
            </para>
            <para>
            In addition to providing overloaded <c>Show</c> methods for the WPF and Win32 APIs, this
            class also provides overloads that take an <see cref="T:System.IntPtr"/> parameter to represent
            the owner of the message box. These overloads are intended to be used ONLY for establishing
            interoperability between traditional WinForms applications and WPF. In particular, these
            overloads should be used to show a WPF message box from a WinForms applications, while
            passing the WinForms host on to the message box as its owner. Please ensure that you use
            these overloads for interoperability purposes only.
            </para>
            <para>
            Application programmers are advised to stick with the WPF <c>Show</c> methods as much as
            possible. In practice, this means that you should <b>always</b> use the WPF <c>Show</c>
            methods unless your message box needs the Abort/Retry/Ignore or Retry/Cancel button
            combinations.
            </para>
            <para>
            To use the <c>MessageBox</c> from the Presentation toolkit you must add the following
            using alias. This will prevent name clashes with the existing WPF <see cref="T:System.Windows.MessageBox">MessageBox</see>
            and the existing WinForms <see cref="T:System.Windows.Forms.MessageBox">MessageBox</see>.
            <code lang="csharp">
            <![CDATA[
            using MessageBox = Philips.Platform.Presentation.Controls.MessageBox;
            ]]>
            </code>
            </para>
            </remarks>
            <example>
            The following example demonstrates how to show a <c>MessageBox</c> providing only the
            message box text. Note that we use the WPF API in this case. The message box that is shown
            will only have an OK button. It will not have a caption or a message box icon.
            <code lang="csharp">
            <![CDATA[
            MessageBoxResult messageBoxResult =
                MessageBox.Show(
                    "The patient data has been successfully exported.",
                );
            ]]>
            </code>
            </example>
            <example>
            The following example demonstrates how to show a <c>MessageBox</c> that presents a choice
            that the user needs to confirm or deny using the Yes or the No button. The message box has
            a caption and displays a question mark as its message box image. The owner of the message
            box is passed in as a parameter. Note that we use the WPF API in this case, which is always
            preferred over the Win32 API.
            <code lang="csharp">
            <![CDATA[
            var owner = Window.GetWindow(this);
            MessageBoxResult messageBoxResult =
                MessageBox.Show(
                    owner,
                    "Do you want to close this window?",
                    "Close Dialog",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Question
                );
            ]]>
            </code>
            </example>
            <example>
            The following example demonstrates how to show a <c>MessageBox</c> that presents a choice
            that the user needs to confirm or deny using the Retry or the Cancel button. The message box
            has a caption and displays an information icon as its message box image. Note that we use
            the Win32 API in this case, because the Retry/Cancel button combination is not supported in
            the WPF API. Note also that the owner window is passed in as a <see cref="T:System.Windows.Window"/> rather
            than as a <see cref="T:System.Windows.Forms.IWin32Window"/>.
            <code lang="csharp">
            <![CDATA[
            var owner = Window.GetWindow(this);
            MessageBoxResult messageBoxResult =
                MessageBox.Show(
                    owner,
                    "It is currently not possible to complete the operation." +
                    "Do you want to retry or cancel the operation?",
                    "Warning",
                    MessageBoxButtons.RetryCancel,
                    MessageBoxIcon.Information
                );
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Window">Window Class</seealso> 
            <seealso cref="T:System.Windows.MessageBoxButton">MessageBoxButton Enumeration</seealso>
            <seealso cref="T:System.Windows.Forms.MessageBoxButtons">MessageBoxButtons Enumeration</seealso> 
            <seealso cref="T:System.Windows.MessageBox">MessageBox (System.Windows) Class</seealso>
            <seealso cref="T:System.Windows.Forms.MessageBox">MessageBox (System.Windows.Forms) Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.#ctor">
            <summary>
            Initializes a new <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/> instance.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResultProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see cref="F:System.Windows.MessageBoxResult.None"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.DialogResultProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.DialogResult"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see cref="F:System.Windows.Forms.DialogResult.None"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.IsOkButtonVisibleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.IsOkButtonVisible"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.IsCancelButtonVisibleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.IsCancelButtonVisible"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.IsYesButtonVisibleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.IsYesButtonVisible"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.IsNoButtonVisibleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.IsNoButtonVisible"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.IsAbortButtonVisibleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.IsAbortButtonVisible"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.IsRetryButtonVisibleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.IsRetryButtonVisible"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.IsIgnoreButtonVisibleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.IsIgnoreButtonVisible"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.AreFontPropertiesSetByOwnerProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.AreFontPropertiesSetByOwner"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.CaptionProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.Caption"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxText"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.ImageProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.Image"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.ErrorIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.WarningIcon"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the default <see cref="T:System.Windows.Media.ImageSource"/> value.
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.InformationIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.WarningIcon"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the default <see cref="T:System.Windows.Media.ImageSource"/> value.
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.QuestionMarkIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.WarningIcon"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the default <see cref="T:System.Windows.Media.ImageSource"/> value.
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.WarningIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.WarningIcon"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the default <see cref="T:System.Windows.Media.ImageSource"/> value.
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.String)">
            <overloads>
            Displays a message box.
            </overloads>
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <remarks>
            The message box displayed by this method only has an OK button. It does not have
            a caption or a message box icon.
            </remarks>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <returns>A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.Windows.Window,System.String)">
            <summary>
            Displays a message box in front of the specified window.
            The message box displays a message and returns a result.
            </summary>
            <remarks>
            The message box displayed by this method only has an OK button. It does not have
            a caption or a message box icon.
            </remarks>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <returns>A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.String,System.String)">
            <summary>
            Displays a message box that has a message and title bar caption;
            and that returns a result.
            </summary>
            <remarks>
            The message box displayed by this method only has an OK button. It does not have
            a message box icon.
            </remarks>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <returns>A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.Windows.Window,System.String,System.String)">
            <summary>
            Displays a message box in front of the specified window.
            The message box displays a message and title bar caption;
            and it returns a result.
            </summary>
            <remarks>
            The message box displayed by this method only has an OK button. It does not have
            a message box icon.
            </remarks>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <returns>A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton)">
            <summary>
            Displays a message box that has a message, title bar caption, and button;
            and that returns a result.
            </summary>
            <remarks>
            The message box displayed by this method does not have a message box icon.
            </remarks>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <returns>A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton)">
            <summary>
            Displays a message box in front of the specified window.
            The message box displays a message, title bar caption, and button;
            and it also returns a result.
            </summary>
            <remarks>
            The message box displayed by this method does not have a message box icon.
            </remarks>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <returns>A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon;
            and that returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
            <returns>A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
            <summary>
            Displays a message box in front of the specified window.
            The message box displays a message, title bar caption, button, and icon;
            and it also returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
            <returns>A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon;
            and that accepts a default message box result and returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
            <param name="defaultResult">A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies the default result of the message box.</param>
            <returns>A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
            <summary>
            Displays a message box in front of the specified window.
            The message box displays a message, title bar caption, button, and icon;
            and accepts a default message box result and returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
            <param name="defaultResult">A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies the default result of the message box.</param>
            <returns>A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.IntPtr,System.String)">
            <summary>
            Displays a message box in front of the specified window.
            The message box displays a message with an empty bar.
            </summary>
            <remarks>
            <para>
            This method is provided for the purpose of supplying interoperability with traditional
            WinForms applications only. A WinForms application can set the owner of the WPF message
            box by providing the handle to the owner as an <see cref="T:System.IntPtr"/> parameter.
            </para>
            <para>
            DO NOT call this method in any scenario that does not involve WPF-WinForms
            interoperability.
            </para>
            </remarks>
            <param name="owner">An <see cref="T:System.IntPtr"/> that represents (a handle to) the owner of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <returns>A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.IntPtr,System.String,System.String)">
            <summary>
            Displays a message box in front of the specified window.
            The message box displays a message and title bar caption.
            </summary>
            <remarks>
            <para>
            This method is provided for the purpose of supplying interoperability with traditional
            WinForms applications only. A WinForms application can set the owner of the WPF message
            box by providing the handle to the owner as an <see cref="T:System.IntPtr"/> parameter.
            </para>
            <para>
            DO NOT call this method in any scenario that does not involve WPF-WinForms
            interoperability.
            </para>
            </remarks>
            <param name="owner">An <see cref="T:System.IntPtr"/> that represents (a handle to) the owner of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <returns>A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.IntPtr,System.String,System.String,System.Windows.MessageBoxButton)">
            <summary>
            Displays a message box in front of the specified window.
            The message box displays a message, title bar caption and a button.
            </summary>
            <remarks>
            <para>
            This method is provided for the purpose of supplying interoperability with traditional
            WinForms applications only. A WinForms application can set the owner of the WPF message
            box by providing the handle to the owner as an <see cref="T:System.IntPtr"/> parameter.
            </para>
            <para>
            DO NOT call this method in any scenario that does not involve WPF-WinForms
            interoperability.
            </para>
            </remarks>
            <param name="owner">An <see cref="T:System.IntPtr"/> that represents (a handle to) the owner of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <returns>A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.IntPtr,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
            <summary>
            Displays a message box in front of the specified window.
            The message box displays a message, title bar caption, button, and icon;
            </summary>
            <remarks>
            <para>
            This method is provided for the purpose of supplying interoperability with traditional
            WinForms applications only. A WinForms application can set the owner of the WPF message
            box by providing the handle to the owner as an <see cref="T:System.IntPtr"/> parameter.
            </para>
            <para>
            DO NOT call this method in any scenario that does not involve WPF-WinForms
            interoperability.
            </para>
            </remarks>
            <param name="owner">An <see cref="T:System.IntPtr"/> that represents (a handle to) the owner of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
            <returns>A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.IntPtr,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
            <summary>
            Displays a message box in front of the specified window.
            The message box displays a message, title bar caption, button, and icon;
            and accepts a default message box result and returns a result.
            </summary>
            <remarks>
            <para>
            This method is provided for the purpose of supplying interoperability with traditional
            WinForms applications only. A WinForms application can set the owner of the WPF message
            box by providing the handle to the owner as an <see cref="T:System.IntPtr"/> parameter.
            </para>
            <para>
            DO NOT call this method in any scenario that does not involve WPF-WinForms
            interoperability.
            </para>
            </remarks>
            <param name="owner">An <see cref="T:System.IntPtr"/> that represents (a handle to) the owner of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
            <param name="defaultResult">A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies the default result of the message box.</param>
            <returns>A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Displays a message box with specified text, caption, and buttons.
            </summary>
            <remarks>
            The message box displayed by this method does not have a message box icon.
            </remarks>
            <param name="text">The text to display in the message box. </param>
            <param name="caption">The text to display in the title bar of the message box. </param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.</param>
            <returns>One of the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.DialogResult"/> values.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Displays a message box in front of the specified object and with the specified text,
            caption, and buttons.
            </summary>
            <remarks>
            The message box displayed by this method does not have a message box icon.
            </remarks>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.</param>
            <returns>One of the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.DialogResult"/> values.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Displays a message box with specified text, caption, buttons, and icon.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon to display in the message box.</param>
            <returns>One of the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.DialogResult"/> values.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Displays a message box in front of the specified object and with the specified text,
            caption, buttons, and icon.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon to display in the message box.</param>
            <returns>One of the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.DialogResult"/> values.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Displays a message box with the specified text, caption, buttons, icon,
            and default button.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the default button for the message box.</param>
            <returns>One of the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.DialogResult"/> values.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Displays a message box in front of the specified object and with the specified text,
            caption, buttons, icon, and default button.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the default button for the message box.</param>
            <returns>One of the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.DialogResult"/> values.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.ClickDefaultButton">
            <summary>
            Method to click the default button when the <c>MessageBox</c> is operating in
            <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.InteractiveMode"/>.
            </summary>
            <remarks>
            This method can be used to programmatically click the default button. This is especially
            useful in automated testing situations, where human intervention is not possible or not
            desirable. This method will execute a click of the default button, as a result of which
            both the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.DialogResult"/> and the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> properties
            will be set. This method will not close the message box. For that, you need to either
            call the <see cref="M:Philips.Platform.Presentation.Controls.MessageBox.CloseWpfMessageBox"/> or the <see cref="M:Philips.Platform.Presentation.Controls.MessageBox.CloseWin32MessageBox"/>,
            depending on which API you used to show the message box.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.CloseWpfMessageBox">
            <summary>
            Closes the message box.
            </summary>
            <remarks>
            This method can be used to close a <c>MessageBox</c> that is shown using one
            of the WPF <c>Show</c> overloads.
            </remarks>
            <returns>
            A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies the result of closing
            the message box.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.CloseWin32MessageBox">
            <summary>
            Closes the message box.
            </summary>
            <remarks>
            This method can be used to close a <c>MessageBox</c> that is shown using one
            of the Win32 <c>Show</c> overloads.
            </remarks>
            <returns>
            A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.DialogResult"/> value that specifies the result of closing
            the message box.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.SendKey(System.Windows.Input.Key)">
            <summary>
            Sends a <see cref="T:System.Windows.Input.Key"/> to the <c>MessageBox</c>.
            </summary>
            <remarks>
            If the <c>MessageBox</c> operates in <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.InteractiveMode"/>, it should be
            possible to control the <c>MessageBox</c> explicitly from the outside. This method
            facilitates in sending keyboard events to the <c>MessageBox</c>.
            </remarks>
            <param name="key">The <see cref="T:System.Windows.Input.Key"/> to send.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.ShowWpfMessageBox(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
            <summary>
            Displays a message box using the WPF API.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
            <param name="defaultResult">A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies the default result of the message box.</param>
            <returns>A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.ShowWpfMessageBox(System.IntPtr,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
            <summary>
            Displays a message box using the WPF API.
            </summary>
            <remarks>
            <para>
            This method is provided for the purpose of supplying interoperability with traditional
            WinForms applications only. A WinForms application can set the owner of the WPF message
            box by providing the handle to the owner as an <see cref="T:System.IntPtr"/> parameter.
            </para>
            <para>
            DO NOT call this method in any scenario that does not involve WPF-WinForms
            interoperability.
            </para>
            </remarks>
            <param name="owner">An <see cref="T:System.IntPtr"/> that represents (a handle to) the owner of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
            <param name="defaultResult">A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies the default result of the message box.</param>
            <returns>A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.ShowWin32MessageBox(System.Windows.Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Displays a message box using the Win32 API.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the default button for the message box.</param>
            <returns>One of the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.DialogResult"/> values.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.ConvertMessageBoxResultToDefaultButton(System.Windows.MessageBoxResult,System.Windows.MessageBoxButton,Philips.Platform.Presentation.Controls.MessageBox.DefaultButton)">
            <summary>
            Converts a WPF <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> to the corresponding internal
            <see cref="T:Philips.Platform.Presentation.Controls.MessageBox.DefaultButton"/> value.
            </summary>
            <param name="messageBoxResult">A <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value that specifies the default result of the message box.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies the selected button from the availble options of the message box</param>
            <param name="defaultSelection">A <see cref="T:Philips.Platform.Presentation.Controls.MessageBox.DefaultButton"/> value that specifies the default value of the <see cref="T:System.Windows.MessageBoxButton"/></param>
            <returns>The <see cref="T:Philips.Platform.Presentation.Controls.MessageBox.DefaultButton"/> value that corresponds to the specified <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> value.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.ConvertMessageBoxDefaultButtonToDefaultButton(System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Converts a Win32 <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> to the corresponding internal
            <see cref="T:Philips.Platform.Presentation.Controls.MessageBox.DefaultButton"/> value.
            </summary>
            <param name="messageBoxDefaultButton">
            One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the default
            button for the message box.
            </param>
            <param name="buttons">
            The actual <see cref="T:System.Windows.Forms.MessageBoxButtons"/> displayed on the <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/>.
            </param>
            <returns>
            The actual button on the <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/> that corresponds to the specified
            default button value; or <see cref="F:Philips.Platform.Presentation.Controls.MessageBox.DefaultButton.None"/> if there is no such
            correspondence.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.ConvertMessageBoxFirstButtonToDefaultButton(System.Windows.MessageBoxButton)">
            <summary>
            Converts the value first button to the default button of the <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/>.
            </summary>
            <param name="button">
            The actual <see cref="T:System.Windows.MessageBoxButton"/> displayed on the <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/>.
            </param>
            <returns>
            The actual button on the <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/> that corresponds to the specified
            default button value; or <see cref="F:Philips.Platform.Presentation.Controls.MessageBox.DefaultButton.None"/> if there is no such
            correspondence.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.ConvertMessageBoxDefaultButton1ToDefaultButton(System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Converts the value <see cref="F:System.Windows.Forms.MessageBoxDefaultButton.Button1"/> to the actual button
            of the <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/>.
            </summary>
            <param name="buttons">
            The actual <see cref="T:System.Windows.Forms.MessageBoxButtons"/> displayed on the <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/>.
            </param>
            <returns>
            The actual button on the <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/> that corresponds to the specified
            default button value; or <see cref="F:Philips.Platform.Presentation.Controls.MessageBox.DefaultButton.None"/> if there is no such
            correspondence.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.ConvertMessageBoxDefaultButton2ToDefaultButton(System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Converts the value <see cref="F:System.Windows.Forms.MessageBoxDefaultButton.Button2"/> to the actual button
            of the <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/>.
            </summary>
            <param name="buttons">
            The actual <see cref="T:System.Windows.Forms.MessageBoxButtons"/> displayed on the <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/>.
            </param>
            <returns>
            The actual button on the <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/> that corresponds to the specified
            default button value; or <see cref="F:Philips.Platform.Presentation.Controls.MessageBox.DefaultButton.None"/> if there is no such
            correspondence.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.ConvertMessageBoxDefaultButton3ToDefaultButton(System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Converts the value <see cref="F:System.Windows.Forms.MessageBoxDefaultButton.Button3"/> to the actual button
            of the <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/>.
            </summary>
            <param name="buttons">
            The actual <see cref="T:System.Windows.Forms.MessageBoxButtons"/> displayed on the <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/>.
            </param>
            <returns>
            The actual button on the <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/> that corresponds to the specified
            default button value; or <see cref="F:Philips.Platform.Presentation.Controls.MessageBox.DefaultButton.None"/> if there is no such
            correspondence.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.GetMessageBoxResultForMessageBoxButton(System.Windows.MessageBoxButton)">
            <summary>
            Gets the (default) <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> for a WPF <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/>
            with the specified button or buttons.
            </summary>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <returns>The (default) <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> corresponding to the specified button or buttons.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.OnPreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.PreviewKeyDown"/> event.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.OnKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.KeyDown"/> event.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.HandleEscOrAltF4KeyDown">
            <summary>
            Handles the ESC and Alt+F4 key down events.
            </summary>
            <remarks>
            The main goal of factoring out this piece of code into a separate method is to
            keep the cyclomatic complexity from exceeding the specification.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.ConvertMessageBoxIconToMessageBoxImage(System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Converts a <see cref="T:System.Windows.Forms.MessageBoxIcon"/> (used in the Win32 API) to a
            <see cref="T:System.Windows.MessageBoxImage"/> (used in the WPF API).
            </summary>
            <param name="messageBoxIcon"></param>
            <returns></returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.SetMessageBoxFontFromSystemDrawingFont(Philips.Platform.Presentation.Controls.MessageBox,System.Drawing.Font)">
            <summary>
            Sets the font of a WPF message box by converting the specified
            <see cref="T:System.Drawing.Font"/>.
            </summary>
            <param name="messageBox">The WPF message box.</param>
            <param name="systemDrawingFont">The <see cref="T:System.Drawing.Font"/>.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.InitializeMessageBoxImage">
            <summary>
            Initializes the message box image, if it is defined.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.OnCloseButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click"/> event
            for the Close button.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.OnOkButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click"/> event
            for the OK button.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.OnCancelButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click"/> event
            for the Cancel button.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.OnYesButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click"/> event
            for the Yes button.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.OnNoButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click"/> event
            for the No button.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.OnAbortButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click"/> event
            for the Abort button.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.OnIgnoreButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click"/> event
            for the Ignore button.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MessageBox.OnRetryButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click"/> event
            for the Retry button.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult">
            <summary>
            Gets the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxResult"/> that indicates the result of closing the <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/>.
            </summary>
            <remarks>
            By default, the value of this property is <see cref="F:System.Windows.MessageBoxResult.None"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBox.DialogResult">
            <summary>
            Gets the <see cref="P:Philips.Platform.Presentation.Controls.MessageBox.DialogResult"/> that indicates the result of closing the <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/>.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MessageBox.DialogResultProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see cref="F:System.Windows.Forms.DialogResult.None"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBox.IsOkButtonVisible">
            <summary>
            Gets or sets whether the OK button is visible.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MessageBox.IsOkButtonVisibleProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBox.IsCancelButtonVisible">
            <summary>
            Gets or sets whether the Cancel button is visible.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MessageBox.IsCancelButtonVisibleProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBox.IsYesButtonVisible">
            <summary>
            Gets or sets whether the Yes button is visible.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MessageBox.IsYesButtonVisibleProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBox.IsNoButtonVisible">
            <summary>
            Gets or sets whether the No button is visible.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MessageBox.IsNoButtonVisibleProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBox.IsAbortButtonVisible">
            <summary>
            Gets or sets whether the Abort button is visible.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MessageBox.IsAbortButtonVisibleProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBox.IsRetryButtonVisible">
            <summary>
            Gets or sets whether the Retry button is visible.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MessageBox.IsRetryButtonVisibleProperty">Dependency property associated with this 
            property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBox.IsIgnoreButtonVisible">
            <summary>
            Gets or sets whether the Ignore button is visible.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MessageBox.IsIgnoreButtonVisibleProperty">Dependency property associated with this 
            property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBox.AreFontPropertiesSetByOwner">
            <summary>
            Gets whether the font related properties are set by the owner of the message box.
            </summary>
            <remarks>
            <para>
            Typically, a message box will have the same values for font related properties such as
            font family and font size as its owner. However, it is not always the case that
            the owner of a message box is set. In this case, the style for the message box needs
            to be able to determine suitable default values for the font related properties. It
            can use this property to inspect whether the font related properties are actually
            provided by the owner or not.
            </para>
            <para>
            By default, the value of this property is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBox.Caption">
            <summary>
            Gets or sets the caption of the <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/>.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MessageBox.CaptionProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxText">
            <summary>
            Gets or sets the text that is displayed as the message of the <see cref="T:Philips.Platform.Presentation.Controls.MessageBox"/>.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MessageBox.MessageBoxTextProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBox.Image">
            <summary>
            Gets or sets the image (i.e., the icon) of the message box.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBox.ErrorIcon">
            <summary>
            Gets or sets the icon that is displayed to when the message box displays
            an error message.
            </summary>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBox.InformationIcon">
            <summary>
            Gets or sets the icon that is displayed to when the message box displays
            an information message.
            </summary>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBox.QuestionMarkIcon">
            <summary>
            Gets or sets the icon that is displayed to when the message box displays
            a question.
            </summary>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBox.WarningIcon">
            <summary>
            Gets or sets the icon that is displayed to when the message box displays
            a warning.
            </summary>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MessageBox.InteractiveMode">
            <summary>
            Gets or sets whether the <c>MessageBox</c> is in interactive mode.
            </summary>
            <remarks>
            <para>
            If the <c>MessageBox</c> is in interactive mode, calls to any of the overloaded
            <c>Show</c> methods are not blocking; instead, the application programmer has the
            responsibility to close the <c>MessageBox</c> programmatically by calling one
            of the static <see cref="M:Philips.Platform.Presentation.Controls.MessageBox.CloseWpfMessageBox"/> or <see cref="M:Philips.Platform.Presentation.Controls.MessageBox.CloseWin32MessageBox"/>
            methods. Which of these methods needs to be called depends on whether the 
            <c>MessageBox</c> was shown using one of the WPF API <c>Show</c> methods, or one
            of the Win32 API <c>Show</c> methods.
            </para>
            <para>
            If the <c>MessageBox</c> is not in interactive mode, calls to any of the overloaded
            <c>Show</c> methods will block until the user closes the <c>MessageBox</c> by clicking
            one of its buttons.
            </para>
            <para>
            Setting the <c>InteractiveMode</c> to <see langword="true"/> is particularly useful in
            testing scenarios, where it is not possible to gather input from a real, human user,
            and all interaction with the <c>MessageBox</c> must be done programmatically.
            </para>
            <para>
            By default, the value of this property is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.MessageBox.DefaultButton">
            <summary>
            Enumeration of the buttons of a MessageBox which can be the default button.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.DefaultButton.None">
            <summary>
            No default button.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.DefaultButton.Ok">
            <summary>
            The OK button is the default button.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.DefaultButton.Yes">
            <summary>
            The Yes button is the default button.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.DefaultButton.No">
            <summary>
            The No button is the default button.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.DefaultButton.Abort">
            <summary>
            The Abort button is the default button.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.DefaultButton.Retry">
            <summary>
            The Retry button is the default button.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.DefaultButton.Ignore">
            <summary>
            The Ignore button is the default button.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MessageBox.DefaultButton.Cancel">
            <summary>
            The Cancel button is the default button.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.MovieBar">
            <summary>
            Custom control that provides basic movie and navigation functionality.
            </summary>
            <remarks>
            <para>
            The <c>MovieBar</c> expects various named template parts to be defined in its control
            template. These template parts are:
            <list type="bullet">
              <item>
                <term>PART_MainContainer</term>
                <description>The main container that hosts the movie bar. This template part captures
                and handles <see cref="E:System.Windows.UIElement.MouseEnter"/> and <see cref="E:System.Windows.UIElement.MouseLeave"/>
                events for the movie bar.
                </description>
              </item>
              <item>
                <term>PART_Ellipse</term>
                <description>An <see cref="T:System.Windows.Shapes.Ellipse"/> that serves as a hint for users to access the movie
                bar functionality in case the movie bar is "hidden". The ellipse is a subtle visual hint
                or indication that the movie bar is there, and hovering over it will reveal the full
                movie bar functionality.</description>
              </item>
              <item>
                <term>PART_FrameRateContainer</term>
                <description>The container for the frame rate functionality of the movie bar.
                This template part captures and handles <see cref="E:System.Windows.UIElement.MouseEnter"/>
                and <see cref="E:System.Windows.UIElement.MouseLeave"/> events for the frame rate functionality
                of the movie bar.
                </description>
              </item>
              <item>
                <term>PART_FrameRateSlider</term>
                <description>A <see cref="T:System.Windows.Controls.Slider"/> that allows the user to change the frame rate
                at which the movie is played.
                </description>
              </item>
              <item>
                <term>PART_PlayPauseButton</term>
                <description>A <see cref="T:System.Windows.Controls.Primitives.ToggleButton"/> that allows the user to toggle between
                playing and pausing the movie.</description>
              </item>
              <item>
                <term>PART_RecommendedFrameRateThumb</term>
                <description>A <see cref="T:System.Windows.Shapes.Polygon"/> that represents a visual indication of the
                recommended frame rate for a given set of images.
                </description>
              </item>
              <item>
                <term>PART_MovieBarHitTester</term>
                <description>A transparent <see cref="T:System.Windows.Controls.Border"/> that is used as hit-tester when
                the movie bar is in unpinned state. This corresponds to what is called the
                <b>target area</b> in the sDLS movie bar specification.
                </description>
              </item>
              <item>
                <term>PART_LegsBackground</term>
                <description>
                </description>
              </item>
              <item>
                <term>PART_LeftLegContent</term>
                <description>Container on the movie bar with content placed on the left side of the
                movie bar.
                </description>
              </item>
              <item>
                <term>PART_Core</term>
                <description>Container on the movie bar with content placed in the middle of the
                movie bar.
                </description>
              </item>
              <item>
                <term>PART_OverflowButton</term>
                <description>The movie bar overflow button. Clicking this button will open the overflow
                popup panel, which hosts all the controls that do not fit on the movie bar itself.
                </description>
              </item>
              <item>
                <term>PART_Pin</term>
                <description>The movie bar pin button. If the movie bar is pinned, the auto-hide
                behavior is disabled. See the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.IsPinned"/> dependency property.</description>
              </item>
            </list>
            </para>
            <para>
            The user can navigate through the available frame rate values. These are either determined
            by the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.MinimumFrameRate"/> and <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.MaximumFrameRate"/> properties, which
            allow for a continuous range of frame rate values; or they are determined by explicitly
            setting a collection of available frame rate values using the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.FrameRateValues"/>
            property, which allows the application builder to define a fixed set of discrete frame rate
            values.
            </para>
            <para>
            Navigation through the frame rate values is either cyclic, or it respects the boundaries
            set by the minimum and maximum frame rate values. This latter mode is the default, as it
            corresponds most naturally to the user's expectations of this behavior. The default behavior
            can be changed by setting the value of the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.IsFrameRateCyclic"/> property to
            <see langword="true"/>.
            </para>
            <para>
            This class provides basic movie functionality that is not specialized for any modality or
            data type. If you need specific movie functionality for your modality, or for your type
            of clinical data, you can implement a dedicated movie bar that derives from this basic
            movie bar, or you can implement one from scratch.
            </para>
            <para>
            The WPF Presentation Toolkit provides a number of dedicated, specialized movie bars:
            <list type="bullet">
              <item>
                <term><b>MRMovieBar</b></term>
                <description>Movie bar specialized for MR data sets.</description>
              </item>
              <item>
                <term><see cref="T:Philips.Platform.Presentation.Controls.XrayMovieBar"/></term>
                <description>Movie bar specialized for X-ray data sets.</description>
              </item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Controls.Control">Control Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.XrayMovieBar">XrayMovieBar Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.MovieBarArranger">MovieBarArranger class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.MovieBarCoreArranger">MovieBarCoreArranger class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MovieBar.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MovieBar.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.HasSeriesNavigationProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.HasSeriesNavigation"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.HasFrameRateControlsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.HasFrameRateControls"/> dependency property.
            </summary>
            <remarks>
            The default value is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.PinningModeProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.PinningMode"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.IsPinnedProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.IsPinned"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.MouseOffOpacityProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.MouseOffOpacity"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.IsImageAndSeriesNavigationRepeatingProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.IsImageAndSeriesNavigationRepeating"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.PreviousSeriesCommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.PreviousSeriesCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.PreviousSeriesIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.PreviousSeriesIcon"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the default <see cref="T:System.Windows.Media.ImageSource"/> value.
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.PreviousSeriesToolTipProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.PreviousSeriesToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.NextSeriesCommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.NextSeriesCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.NextSeriesIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.NextSeriesIcon"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the default <see cref="T:System.Windows.Media.ImageSource"/> value.
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.NextSeriesToolTipProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.NextSeriesToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.PreviousImageCommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.PreviousImageCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.PreviousImageIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.PreviousImageIcon"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the default <see cref="T:System.Windows.Media.ImageSource"/> value.
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.PreviousImageToolTipProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.PreviousImageToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.NextImageCommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.NextImageCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.NextImageIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.NextImageIcon"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the default <see cref="T:System.Windows.Media.ImageSource"/> value.
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.NextImageToolTipProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.NextImageToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.PlayPauseCommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.PlayPauseCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.IsPlayingProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.IsPlaying"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.PlayMovieToolTipProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.PlayMovieToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.PauseMovieToolTipProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.PauseMovieToolTip"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MovieBar.OnFrameRateValuesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.FrameRateValues"/> dependency property.
            </summary>
            <param name="d">
            The dependency object (i.e., the movie bar) that is the source of the changes.
            </param>
            <param name="e">The event arguments that document the changes.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when an attempt is made to set the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.FrameRateValues"/> property
            to <see langword="null"/>.
            </exception>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.FrameRateValuesProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.FrameRateValues"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.MinimumFrameRateProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.MinimumFrameRate"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.MaximumFrameRateProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.MaximumFrameRate"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.FrameRateProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.FrameRate"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.RecommendedFrameRateProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.RecommendedFrameRate"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.FrameRateTickFrequencyProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.FrameRateTickFrequency"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.DisplayFrameRateTickFrequencyProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.DisplayFrameRateTickFrequency"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.FrameRateToolTipProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.FrameRateToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.FrameRateUnitProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.FrameRateUnit"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.IncreaseFrameRateToolTipProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.IncreaseFrameRateToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.DecreaseFrameRateToolTipProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.DecreaseFrameRateToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.MovieFrameRateIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.MovieFrameRateIcon"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the default <see cref="T:System.Windows.Media.ImageSource"/> value.
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.IsFrameRateCyclicProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.IsFrameRateCyclic"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.LeftLegContentProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.LeftLegContent"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBar.RightLegContentProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.RightLegContent"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MovieBar.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MovieBar.GetTopLeftXPositionMovieBar">
            <summary>
            Gets the top-left X position of the movie bar within the "PART_MainContainer".
            </summary>
            <returns>
            Returns x-coordinate of the top-left part of the movie bar, if position could not be
            found returns <see cref="F:System.Double.NaN"/>.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MovieBar.UpdateRecommendedFrameRateThumb(Philips.Platform.Presentation.Controls.MovieBar)">
            <summary>
            Updates the visualization of the recommendedFrameRateThumb.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MovieBar.SetDlsRecommendedFrameRateThumbMargin(Philips.Platform.Presentation.Controls.MovieBar,System.Double)">
            <summary>
            Sets the sDLS recommendedFrameRateThumb margin.
            </summary>
            <param name="movieBar">The movie bar that hosts the frame rate thumb.</param>
            <param name="recommendedFrameRateScaleFraction">The relative height
            compared with the frame rate slider.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MovieBar.ApplyPinningMode(Philips.Platform.Presentation.Controls.PinningMode)">
            <summary>
            Applies the specified pinning mode.
            </summary>
            <param name="pinningMode">The pinning mode to apply.</param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.HasSeriesNavigation">
            <summary>
            Gets or sets whether the movie bar has a user interface to navigate through a series,
            run, or loop of images or frames.
            </summary>
            <remarks>
            <para>
            Typically, the movie bar will show buttons to navigate to the next and the previous
            series if this property is set to <see langword="true"/>. However, it is the
            responsibility of the movie bar style to visualize this state in an appropriate way.
            </para>
            <para>
            The default value of this property is <see langword="true"/>.
            </para>
            <para>
            A viewer that always shows one single series, run, or loop will typically set this
            property to <see langword="false"/>, because in that case no series navigation will be
            required.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.HasFrameRateControls">
            <summary>
            Gets or sets whether the movie bar has controls for settings the frame rate
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.HasFrameRateControlsProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.PinningMode">
            <summary>
            Gets or sets the pinning mode.
            </summary>
            <remarks>
            The default value of this property is
            <see cref="F:Philips.Platform.Presentation.Controls.PinningMode.PinManual"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.IsPinned">
            <summary>
            Gets or sets whether the movie control is pinned.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.IsPinnedProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.MouseOffOpacity">
            <summary>
            Gets or sets the opacity of the movie bar
            when the mouse is not over it.
            </summary>
            <remarks>
            <para>
            This property is to be used by the control template of the <see cref="T:Philips.Platform.Presentation.Controls.MovieBar"/>.
            </para>
            <para>
            The default value of this property is <b>0.5</b>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.IsImageAndSeriesNavigationRepeating">
            <summary>
            Get or sets if the image and series navigation buttons support repeating.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.PreviousSeriesCommand">
            <summary>
            Gets or sets the command to navigate to the  previous series.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.PreviousSeriesCommandProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.PreviousSeriesIcon">
            <summary>
            Gets or sets the icon that is displayed to indicate the previous series (or run)
            feature.
            </summary>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.PreviousSeriesToolTip">
            <summary>
            Gets or sets the tooltip for the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.PreviousSeriesCommand"/>.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.PreviousSeriesToolTipProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value of this property is <seealso cref="P:Philips.Platform.Presentation.TextResources.PreviousSeries"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.NextSeriesCommand">
            <summary>
            Gets or sets the command to navigate to the next series (or run).
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.NextSeriesCommandProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.NextSeriesIcon">
            <summary>
            Gets or sets the icon that is displayed to indicate the next series (or run) feature.
            </summary>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.NextSeriesToolTip">
            <summary>
            Gets or sets the tooltip for the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.NextSeriesCommand"/>.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.NextSeriesToolTipProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value of this property is <seealso cref="P:Philips.Platform.Presentation.TextResources.NextSeries"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.PreviousImageCommand">
            <summary>
            Gets or sets the command to navigate to the previous image.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.PreviousImageCommandProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.PreviousImageIcon">
            <summary>
            Gets or sets the icon that is displayed to indicate the previous image
            (or previous frame) feature.
            </summary>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.PreviousImageToolTip">
            <summary>
            Gets or sets the tooltip for the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.PreviousImageCommand"/>.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.PreviousImageToolTipProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value of this property is <seealso cref="P:Philips.Platform.Presentation.TextResources.PreviousImage"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.NextImageCommand">
            <summary>
            Gets or sets the command to navigate to the next image.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.NextImageCommandProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.NextImageIcon">
            <summary>
            Gets or sets the icon that is displayed to indicate the next image
            (or next frame) feature.
            </summary>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.NextImageToolTip">
            <summary>
            Gets or sets the tooltip for the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.NextImageCommand"/>.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.NextImageToolTipProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value of this property is <seealso cref="P:Philips.Platform.Presentation.TextResources.NextImage"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.PlayPauseCommand">
            <summary>
            Gets or sets the command that is used to play or pause the movie.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.PlayPauseCommandProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.IsPlaying">
            <summary>
            Gets or sets whether the movie is playing.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.PlayMovieToolTip">
            <summary>
            Gets or sets the tooltip for the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.PlayPauseCommand"/> that is displayed
            to indicate that the movie is currently paused, and can be played.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.PlayMovieToolTipProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <seealso cref="P:Philips.Platform.Presentation.TextResources.PlayMovie"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.PauseMovieToolTip">
            <summary>
            Gets or sets the tooltip for the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.PlayPauseCommand"/> that is displayed
            to indicate that the movie is currently playing, and can be paused.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.PauseMovieToolTipProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <seealso cref="P:Philips.Platform.Presentation.TextResources.PauseMovie"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.FrameRateValues">
            <summary>
            Gets or sets the available frame rates.
            </summary>
            <remarks>
            <para>
            The default value is an empty collection.
            </para>
            <para>
            When the collection is not empty, the values of the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.MinimumFrameRate"/> and
            <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.MaximumFrameRate"/> properties will correspond to the smallest and largest
            values in the collection of frame rate values. This collection will be leading, and
            explicitly setting the minimum and maximum frame rate to values outside the collection
            will have no effect.
            </para>
            <para>
            Furthermore, when the collection of frame rate values is not empty,
            the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.FrameRateTickFrequency"/> and <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.DisplayFrameRateTickFrequency"/>
            are ignored.
            </para>
            <para>
            This property may not be set to <see langword="null"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when an attempt is made to set this property to <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.MinimumFrameRate">
            <summary>
            Gets or sets the minimum frame rate.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.MinimumFrameRateProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            <para>
            The default value is <see cref="F:System.Double.NaN"/>.
            </para>
            <para>
            If the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.FrameRateValues"/> are set explicitly, this property will return the
            smallest value from the collection of frame rate values. Setting this property
            explicitly will have no effect in that case, as the collection of frame rate values is
            leading.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.MaximumFrameRate">
            <summary>
            Gets or sets the maximum frame rate.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.MaximumFrameRateProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            <para>
            The default value is <see cref="F:System.Double.NaN"/>.
            </para>
            <para>
            If the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.FrameRateValues"/> are set explicitly, this property will return the
            largest value from the collection of frame rate values. Setting this property
            explicitly will have no effect in that case, as the collection of frame rate values is
            leading.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.FrameRate">
            <summary>
            Gets or sets the current frame rate.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.FrameRateProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <see cref="F:System.Double.NaN"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.RecommendedFrameRate">
            <summary>
            Gets or sets the recommended frame rate (e.g. acquisition frame rate).
            </summary>
            <seealso cref="P:Philips.Platform.Presentation.Controls.MovieBar.RecommendedFrameRate">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <see cref="F:System.Double.NaN"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.FrameRateTickFrequency">
            <summary>
            Gets or sets the interval between frame rate tick marks.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.FrameRateTickFrequencyProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <b>1.0d</b>.
            This property is ignored when FrameRateValues is set.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.DisplayFrameRateTickFrequency">
            <summary>
            Gets or sets the displayed interval between frame rate tick marks.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.DisplayFrameRateTickFrequencyProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <b>1.0d</b>.
            This property is ignored when FrameRateValues is set.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.FrameRateToolTip">
            <summary>
            Gets or sets the tooltip for the frame rate.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.FrameRateToolTipProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <seealso cref="P:Philips.Platform.Presentation.TextResources.FrameRate"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.FrameRateUnit">
            <summary>
            Gets or sets the text for the units on the frame rate button.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.FrameRateUnitProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <seealso cref="P:Philips.Platform.Presentation.TextResources.FrameRateUnit"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.IncreaseFrameRateToolTip">
            <summary>
            Gets or sets the tooltip for the increase frame rate button.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.IncreaseFrameRateToolTipProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <seealso cref="P:Philips.Platform.Presentation.TextResources.IncreaseFrameRate"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.DecreaseFrameRateToolTip">
            <summary>
            Gets or sets the tooltip for the decrease frame rate button.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.DecreaseFrameRateToolTipProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <seealso cref="P:Philips.Platform.Presentation.TextResources.DecreaseFrameRate"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.MovieFrameRateIcon">
            <summary>
            Gets or sets the icon that is displayed to indicate the movie frame rate.
            </summary>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.IsFrameRateCyclic">
            <summary>
            Gets or sets whether adjusting the frame rate can be done in a cyclic fashion.
            </summary>
            <remarks>
            <para>
            If the value of this property is <see langword="true"/>, the user can navigate through
            the available frame rate values in a cyclical fashion. This means that, if the user
            reaches the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.MaximumFrameRate"/>, navigation through the frame rates will
            automatically resume starting from the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.MinimumFrameRate"/>. Conversely, if
            the user reaches the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.MinimumFrameRate"/>, navigation will resume starting
            from the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.MaximumFrameRate"/>.
            </para>
            <para>
            If, on the other hand, the value of this property is <see langword="false"/>, the user
            will not be able to navigate beyond the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.MinimumFrameRate"/> or the
            <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.MaximumFrameRate"/>; rather, the minimum and the maximum constitute hard
            boundaries on the navigation capabilities of the user.
            </para>
            </remarks>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBar.IsFrameRateCyclicProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.LeftLegContent">
            <summary>
            Gets or sets the additional content for the left leg.
            </summary>
            <remarks>
            <para>
            The default value of this property is <see langword="null"/>.
            </para>
            <para>
            The value of this property is typically set to a single button or a horizontal
            stack panel with two or more buttons.
            </para>
            <para>
            <b>Note:</b> If the movie bar does not fit in the available space, it will not show
            this content on the overflow pop-up.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBar.RightLegContent">
            <summary>
            Gets or sets the additional content for the right leg.
            </summary>
            <remarks>
            <para>
            The default value of this property is <see langword="null"/>.
            </para>
            <para>
            The value of this property is typically set to a single button or a horizontal
            stack panel with two or more buttons.
            </para>
            <para>
            <b>Note:</b> If the movie bar does not fit in the available space, it will not show
            this content on the overflow pop-up.
            </para>
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.MovieBarArranger">
            <summary>
            Custom panel that lays out (arranges) the <see cref="T:Philips.Platform.Presentation.Controls.MovieBar"/>.
            </summary>
            <remarks>
            <para>
            The <b>MovieBarArranger</b> is a helper control for the <see cref="T:Philips.Platform.Presentation.Controls.MovieBar"/> that takes
            care of measuring and arranging the movie bar's template child controls.
            </para>
            <para>
            The movie bar consists of a core (PART_Core) that hosts the play/pause button. This core
            part is measured and arranged by another dedicated helper control, the
            <see cref="T:Philips.Platform.Presentation.Controls.MovieBarCoreArranger"/>.
            </para>
            <para>
            In addition to the core part, the movie bar has a left leg (PART_LeftLegContent),
            a right leg (PART_RightLegContent), a pin button (PART_Pin), and an overflow button
            (PART_OverflowButton). It is the responsibility of the <b>MovieBarArranger</b> to
            host these child controls, measure them, and arrange them. If all the parts fit in
            the available space, they will all be arranged in the first layer of the movie bar,
            in other words they will all be visible. If there is not enough space to fit all the
            parts, the left and right legs will be collapsed, and their content will be placed on
            an overflow popup panel that pops up when the overflow button is clicked. Note that
            the overflow button will only be visible if the left and right leg are not. The pin
            button will always be visible, unless the movie bar is configured to not expose the
            pin button - there are use cases where the movie bar is always pinned, so the pin
            button does not need to be there.
            </para>
            <para>
            Note that this movie bar arranger relies on the presence of certain template parts in
            the movie bar style, corresponding to the child elements that need to be arranged:
            <list type="bullet">
              <item>
                <term>PART_Core</term>
                <description>The core part of the movie bar, hosting the play/pause
                button.</description>
              </item>
              <item>
                <term>PART_LeftLegContent</term>
                <description>The left leg of the movie bar, hosting custom content on the left side
                of the movie bar core.</description>
              </item>
              <item>
                <term>PART_RightLegContent</term>
                <description>The right leg of the movie bar, hosting custom content on the right side
                of the movie bar core.</description>
              </item>
              <item>
                <term>PART_Pin</term>
                <description>The pin button, which can be used to set the pinning or auto-hide behavior
                of the movie bar.</description>
              </item>
              <item>
                <term>PART_OverflowButton</term>
                <description>The overflow button, which is shown if there is not enough space available
                to show the entire movie bar content. The controls that cannot be shown are placed on
                an overflow popup panel that is shown when the overflow button is clicked.</description>
              </item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Controls.Panel">Panel Class</seealso> 
            <seealso cref="T:Philips.Platform.Presentation.Controls.MovieBar">MovieBar Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.MovieBarCoreArranger">MovieBarCoreArranger Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBarArranger.ScalingLevelProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBarArranger.ScalingLevel"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBarArranger.IsCoreFullSizeProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBarArranger.IsCoreFullSize"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBarArranger.FullSizeFitsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBarArranger.FullSizeFits"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>, but the value only
            really has meaning after the <see cref="M:Philips.Platform.Presentation.Controls.MovieBarArranger.MeasureOverride(System.Windows.Size)"/> method has been executed.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MovieBarArranger.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the size in layout required for child elements. In this particular case,
            the child elements are the movie bar core, the left leg, the right leg, the pin button,
            and the overflow button.
            </summary>
            <param name="availableSize">
            The available size that this element can give to child elements. Infinity can be
            specified as a value to indicate that the element will size to whatever content
            is available.
            </param>
            <returns> 
            The size that movie bar needs during layout, based sizes of the left leg, the right
            leg and the core. If the full version fits in the availabeSpace, the size of the
            full version is returned, otherwise the size of the core only.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MovieBarArranger.ArrangeOverride(System.Windows.Size)">
            <summary>
            Overrides the arrangement of the left leg, the right leg, and the core of the movie bar.
            </summary>
            <param name="finalSize">
            The final area within the parent the movie bar should use to arrange itself and its 
            children.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MovieBarArranger.ArrangeFullSize(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Arranges the child controls assuming that they all fit in the available space.
            </summary>
            <param name="coreRect">The rectangle reserved for the movie bar core.</param>
            <param name="coreCenter">The center of the movie bar core.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MovieBarArranger.ArrangeCollapsed(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Arranges the child controls assuming that they do not all fit in the available space.
            </summary>
            <param name="coreRect">The rectangle reserved for the movie bar core.</param>
            <param name="coreCenter">The center of the movie bar core.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MovieBarArranger.ArrangeChild(System.Windows.UIElement,System.Windows.Rect)">
            <summary>
            Arranges the specified child element given the final size for that child element.
            </summary>
            <param name="child">The child element to arrange.</param>
            <param name="finalRect">
            The final size that the parent computes for the child element, provided as a
            <see cref="T:System.Windows.Rect"/> instance. A zero-sized final rectangle effectively means
            that the child is not visible.
            </param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBarArranger.ScalingLevel">
            <summary>
            Gets or sets whether the Scaling Level of the moviebar.
            </summary>
            <seealso cref="P:Philips.Platform.Presentation.Controls.MovieBarArranger.ScalingLevel">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <see langword="MovieBarScalingLevel.Large"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBarArranger.IsCoreFullSize">
            <summary>
            Gets or sets whether the core of the movie bar is at full or reduced size.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBarArranger.IsCoreFullSizeProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBarArranger.FullSizeFits">
            <summary>
            Gets whether the desired size of the all the child elements (core, left leg, right leg,
            and pin button) fits on the movie bar.
            </summary>
            <remarks>
            This is a read-only property because the movie bar arranger determines the value of
            this property, it cannot be determined and set from the outside.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.MovieBarButton">
            <summary>
            Custom <see cref="T:System.Windows.Controls.Primitives.RepeatButton"/> that is used to implement repeat behavior for various
            buttons that are used in the context of the <see cref="T:Philips.Platform.Presentation.Controls.MovieBar"/>.
            </summary>
            <remarks>
            The <see cref="T:Philips.Platform.Presentation.Controls.MovieBar"/> is a control that hosts several buttons dedicated to navigating
            through a collection of images, such as <i>Next Image</i>, <i>Previous Image</i>,
            <i>Next Series</i>, <i>Previous Series</i>, etc. From a usability point of view, it may be
            better for these buttons to expose repeat behavior, so that the user can quickly navigate
            by just keeping the repeat button pressed. This custom <b>MovieBarButton</b> does exactly
            that. It can be customized to expose repeat button behavior by setting the
            <see cref="P:Philips.Platform.Presentation.Controls.MovieBarButton.IsRepeating"/> property to true.
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.MovieBar">MovieBar Class</seealso>
            <seealso cref="T:System.Windows.Controls.Primitives.RepeatButton">RepeatButton Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBarButton.IsRepeatingProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBarButton.IsRepeating"/> dependency property. 
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBarButton.IsRepeating">
            <summary>
            Gets or sets whether the movie bar button supports repeat behavior.
            </summary>
            <remarks>
            The default value is <see langword="false"/>.
            </remarks> 
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.MovieBarCoreArranger">
            <summary>
            Custom panel that lays out (arranges) the central part (core) of the <see cref="T:Philips.Platform.Presentation.Controls.MovieBar"/>.
            </summary>
            <remarks>
            <para>
            The <b>MovieBarCoreArranger</b> is a helper control for the <see cref="T:Philips.Platform.Presentation.Controls.MovieBar"/> that takes
            care of measuring and arranging the movie bar core's template child controls.
            </para>
            <para>
            The movie bar consists of a core (PART_Core) that hosts the play/pause button. In addition
            to the core, the movie bar can have custom content to the left and the right of the core
            (PART_LeftLegContent and PART_RightLegContent), a pin button (PART_Pin), and an overflow
            button (PART_OverflowButton). The movie bar as a whole is measured and arranged by the
            <see cref="T:Philips.Platform.Presentation.Controls.MovieBarArranger"/> class. This <b>MovieBarCoreArranger</b> class is only
            responsible for measuring and arranging the core.
            </para>
            <para>
            The movie bar core itself consists of a number of elements, which should be defined as
            template parts in the movie bar's style:
            <list type="bullet">
              <item>
                <term>PART_PlayPauseButton</term>
                <description> The play/pause button which is the most basic feature of
                the movie bar.</description>
              </item>
              <item>
                <term>PART_Ellipse</term>
                <description>The ellipse (or rather the circle) that hosts the play/pause
                button.</description>
              </item>
              <item>
                <term>PART_LeftCoreContent</term>
                <description>The default movie bar controls to the left of the play/pause button.
                Typically, these include controls to navigate to the previous image/frame and
                the previous series/run.</description>
              </item>
              <item>
                <term>PART_RightCoreContent</term>
                <description>The default movie bar controls to the right of the play/pause button.
                Typically, these include controls to navigate to the next image/frame and
                the next series/run.</description>
              </item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Controls.Panel">Panel class</seealso> 
            <seealso cref="T:Philips.Platform.Presentation.Controls.MovieBar">MovieBar class</seealso> 
            <seealso cref="T:Philips.Platform.Presentation.Controls.MovieBarArranger">Custom panel Class that layouts the MovieBar</seealso> 
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBarCoreArranger.IsFullSizeProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MovieBarCoreArranger.IsFullSize"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MovieBarCoreArranger.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the size of the left leg, the play/pause button, and the right leg of the
            movie bar core.
            </summary>
            <param name="availableSize">
            The available size that this element can give to child elements. Infinity can be
            specified as a value to indicate that the element will size to whatever content
            is available.
            </param>
            <returns>
            The size that movie bar core needs during layout, based sizes of the left leg, the right
            leg and the play button. If the full version fits in the availabeSpace, the size of the
            full version is returned, otherwise the size of the play button only.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MovieBarCoreArranger.ArrangeOverride(System.Windows.Size)">
            <summary>
            Override the arrangement of the left leg, the play button, and the right leg.
            </summary>
            <param name="finalSize">
            The final area within the parent that core of the movie bar should use to arrange
            itself and its children.
            </param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MovieBarCoreArranger.IsFullSize">
            <summary>
            Gets or sets whether the core of the movie bar is at full or reduced size.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.MovieBarCoreArranger.IsFullSizeProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <see langword="true"/>.
            </remarks> 
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.MovieBarScalingLevel">
            <summary>
            Enumeration defining the various movie bar scaling options.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBarScalingLevel.ExtremelySmall">
            <summary>
            Only PART_PlayPauseButton
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBarScalingLevel.VerySmall">
            <summary>
            Only PART_PlayPauseButton and PART_OverflowButton
            </summary>
            <remarks>
            There is only space for the play/pause button + the overflow button, i.e., the 
            pin button does not fit.
            The play/pause button is shown.
            All other movie controls are moved to the overflow popup.
            The pin button is moved to the overflow popup (if pinning is required).
            The overflow button is shown.
            This is not specified in the Visual Guide, but needs to be addressed anyway.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBarScalingLevel.Small">
            <summary>
            Additionally: PART_Pin
            </summary>
            <remarks>The movie bar does not fit in the available space, and neither does 
            the movie bar core, but the pin button does.
            The play/pause button is shown.
            All other movie bar controls are moved to the overflow popup.
            The pin button is shown (if pinning is required).
            The overflow button is shown.
            This is called "MovieBar used on Small Image" in the Visual Guide
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBarScalingLevel.Medium">
            <summary>
            Additionally: parts PART_LeftCoreContent and PART_RightCoreContent.
            </summary>
            <remarks>
            The movie bar does not fit in the available space, but the movie bar core and 
            the pin button do.
            All movie bar core controls are shown.
            All other movie bar controls are moved to the overflow popup.
            The pin button is shown (if pinning is required).
            The overflow button is shown.
            This is called "MovieBar used on Medium Image" in the Visual Guide
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MovieBarScalingLevel.Large">
            <summary>
            Additionally: parts PART_LeftLegContent and PART_RightLegContent.
            </summary>
            <remarks>
            The movie bar fits in the available space. All movie bar controls are shown. 
            The pin button is shown (if pinning is required).
            The overflow button is not shown.
            This is called "MovieBar used on Large Image" in the Visual Guide "FullSizeFits".
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.MRMovieBar">
            <summary>
            Custom control that provides basic movie and navigation functionality that is
            suitable for MR data.
            </summary>
            <remarks>
            <para>
            The <c>MRMovieBar</c> expects various additional named template parts to be defined in its
            control template. These template parts are:
            <list type="bullet">
              <item>
                <term>PART_PreviousImageButton</term>
                <description>
            The previous image button. Clicking this will navigate to the previous image in the movie.
            </description>
              </item>
              <item>
                <term>PART_MovieNavigationDimensionSplitButton</term>
                <description>
                    The movie dimension split button. Clicking this will change the movie navigation
                    dimension.
                </description>
              </item>
              <item>
                <term>PART_NextImageButton</term>
                <description>
                    The next image button. Clicking this will navigate to the next image in the movie.
                </description>
              </item>
              <item>
                <term>PART_MovieDirectionSplitButton</term>
                <description>
                    The movie direction split button. Clicking this will change the movie direction.
                </description>
              </item>
              <item>
                <term>PART_LeftCoreContent</term>
                <description>The container for the PART_PreviousImageButton.</description>
              </item>
              <item>
                <term>PART_LeftWingBackground</term>
                <description>
                    An item that is the background for the left wing or leg. Does not contain any items.
                </description>
              </item>
              <item>
                <term>PART_RightCoreContent</term>
                <description>
                    The container for the PART_MovieDirectionSplitButton, PART_FrameRateIndexSlider,
                    PART_Pin and PART_OverflowButton.
                </description>
              </item>
              <item>
                <term>PART_RightWingBackground</term>
                <description>
                    An item that is the background for the right wing or leg. Does not contain any
                    items.
                </description>
              </item>
              <item>
                <term>PART_FrameRateIndexSlider</term>
                <description>
                    The frame rate index slider. Clicking the button shows a slider that can change the
                    frame rate of the movie.
                </description>
              </item>
            </list>
            </para>
            <para>This class provides movie functionality that is specialized for MR.</para>
            <para>
            The user can navigate through the available frame rate values. These are either determined
            by the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.MinimumFrameRate"/> and <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.MaximumFrameRate"/>
            properties, which allow for a continuous range of frame rate values; or they are determined
            by explicitly setting a collection of available frame rate values using the
            <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.FrameRateValues"/> property, which allows the application builder to
            define a fixed set of discrete frame rate values.
            </para>
            <para>
            Navigation through the frame rate values is either cyclic, or it respects the boundaries
            set by the minimum and maximum frame rate values. This latter mode is the default, as it
            corresponds most naturally to the user's expectations of this behavior. The default behavior
            can be changed by setting the value of the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.IsFrameRateCyclic"/> property
            to <see langword="true"/>.
            </para>
            <para>
            This class provides basic movie functionality that is specialized for Mr. If you need
            specific movie functionality for your modality, or for your type of clinical data, you can
            implement a dedicated movie bar that derives from this basic movie bar, or you can
            implement one from scratch.
            </para>
            <para>
            The WPF Presentation Toolkit provides a number of dedicated, specialized movie bars:
            <list type="bullet">
              <item>
                <term><see cref="T:Philips.Platform.Presentation.Controls.MRMovieBar"/></term>
                <description>Movie bar specialized for MR data sets.</description>
              </item>
              <item>
                <term><see cref="T:Philips.Platform.Presentation.Controls.XrayMovieBar"/></term>
                <description>Movie bar specialized for X-ray data sets (this class).</description>
              </item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.MovieBar">MovieBar Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.XrayMovieBar">XrayMovieBar Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MRMovieBar.#ctor">
            <summary>
            Initializes a new <see cref="T:Philips.Platform.Presentation.Controls.MRMovieBar"/> instance.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MRMovieBar.IconOnlyCommandTemplateProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MRMovieBar.IconOnlyCommandTemplate"/>
            dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MRMovieBar.IconAndTextCommandTemplateProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MRMovieBar.IconAndTextCommandTemplate"/>
            dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MRMovieBar.IsDimensionNavigationEnabledProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MRMovieBar.IsDimensionNavigationEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MRMovieBar.SelectedMovieDirectionCommandProperty">
            <summary>
            Identifies the <see cref="F:Philips.Platform.Presentation.Controls.MRMovieBar.SelectedMovieDirectionCommandProperty"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MRMovieBar.MovieDirectionCommandsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MRMovieBar.MovieDirectionCommands"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MRMovieBar.SelectedMovieNavigationDimensionCommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MRMovieBar.SelectedMovieNavigationDimensionCommand"/>
            dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.MRMovieBar.MovieNavigationDimensionCommandsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.MRMovieBar.MovieNavigationDimensionCommands"/> dependency property.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MRMovieBar.IconOnlyCommandTemplate">
            <summary>
            Gets or sets the data template that provides an icon only.
            </summary>
            <remarks>
            The default value of this property is null. It is up to the integrator to provide
            a value.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MRMovieBar.IconAndTextCommandTemplate">
            <summary>
            Gets or sets the data template that provides both icon and text.
            </summary>
            <remarks>
            The default value of this property is null. It is up to the integrator to provide
            a value.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MRMovieBar.IsDimensionNavigationEnabled">
            <summary>
             Gets or sets the enable attribute of the movie navigation dimension.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MRMovieBar.SelectedMovieDirectionCommand">
            <summary>
            Gets or sets the current movie direction.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MRMovieBar.MovieDirectionCommands">
            <summary>
            Gets or sets the collection of movie direction commands associated with
            the MR movie bar.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MRMovieBar.SelectedMovieNavigationDimensionCommand">
            <summary>
            Gets or sets the current movie navigation dimension command.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.MRMovieBar.MovieNavigationDimensionCommands">
            <summary>
            Gets or sets the collection of movie navigation dimension commands associated with
            the MR movie bar.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.NamespaceDoc">
            <summary>
            Provides custom WPF controls that are specific to the medical (imaging) domain.
            Each of these controls represents a dedicated control as defined by the
            <see href="https://share.philips.com/sites/STS20150717093007/SitePages/UICC/Welcome%20to%20the%20User%20Interface%20Competence%20Center.aspx">User Interface Competence Center (UICC)</see>
            that is not provided out-of-the-box by WPF.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.NavigationItem">
            <summary>
            Custom <see cref="T:System.Windows.Controls.TabItem"/> that represents a navigation item, which is hosted in a
            <see cref="T:Philips.Platform.Presentation.Controls.NavigationPane"/>.
            </summary>
            <remarks>
            <para>
            A <c>NavigationItem</c> is a custom <c>TabItem</c> that should always be hosted in a
            <c>NavigationPane</c>. It consists of a <see cref="P:Philips.Platform.Presentation.Controls.NavigationItem.NavigationIndex"/>,
            a <see cref="P:Philips.Platform.Presentation.Controls.NavigationItem.Label"/>, and an <see cref="P:Philips.Platform.Presentation.Controls.NavigationItem.Icon"/>, which are visualized according to
            the various states of the navigation pane (Expanded or Collapsed, List Mode or Tiles Mode,
            etc.)
            </para>
            <para>
            A <c>NavigationItem</c> can have content, which is displayed if the navigation pane that
            hosts the navigation item is expanded, and the navigation item is selected. If the
            navigation pane is collapsed, there is not enough space to show this content, which is
            usually a panel with multiple controls. As an alternative, the content is hosted in a
            <see cref="T:System.Windows.Controls.Primitives.Popup"/> which is shown when the user clicks an (already) selected navigation
            item. To allow for maximum flexibility, it is not enforced that the regular content must
            be the same as the collapsed popup content. To this end, a <c>NavigationItem</c> has a
            dependency property called <see cref="P:Philips.Platform.Presentation.Controls.NavigationItem.PopupContent"/>, which can be used to define the
            content of the popup that is associated with a collapsed navigation item. The <c>Popup</c>
            that is used to host this content is expected to exist as a template part with the name
            "PART_CollapsedContentPopup".
            </para>
            <para>
            The popup that shows the collapsed content by default disappears if the user clicks
            anywhere outside the popup. The discoverability of this feature can be problematic, though,
            as not all users are inclined to click just anywhere on the screen.
            As a further aid to the user, the popup can display a close button. By default, this close
            button will be shown, but this can be configured using the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItem.HasPopupCloseButton"/>
            dependency property. The close button is expected to exist as a template part with the
            name "PART_PopupCloseButton".
            </para>
            <para>
            In addition to the <c>Popup</c>, the user can also define regular content to be displayed
            in the navigation item's collapsed state. This regular content is usually a vertical row
            of buttons, which somehow summarize the full content of the navigation item.
            </para>
            <para>
            A detailed explanation of the capabilities of the <c>NavigationPane</c> and the
            <c>NavigationItem</c> can be found in the Philips Design document "Side Panel - Task
            Guidance and Global Tools".
            </para>
            <example>
            The following example shows how to define a <c>NavigationItem</c> in the context of an
            expanded <c>NavigationPane</c>. The navigation item represents the Segmentation task in
            a clinical application, and its regular content consists of two
            <c>NavigationItemStepExpander</c>s.
            <code lang="csharp">
            <![CDATA[
            <pt:NavigationPane x:Name="navigationPane">
                <pt:NavigationItem x:Name="segmentationNavigationItem"
                    NavigationIndex="1"
                    Label="Segmentation"
                    Icon="{StaticResource TaskGuidanceSegmentationIcon}">
                    <StackPanel>
                        <NavigationItemStepExpander x:Name="redoStepExpander"
                            IsExpanded="False"
                            HeaderText="Redo segmentation">
                            <StackPanel>
                                <Button Content="Draw Path"/>
                                <Button Content="Segment Path"/>
                            </StackPanel>
                        </NavigationItemStepExpander>
                        <NavigationItemStepExpander x:Name="verifyStepExpander"
                            IsExpanded="true"
                            HeaderText="Verify segmentation">
                            <StackPanel>
                                <Button Content="Verify landmarks"/>
                                <Button Content="Verify Path"/>
                            </StackPanel>
                        </NavigationItemStepExpander>
                    </StackPanel>
                </pt:NavigationItem>
            </pt:NavigationPane
            ]]>
            </code>
            </example>
            <example>
            The following example shows how to define the same <c>NavigationItem</c> in the context of a
            collapsed <c>NavigationPane</c>. The content of the navigation item, which is the same as in
            the previous example, is now assigned to the <c>PopupContent</c> property, such that it will
            be shown in a popup when the user clicks the (selected) navigation item.
            <code lang="csharp">
            <![CDATA[
            <pt:NavigationPane x:Name="navigationPane">
                <pt:NavigationItem x:Name="segmentationNavigationItem"
                    NavigationIndex="1"
                    Label="Segmentation"
                    Icon="{StaticResource TaskGuidanceSegmentationIcon}">
                    <pt:NavigationItem.PopupContent>
                        <NavigationItemStepExpander x:Name="redoStepExpander"
                            IsExpanded="False"
                            HeaderText="Redo segmentation">
                            <StackPanel>
                                <Button Content="Draw Path"/>
                                <Button Content="Segment Path"/>
                            </StackPanel>
                        </NavigationItemStepExpander>
                    </pt:NavigationItem.PopupContent>
                </pt:NavigationItem>
            </pt:NavigationPane
            ]]>
            </code>
            </example>
            </remarks>
            <seealso cref="T:System.Windows.Controls.TabItem">TabItem Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.NavigationPane">NavigationPane Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NavigationItem.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationItem.NavigationIndexProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItem.NavigationIndex"/> dependency property.
            </summary>
            <remarks>
            The default navigation index is 1.
            </remarks> 
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationItem.LabelProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItem.Label"/> dependency property.
            </summary>
            <remarks>
            The default label is the empty string.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationItem.IconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItem.Icon"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationItem.PopupContentProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItem.PopupContent"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationItem.HasPopupCloseButtonProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItem.HasPopupCloseButton"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NavigationItem.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the <see cref="F:System.Windows.Input.Mouse.PreviewMouseDownEvent"/> routed event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NavigationItem.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the <see cref="F:System.Windows.Input.Mouse.MouseUpEvent"/> routed event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NavigationItem.OnPopupCloseButtonClick(System.Object,System.EventArgs)">
            <summary>
            Handles the click event of the popup close button.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationItem.NavigationIndex">
            <summary>
            Gets or sets the navigation index that is used if a navigation item is displayed as
            part of an enumerated list.
            </summary>
            <remarks>
            The default navigation index is 1.
            </remarks> 
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationItem.Label">
            <summary>
            Gets or sets the label that is used to (textually) identify a navigation item.
            </summary>
            <remarks>
            The default label is the empty string.
            </remarks> 
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationItem.Icon">
            <summary>
            Gets or sets the icon that is used to (pictorially) identify a navigation item.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationItem.PopupContent">
            <summary>
            Gets or sets the content of the popup that is associated with a collapsed
            navigation item.
            </summary>
            <remarks>
            Because the <c>PopupContent</c> property is of type <see cref="T:System.Object"/>, there are no
            restrictions on what you can put in this popup content. The <c>PopupContent</c> is
            displayed as the content of a popup that is associated with a collapsed navigation item.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationItem.HasPopupCloseButton">
            <summary>
            Gets or sets whether the popup that is associated with a collapsed navigation item
            has a close button.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.NavigationItemStep">
            <summary>
            Custom control that represents one 'step' on a <see cref="T:Philips.Platform.Presentation.Controls.NavigationItem"/>.
            </summary>
            <remarks>
            <para>
            A detailed explanation of the capabilities of the <c>NavigationPane</c> and the
            <c>NavigationItem</c> can be found in the Philips Design document "Side Panel - Task
            Guidance and Global Tools".
            </para>
            <para>
            A <c>NavigationItemStep</c> can show context-sensitive help content in a dialog. To this
            end, a <c>NavigationItemStep</c> has a dependency property called <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStep.HelpContent"/>,
            which can be used to define the content of this dialog. The help ToggleButton that opens
            this dialog  is expected to exist as a template part with the name "PART_HelpToggleButton".
            The help content is shown in a <see cref="T:Philips.Platform.Presentation.Controls.HelpDialog"/>. This help dialog can be shown as
            a modeless dialog (the default), or as a modal dialog. This can be configured using the
            <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStep.IsHelpDialogModal"/> property.
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Controls.ContentControl">ContentControl Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.NavigationItem">NavigationItem Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.NavigationItemStepExpander">NavigationItemStepExpander Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.HelpDialog">HelpDialog Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationItemStep.NavigationIndexProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStep.NavigationIndex"/> dependency property.
            </summary>
            <remarks>
            The navigation index is defined to be a <see cref="T:System.String"/> rather than an integer
            to facilitate the display of the index without the need for a converter. For example,
            a common way to display the navigation index is as a number followed by a dot, e.g.,
            "1." - this is much easier if this property is a <c>string</c> rather than a number.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationItemStep.HeaderTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStep.HeaderText"/> dependency property.
            </summary>
            <remarks>
            The default value is an empty string.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationItemStep.HeaderIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStep.HeaderIcon"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationItemStep.HelpContentProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStep.HelpContent"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationItemStep.HelpDialogFontSizeProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStep.HelpDialogFontSize"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is 0.0. It is the responsibility of the style to
            give this property a proper default value.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationItemStep.IsHelpDialogModalProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStep.IsHelpDialogModal"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>. This means that, by
            default, the help content is displayed in a modeless dialog.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationItemStep.IsTopmostProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStep.IsTopmost"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NavigationItemStep.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
            <remarks>
            Currently, the arrow borders inside the template of this control are defined as
            template parts in order to be able to update them whenever the popup is opened.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NavigationItemStep.OnHelpChecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles checking of the "Help" toggle button.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NavigationItemStep.OnHelpUnchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles unchecking of the "Help" toggle button.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationItemStep.NavigationIndex">
            <summary>
            Gets or sets the navigation item step index that is used if a navigation item step
            is displayed as part of an enumerated list.
            </summary>
            <remarks>
            The navigation index is defined to be a <see cref="T:System.String"/> rather than an integer
            to facilitate the display of the index without the need for a converter. For example,
            a common way to display the navigation index is as a number followed by a dot, e.g.,
            "1." - this is much easier if this property is a <c>string</c> rather than a number.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationItemStep.HeaderText">
            <summary>
            Gets or sets the text that is displayed in the header of the navigation item step.
            </summary>
            <remarks>
            The default value is an empty string.
            </remarks> 
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationItemStep.HeaderIcon">
            <summary>
            Gets or sets the icon that is used in the header of the navigation item step.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationItemStep.HelpContent">
            <summary>
            Gets or sets the content of the dialog that displays help for this navigation item step.
            </summary>
            <remarks>
            Because the <c>HelpContent</c> property is of type <see cref="T:System.Object"/>, there are no
            restrictions on what you can put in this content. The <c>HelpContent</c> is
            displayed as the content of a dialog.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationItemStep.HelpDialogFontSize">
            <summary>
            Gets or sets the font size that is used for the (header) of the dialog that displays
            the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStep.HelpContent"/> for this navigation item step.
            </summary>
            <remarks>
            The default value of this property is 0.0. It is the responsibility of the style to
            give this property a proper default value.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationItemStep.IsHelpDialogModal">
            <summary>
            Gets or sets whether the dialog that displays the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStep.HelpContent"/> for this
            navigation item step is a modal dialog or a modeless dialog.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>. This means that, by
            default, the help content is displayed in a modeless dialog.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationItemStep.IsTopmost">
            <summary>
            Gets or sets whether this navigation item step is topmost.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.NavigationItemStepExpander">
            <summary>
            Custom control that represents one 'step' on a <see cref="T:Philips.Platform.Presentation.Controls.NavigationItem"/>.
            </summary>
            <remarks>
            <para>
            Typically, a <c>NavigationItemStepExpander</c> will be used for optional steps,
            and will initially come up in the collapsed state. The user can expand the expander
            to reveal the optional functionality.
            </para>
            <para>
            A detailed explanation of the capabilities of the <c>NavigationPane</c> and the
            <c>NavigationItem</c> can be found in the Philips Design document "Side Panel - Task
            Guidance and Global Tools".
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Controls.Expander">Expander Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.NavigationItem">NavigationItem Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.NavigationItemStep">NavigationItemStep Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.NavigationIndexProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.NavigationIndex"/> dependency property.
            </summary>
            <remarks>
            <para>
            The navigation index is defined to be a <see cref="T:System.String"/> rather than an integer
            to facilitate the display of the index without the need for a converter. For example,
            a common way to display the navigation index is as a number followed by a dot, e.g.,
            "1." - this is much easier if this property is a <c>string</c> rather than a number.
            </para>
            <para>
            The default value of this property is <see langword="null"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.HeaderTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.HeaderText"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.HeaderIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.HeaderIcon"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.HelpContentProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.HelpContent"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.HelpDialogFontSizeProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.HelpDialogFontSize"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is 0.0. It is the responsibility of the style to
            give this property a proper default value.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.IsHelpDialogModalProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.IsHelpDialogModal"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>. This means that, by
            default, the help content is displayed in a modeless dialog.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.IsTopmostProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.IsTopmost"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.OnHelpChecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles checking of the "Help" toggle button.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.OnHelpUnchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles unchecking of the "Help" toggle button.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.NavigationIndex">
            <summary>
            Gets or sets the navigation item step index that is used if a navigation item step
            is displayed as part of an enumerated list.
            </summary>
            <remarks>
            <para>
            The navigation index is defined to be a <see cref="T:System.String"/> rather than an integer
            to facilitate the display of the index without the need for a converter. For example,
            a common way to display the navigation index is as a number followed by a dot, e.g.,
            "1." - this is much easier if this property is a <c>string</c> rather than a number.
            </para>
            <para>
            The default value of this property is <see langword="null"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.HeaderText">
            <summary>
            Gets or sets the text that is displayed in the header of the navigation item step
            expander.
            </summary>
            <remarks>
            The default value of this property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.HeaderIcon">
            <summary>
            Gets or sets the icon that is used in the header of the navigation item step expander.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.HelpContent">
            <summary>
            Gets or sets the content of the dialog that displays help for this navigation item step.
            </summary>
            <remarks>
            Because the <c>HelpContent</c> property is of type <see cref="T:System.Object"/>, there are no
            restrictions on what you can put in this content. The <c>HelpContent</c> is
            displayed as the content of a dialog.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.HelpDialogFontSize">
            <summary>
            Gets or sets the font size that is used for the (header) of the dialog that displays
            the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.HelpContent"/> for this navigation item step.
            </summary>
            <remarks>
            The default value of this property is 0.0. It is the responsibility of the style to
            give this property a proper default value.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.IsHelpDialogModal">
            <summary>
            Gets or sets whether the dialog that displays the <see cref="P:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.HelpContent"/> for this
            navigation item step is a modal dialog or a modeless dialog.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>. This means that, by
            default, the help content is displayed in a modeless dialog.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationItemStepExpander.IsTopmost">
            <summary>
            Gets or sets whether this expander is the topmost in a collection of expanders.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks> 
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.NavigationPane">
            <summary>
            Custom <see cref="T:Philips.Platform.Presentation.Controls.ExtendedTabControl"/> that represents a navigation pane, which hosts
            <see cref="T:Philips.Platform.Presentation.Controls.NavigationItem"/> instances.
            </summary>
            <remarks>
            <para>
            A detailed explanation of the capabilities of the <c>NavigationPane</c> and the
            <c>NavigationItem</c> can be found in the Philips Design document "Side Panel - Task
            Guidance and Global Tools".
            </para>
            <para>
            The navigation items hosted by this navigation pane can be displayed either in "List"
            or in "Tiles" mode. This is configurable through the
            <see cref="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.UsesTiles"/> property. In "List" mode, all navigation
            items are visualized in the same way, regardless of the number of items. In "Tiles" mode,
            however, the visualization of the navigation items depends on the number of items - for
            small numbers of items (2, 3) the navigation items are relatively wide, whereas for larger
            numbers of items (4, 5) the navigation items are not so wide. If there are more than five
            items, ideally a scrolling mechanism should be provided to horizontally scroll through the
            available items. Unfortunately, such a mechanism has not been implemented yet.
            </para>
            <para>
            Because the visualization of the navigation items depends on their number, this class keeps
            track of the number of visible items through the <see cref="P:Philips.Platform.Presentation.Controls.NavigationPane.VisibleItemsCount"/> property.
            It is necessary to distinguish this from the total number of visible and invisible items.
            Changes to this property are notified through the <see cref="E:Philips.Platform.Presentation.Controls.NavigationPane.PropertyChanged"/> event, which
            allows template builders to bind to this property.
            </para>
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ExtendedTabControl">ExtendedTabControl Class</seealso>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged">INotifyPropertyChanged Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.NavigationItem">NavigationItem Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.NavigationPaneExpander">NavigationPaneExpander Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationPane.UsesEnumerationProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationPane.UsesEnumeration"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NavigationPane.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NavigationPane.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource"/> property changes.
            </summary>
            <param name="oldValue">Old value of the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource"/> property.</param>
            <param name="newValue">New value the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource"/> property.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NavigationPane.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Invoked when the <see cref="P:System.Windows.Controls.ItemsControl.Items"/> property changes.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NavigationPane.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>
            This method returns a new <see cref="T:Philips.Platform.Presentation.Controls.NavigationItem"/> instance, which is
            the element type that is hosted by a <b>NavigationPane</b>.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NavigationPane.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            <see langword="true"/>, if the specified item is a <see cref="T:Philips.Platform.Presentation.Controls.NavigationItem"/>;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NavigationPane.OnCreateAutomationPeer">
            <summary>
            Gets the automation peer for the <see cref="T:Philips.Platform.Presentation.Controls.NavigationPane"/>.
            </summary>
        </member>
        <member name="E:Philips.Platform.Presentation.Controls.NavigationPane.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationPane.UsesEnumeration">
            <summary>
            Gets or sets whether the navigation items are an enumerated
            list, or an itemized list (also known as a bullet list).
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationPane.VisibleItemsCount">
            <summary>
            Gets the number of visible items.
            </summary>
            <remarks>
            The navigation pane is an <see cref="T:System.Windows.Controls.ItemsControl"/> and as such its total number of
            items is given by the <see cref="P:System.Windows.Controls.ItemCollection.Count"/> property of this class's
            <see cref="P:System.Windows.Controls.ItemsControl.Items"/> property. However, the current property only counts
            the number of visible items, and disregards the items that are (temporarily) not
            visible.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.NavigationPaneExpander">
            <summary>
            A custom <see cref="T:System.Windows.Controls.Expander"/> that can be used to host a <see cref="T:Philips.Platform.Presentation.Controls.NavigationPane"/>
            in the sidebar.
            </summary>
            <remarks>
            <para>
            A navigation pane expander can displays its navigation items in three different View
            Modes. In the "List" view mode, the navigation items are displayed as a vertical list;
            in the "Collapsed List" view mode, the navigation items are displayed as a collapsed
            vertical list; in the "Tiles" view mode, the navigation items are displayed as a
            horizontal collection of tiles.
            These view modes are similar to the ones found in Microsoft Explorer.
            </para>
            <para>
            It is possible to configure the navigation pane expander through the dependency property
            <see cref="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.CanUseTiles"/> to either enable or disable use of the "Tiles" view mode.
            If the navigation pane expander is configured to enable use of the "Tiles" view mode,
            this view mode can be activated through the <see cref="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.UsesTiles"/> property. This property
            will have no effect if the navigation pane expander is configured to disable use of the
            "Tiles" view mode. The <see cref="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.UsesSmallTiles"/> property can be used to show small
            tiles instead of large tiles, which is the default. In the "Tiles" mode, it is possible
            to show a header which contains the title of the selected navigation item. This behavior
            is configurable through the <see cref="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.ShowsHeaderWhenUsingTiles"/> property.
            </para>
            <para>
            The style associated with this <c>NavigationPaneExpander</c> is expected to retemplate the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate"/>. The retemplated header should provide
            a visualization of the <see cref="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.HeaderIcon"/> and <see cref="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.HeaderText"/> properties,
            which are defined on the <c>NavigationPaneExpander</c> control. This makes it easier for
            application builders to use the <c>NavigationPaneExpander</c>, because they only have to
            set these two properties instead of constructing a local piece of user interface content
            that is assigned to the <see cref="P:System.Windows.Controls.HeaderedContentControl.Header"/> property.
            </para>
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SidebarExpander">SidebarExpander Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.NavigationPane">NavigationPane Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.NavigationItem">NavigationItem Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.SidebarExpander">
            <summary>
            A custom <see cref="T:System.Windows.Controls.Expander"/> that supports collapsed content.
            </summary>
            <remarks>
            <para>
            The <c>SidebarExpander</c> is a specialized <c>Expander</c> that can be used to host
            collapsible content in a sidebar, which is typically located at the left side of the
            user interface. A famous example of a sidebar is the Microsoft Outlook Navigation Pane.
            </para>
            <para>
            In addition to the functionality offered by the standard <c>Expander</c>, the
            <c>SidebarExpander</c> allows the separate hosting of a footer. This means that the
            <c>SidebarExpander</c> has a property to set the header, content, and footer. In addition,
            all three of these can be visualized differently in the expanded and the collapsed state.
            For example, the content may be visualized as a full-fledged panel in the expanded state,
            while it may be visualized as a vertical list of buttons or labels in the collapsed state.
            In general, the sidebar will not have enough real estate to visualize its entire content
            in the collapsed state. This is addressed by presenting a different, limited visualization
            in this state.
            </para>
            <para>
            Expanding and collapsing the <c>SidebarExpander</c> may or may not use animation.
            This can be configured at design-time or even at run-time through the
            <see cref="P:Philips.Platform.Presentation.Controls.SidebarExpander.UsesAnimation"/> property. Using animation may enliven the user experience,
            but it comes at the expense of less performance, and it may cause other issues with
            other user interface elements that must respond to the animation.
            </para>
            <para>
            Using animation can only be configured at the level of the entire control. This means
            that every part of the <c>SidebarExpander</c> that supports animation is either animated,
            or it is not. It is currently not possible to configure the use of animations at the
            level of individual user interface elements that are part of the <c>SidebarExpander</c>.
            </para>
            <para>
            There are use cases where the <c>SidebarExpander</c> should always be expanded, and
            collapsing it should not be an option that is offered to the end user. To facilitate
            these use cases, this class provides the <see cref="P:Philips.Platform.Presentation.Controls.SidebarExpander.IsCollapsible"/> property.
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Controls.Expander">Expander Class.</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SidebarExpander.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SidebarExpander.IsCollapsibleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SidebarExpander.IsCollapsible"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedContentProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedContent"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedContentTemplateProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedContentTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedContentTemplateSelectorProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedContentTemplateSelector"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedContentStringFormatProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedContentStringFormat"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SidebarExpander.UsesAnimationProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SidebarExpander.UsesAnimation"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedHeaderProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedHeader"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SidebarExpander.FooterProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SidebarExpander.Footer"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedFooterProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedFooter"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SidebarExpander.OnCollapsedContentPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedContent"/> dependency property.
            </summary>
            <param name="o">The dependency object on which the change has taken place.</param>
            <param name="e">The event arguments documenting the change.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SidebarExpander.OnCollapsedHeaderPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedHeader"/> dependency property.
            </summary>
            <param name="o">The dependency object on which the change has taken place.</param>
            <param name="e">The event arguments documenting the change.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SidebarExpander.OnFooterPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.SidebarExpander.Footer"/> dependency property.
            </summary>
            <param name="o">The dependency object on which the change has taken place.</param>
            <param name="e">The event arguments documenting the change.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SidebarExpander.OnCollapsedFooterPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedFooter"/> dependency property.
            </summary>
            <param name="o">The dependency object on which the change has taken place.</param>
            <param name="e">The event arguments documenting the change.</param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SidebarExpander.IsCollapsible">
            <summary>
            Gets or sets whether the sidebar expander is collapsible.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedContent">
            <summary>
            Gets or sets the collapsed content.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedContentTemplate">
            <summary>
            Gets or sets the template for the <see cref="P:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedContent"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedContentTemplateSelector">
            <summary>
            Gets or sets the template selector for the <see cref="P:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedContent"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedContentStringFormat">
            <summary>
            Gets or sets the string format for the <see cref="P:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedContent"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SidebarExpander.UsesAnimation">
            <summary>
            Gets or sets whether animation is used to expand or collapse the sidebar.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="true"/>.
            Note that there may be multiple user interface elements that are animated -
            the sidebar itself, the sidebar content, and the expand/collapse indicator.
            Setting this property to <see langword="false"/> will disable animation for
            all these elements. It is currently not possible to enable or disable animation
            for individual elements.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedHeader">
            <summary>
            Gets or sets the header in the collapsed state.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SidebarExpander.Footer">
            <summary>
            Gets or sets the footer.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SidebarExpander.CollapsedFooter">
            <summary>
            Gets or sets the footer in the collapsed state.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NavigationPaneExpander.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationPaneExpander.CanUseTilesProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.CanUseTiles"/> dependency property.
            </summary>
            <remarks>
            <para>
            By default, the value of this property is <see langword="true"/>, which means
            that by default the navigation can be shown both as tiles and as list items.
            </para>
            <para>
            Changing the value of this property does not necessarily result in a change of
            the view mode ("List" or "Tiles"). To change the view mode, you can use the
            <see cref="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.UsesTiles"/> property.
            </para>
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationPaneExpander.UsesTilesProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.UsesTiles"/> dependency property.
            </summary>
            <remarks>
            <para>
            By default, the value of this property is <see langword="false"/>, which means
            that by default the navigation items are shown as list items rather than as
            tiles.
            </para>
            <para>
            Changing the value of this property to <see langword="true"/> will only result
            in a change to the view mode (from "List" to "Tiles") if the associated property
            <see cref="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.CanUseTiles"/> has the value <see langword="true"/>. If this property
            has the value <see langword="false"/>, it will not be possible to change the
            view mode to "Tiles", and setting the current property will have no effect.
            </para>
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationPaneExpander.UsesSmallTilesProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.UsesSmallTiles"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationPaneExpander.ShowsHeaderWhenUsingTilesProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.ShowsHeaderWhenUsingTiles"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationPaneExpander.HeaderTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.HeaderText"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the empty string.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NavigationPaneExpander.HeaderIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.HeaderIcon"/> dependency property.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.CanUseTiles">
            <summary>
            Gets or sets whether the items in the navigation pane hosted by this expander
            can be shown as tiles, or whether they will always be shown as list items.
            </summary>
            <remarks>
            <para>
            By default, the value of this property is <see langword="true"/>, which means
            that by default the navigation can be shown both as tiles and as list items.
            </para>
            <para>
            Changing the value of this property does not necessarily result in a change of
            the view mode ("List" or "Tiles"). To change the view mode, you can use the
            <see cref="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.UsesTiles"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.UsesTiles">
            <summary>
            Gets or sets whether the items in the navigation pane hosted by this expander
            are shown as tiles, or as list items.
            </summary>
            <remarks>
            <para>
            By default, the value of this property is <see langword="false"/>, which means
            that by default the navigation items are shown as list items rather than as
            tiles.
            </para>
            <para>
            Changing the value of this property to <see langword="true"/> will only result
            in a change to the view mode (from "List" to "Tiles") if the associated property
            <see cref="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.CanUseTiles"/> has the value <see langword="true"/>. If this property
            has the value <see langword="false"/>, it will not be possible to change the
            view mode to "Tiles", and setting the current property will have no effect.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.UsesSmallTiles">
            <summary>
            Gets or sets whether the navigation items are shown as small tiles, or as large tiles.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>. This means that,
            by default, the navigation items are shown as large tiles (if they are shown as
            tiles at all).
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.ShowsHeaderWhenUsingTiles">
            <summary>
            Gets or sets whether a header is shown for the navigation item content in
            case tiles (or small tiles) are used.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.HeaderText">
            <summary>
            Gets or sets the text that is used in the header of the navigation pane expander.
            </summary>
            <remarks>
            The default value of this property is the empty string. The header text is usually
            equal to the name of the application.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NavigationPaneExpander.HeaderIcon">
            <summary>
            Gets or sets the icon that is used in the header of the navigation pane expander.
            </summary>
            <remarks>
            The header icon is usually equal to the application icon.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.NotificationBox">
            <summary>
            Custom <see cref="T:System.Windows.Controls.Control"/> that represents a notification.
            </summary>
            <remarks>
            <para>
            A <c>NotificationBox</c> is used to present a single notification to the user. Such a
            notification consists of a <see cref="P:Philips.Platform.Presentation.Controls.NotificationBox.Title"/>, a <see cref="P:Philips.Platform.Presentation.Controls.NotificationBox.Text"/>, and (optionally)
            an <see cref="P:Philips.Platform.Presentation.Controls.NotificationBox.Icon"/>. A notification presented in a notification box has a transitory
            nature. This means that it will only be shown for a short while. After that, it looses
            its relevance, and it is removed again or replaced by newer, more urgent notifications.
            </para>
            <para>
            Typically, a sequence of notification boxes are hosted by a
            <see cref="T:Philips.Platform.Presentation.Controls.NotificationBoxContainer"/>. As this container class takes care of showing and
            removing notification boxes, application programmers typically do not have to deal with the
            <c>NotificationBox</c> class directly. The only thing application programmers need to do is
            add new notifications to the container class, according to the business logic of the
            application.
            </para>
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.NotificationBoxContainer">NotificationBoxContainer Class</seealso>
            <seealso cref="T:System.Windows.Controls.Control">Control Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.MessageBox"> MessageBox Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NotificationBox.isExpanded">
            <summary>
            A notification box can only be hidden when it was first fully expanded.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NotificationBox.HiddenEvent">
            <summary>
            Routed event for the <see cref="E:Philips.Platform.Presentation.Controls.NotificationBox.Hidden"/> event.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NotificationBox.TitleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NotificationBox.Title"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NotificationBox.TextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NotificationBox.Text"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NotificationBox.IconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NotificationBox.Icon"/>  dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NotificationBox.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NotificationBox.OnCropFactorChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles changes in the <see cref="P:Philips.Platform.Presentation.Controls.CropBox.CropFactor"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NotificationBox.RaiseHiddenEvent">
            <summary>
            Raises the <see cref="E:Philips.Platform.Presentation.Controls.NotificationBox.Hidden"/> event.
            </summary>
        </member>
        <member name="E:Philips.Platform.Presentation.Controls.NotificationBox.Hidden">
            <summary>
            Raised when the item is fully collapsed.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NotificationBox.Title">
            <summary>
            Gets or sets the title that is shown in the notification box.
            </summary>
            <remarks>
            The default value of this property is <see langword="null"/>.
            It is up to the integrator to provide a value for this property.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NotificationBox.Text">
            <summary>
            Gets or sets the text that is shown in the notification box.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NotificationBox.Icon">
            <summary>
            Gets or sets the icon that is shown in the notification box.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.NotificationBoxContainer">
            <summary>
            Custom control that hosts <see cref="T:Philips.Platform.Presentation.Controls.NotificationBox"/> instances.
            </summary>
            <remarks>
            A <c>NotificationBoxContainer</c> can host any number of <c>NotificationBox</c> instances.
            These are added by the application by calling one of the overloaded <c>AddNotification</c>
            methods. The application programmer has some control over where the notification boxes pop
            up by manipulating the <see cref="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.PlacementTarget"/>, <see cref="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.HorizontalOffset"/>, and
            <see cref="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.VerticalOffset"/> properties. Furthermore, the application programmer can define
            the width and the (maximum) height of the notification boxes through the 
            <see cref="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.NotificationWidth"/> and <see cref="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.MaxNotificationHeight"/> properties. These
            properties are defined as such because, for aesthetic reasons, all notification boxes should
            in principle have the same width, but their height should be determined by the content.
            If the height of the content exceeds the maximum notification height, a vertical scroll bar
            will be made available to allow the user to reveal the full content.
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.NotificationBox">NotificationBox Class</seealso>
            <seealso cref="T:System.Windows.Controls.Control">Control Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NotificationBoxContainer.itemsControl">
            <summary>
            Caches the PART_ItemsControl template part.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NotificationBoxContainer.popup">
            <summary>
            Caches the PART_Popup template part.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NotificationBoxContainer.hiddenNotifications">
            <summary>
            Caches the notifications that are currently hidden, but not yet removed.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NotificationBoxContainer.#ctor">
            <summary>
            Initializes a new <see cref="T:Philips.Platform.Presentation.Controls.NotificationBoxContainer"/> instance.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NotificationBoxContainer.PlacementTargetProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.PlacementTarget"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NotificationBoxContainer.HorizontalOffsetProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.HorizontalOffset"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NotificationBoxContainer.VerticalOffsetProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.VerticalOffset"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NotificationBoxContainer.NotificationWidthProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.NotificationWidth"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is 0.0. It is the responsibility of the style to
            give this property a proper default value.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NotificationBoxContainer.MaxNotificationHeightProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.MaxNotificationHeight"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is 0.0. It is the responsibility of the style to
            give this property a proper default value.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NotificationBoxContainer.NotificationCountPropertyKey">
            <summary>
            Dependency property key for the <see cref="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.NotificationCount"/> property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.NotificationBoxContainer.NotificationCountProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.NotificationCount"/> read only dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NotificationBoxContainer.AddNotification(System.String)">
            <overloads>
            Adds a new notification.
            </overloads>
            <summary>
            Adds a new notification that has a text only, but no icon or title.
            </summary>
            <param name="text">The text to display in the notification box.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NotificationBoxContainer.AddNotification(System.String,System.Windows.Media.ImageSource)">
            <summary>
            Adds a new notification that has both a text and an icon, but no title.
            </summary>
            <param name="text">The text to display in the notification box.</param>
            <param name="icon">The icon to display in the notification box.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NotificationBoxContainer.AddNotification(System.String,System.Windows.Media.ImageSource,System.String)">
            <summary>
            Adds a new notification that has a text, an icon, and a title.
            </summary>
            <param name="text">The text to display in the notification box.</param>
            <param name="icon">The icon to display in the notification box.</param>
            <param name="title">The title to display in the notification box.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NotificationBoxContainer.ClearNotifications">
            <summary>
            Clears all current notifications.
            </summary>
            <remarks>
            This method is introduced to solve an issue of a hanging NUnit test due to not disposed
            UI Controls.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NotificationBoxContainer.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NotificationBoxContainer.OnHorizontalOffsetChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in the <see cref="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.HorizontalOffset"/> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NotificationBoxContainer.OnNotificationWidthChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in the <see cref="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.NotificationWidth"/> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NotificationBoxContainer.OnItemsControlSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Handles changes in the actual size of the internal <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NotificationBoxContainer.UpdateHorizontalOffsetOfPopup">
            <summary>
            Updates the horizontal offset of the internal <see cref="T:System.Windows.Controls.Primitives.Popup"/>.
            </summary>
            <remarks>
            The right side of the internal popup should be aligned with the right side of the 
            notification box container. Since a <see cref="T:System.Windows.Controls.Primitives.Popup"/> element does not have a
            <see cref="P:System.Windows.FrameworkElement.ActualWidth"/> of its own, we have to use the actual width
            of the internal items control. For this we assume that the items control is directly
            hosted inside the internal popup.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NotificationBoxContainer.OnNotificationHidden(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the <see cref="F:Philips.Platform.Presentation.Controls.NotificationBox.HiddenEvent"/>.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NotificationBoxContainer.RemoveHiddenNotifications">
            <summary>
            Removes items that were already hidden, but not removed.
            </summary>
            <remarks>
            This method is necessary, because items cannot always be removed immediately. If
            they support other items that are not hidden yet, they cannot be removed, otherwise
            the supported items would fall down.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.PlacementTarget">
            <summary>
            Gets or sets the placement target of the internal popup.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.HorizontalOffset">
            <summary>
            Gets or sets the horizontal offset of the internal popup.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.VerticalOffset">
            <summary>
            Gets or sets the vertical offset of the internal popup.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.NotificationWidth">
            <summary>
            Gets or sets the width of the notifications.
            </summary>
            <remarks>
            <para>
            It is not possible to set a notification height as well. This would lead to
            confusion since the height of the notifications is animated while they pop up.
            If is possible to set the maximum notification height, though, using the
            <see cref="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.MaxNotificationHeight"/> property.
            </para>
            <para>
            The default value of this property is 0.0. It is the responsibility of the style to
            give this property a proper default value.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.MaxNotificationHeight">
            <summary>
            Gets or sets the maximum height of notifications.
            </summary>
            <remarks>
            The default value of this property is 0.0. It is the responsibility of the style to
            give this property a proper default value.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.NotificationBoxContainer.NotificationCount">
            <summary>
            Gets the number of notifications that are currently hosted (hidden or not).
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PatientBar">
            <summary>
            Custom control used to display patient demographics and to manage multiple opened patients.
            </summary>
            <remarks>
            <para>
            The <c>PatientBar</c> expects various named template parts to be defined in its control
            template. These template parts are:
            <list type="bullet">
              <item>
                <term>PART_Root</term>
                <description>A <see cref="T:System.Windows.Controls.Grid"/> that serves as the root of the visual tree that is
                defined in the patient bar's control template. It is at the level of this root that
                the visual states of the patient bar are defined.</description>
              </item>
              <item>
                <term>PART_PatientBarGrid</term>
                <description>A <see cref="T:System.Windows.Controls.Grid"/> that hosts the patient bar proper.</description>
              </item>
              <item>
                <term>PART_PatientInfoPopup</term>
                <description>A <see cref="T:System.Windows.Controls.Primitives.Popup"/> that displays secondary patient information,
                such as patient details, patient demographics, or visit details. The information
                displayed in this popup is defined by the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.SecondaryPatientData"/> property,
                and is visualized according to the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.SecondaryPatientDataTemplate"/>.
                </description>
              </item>
              <item>
                <term>PART_BackgroundButton</term>
                <description>A <see cref="T:System.Windows.Controls.Primitives.ToggleButton"/> that represents the background of the patient
                bar. It captures mouse clicks and opens the popup that displays secondary patient
                information, or executes the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.ActivateCommand"/> that is configured for the
                patient bar.
                </description>
              </item>
            </list>
            </para>
            <para>
            The <c>Patient Bar</c> also expects various named template visual states to be defined in
            its control template. These template visual states are:
            <list type="bullet">
              <item>
                <term>VISUALSTATE_PatientBarVisible</term>
                <description>A <see cref="T:System.Windows.VisualState"/> that corresponds to the patient bar being
                visible. The visual state should describe a transition (animation) from the state
                where the patient bar is hidden.</description>
              </item>
              <item>
                <term>VISUALSTATE_PatientBarHidden</term>
                <description>A <see cref="T:System.Windows.VisualState"/> that corresponds to the patient bar being
                hidden. The visual state should describe a transition (animation) from the state
                where the patient bar is visible.</description>
              </item>
            </list>
            </para>
            <para>
            There are various ways in which the visualization of the patient bar can be customized.
            Most importantly, the look and feel of the entire patient bar can be customized using the
            <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.PrimaryPatientDataTemplate"/> and <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.SecondaryPatientDataTemplate"/>
            properties. The first of these will change how the primary patient data is visualized in
            the main part of the patient bar. The second of these will change how the secondary patient
            data in the popup that is identified by the <b>PART_PatientInfoPopup</b> template part is
            visualized. Please note that the patient bar's style is expected to define a default
            primary patient data template, but not a default secondary patient data template.
            The definition of the secondary patient data template is always left up to the application
            builder.
            </para>
            <para>
            If you do not want to replace the entire <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.PrimaryPatientDataTemplate"/>, there are
            various options for more fine-grained customization of the visualization. For example, the
            patient bar's default primary patient data template uses different icons to indicate that a
            patient is in "acquisition mode" or in "viewing mode". Which of these two modes a patient is
            in can be configured through the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.IsInAcquisition"/> property. It is possible to
            configure the so-called patient type icon that indicates "acquisition mode" by setting the
            <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.PatientAcquisitionIcon"/> property. Similarly, it is possible to configure the
            icon that indicates "viewing mode" by setting the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.PatientViewingIcon"/> property.
            If you do not want the patient bar to display a patient type icon at all, you can configure
            this by setting the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.HasPatientTypeIcon"/> property.
            </para>
            <para>
            A further fine-grained option is to provide custom content that will be hosted in the
            default primary patient data template. By default, the primary patient data template will
            display patient related information such as the patient name, the patient ID, the date of
            birth, and the gender. If you need to display additional information that is specific to
            your system or application, you can provide any custom content you like through the
            <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.CustomContent"/> property. This custom content will typically be hosted to
            the right of the patient related information, and to the left of the allergies and alerts
            indication.
            </para>
            <para>
            The patient bar has the ability to display information on whether the currently selected
            patient has any allergies or whether there are any medical alerts relevant for this patient.
            This information is communicated to the patient bar through the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.Allergies"/> and
            <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.MedicalAlerts"/> properties. In case there are no (known) allergies or medical
            alerts, appropriate texts are displayed to convey this to the end user. Text resource for
            these cases are provided out-of-the-box, by can be customized using the 
            <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.NoAllergiesText"/>, <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.NoMedicalAlertsText"/>, and 
            <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.NoAllergiesOrMedicalAlertsText"/> properties. Typically, a warning indicator is
            displayed in the patient bar's primary patient data template in case there are allergies or
            medical alerts. Detailed information on the allergies and medical alerts is disclosed in the
            secondary patient data template and the tooltip.
            </para>
            <para>
            The patient bar also has the ability to display information on any non-clinical alerts that
            are relevant for the currently selected patient. An example of such a non-clinical alert is
            an alert drawing the end user's attention to the fact that the patient data has been merged
            from two or more different sources (RIS, HIS, PACS, etc.). Information concerning these
            non-clinical alerts is communicated to the patient bar through the
            <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.NonclinicalAlerts"/> and <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.HasNonclinicalAlerts"/> properties.
            </para>
            <para>
            The patient bar can use an animation to support changes to the data it displays. For
            example, the patient bar can use an animation to draw the user's attention to the fact that
            another patient has been selected. By default, these animations are not enabled, but you can
            enable them by setting the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.UsesAnimationWhenPatientDataChanges"/> dependency
            property to <see langword="true"/>.
            </para>
            <para>
            Interaction with the patient bar is possible via command binding and matching events:
            <list type="bullet">
              <item>
                <description>CloseCommand / CloseClick</description>
              </item>
              <item>
                <description>ActivateCommand / Click</description>
              </item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Controls.Primitives.Selector">Selector Class</seealso>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged">INotifyPropertyChanged Interface</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Philips.Platform.Presentation.Controls.PatientBar"/> class.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.InternalCloseCommand">
            <summary>
            Internal command for closing a patient (e.g. for connecting to the Close button in the
            template).
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.ClickEvent">
            <summary>
            Custom <see cref="T:System.Windows.RoutedEvent"/> that is registered to monitor when the
            patient bar is clicked. This routed event matches the <see cref="E:Philips.Platform.Presentation.Controls.PatientBar.Click"/> event.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.CloseClickEvent">
            <summary>
            Custom <see cref="T:System.Windows.RoutedEvent"/> that is registered to monitor when the
            patient bar's Close button is clicked. This routed event matches the
            <see cref="E:Philips.Platform.Presentation.Controls.PatientBar.CloseClick"/> event.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.ActivateCommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.ActivateCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.ActivateCommandTargetProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.ActivateCommandTarget"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.ActivateCommandParameterProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.ActivateCommandParameter"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.CloseCommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.CloseCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.CloseCommandTargetProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.CloseCommandTarget"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.CloseCommandParameterProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.CloseCommandParameter"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.PatientNameProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.PatientName"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.GenderLabelProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.GenderLabel"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.GenderProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.Gender"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.BirthDateLabelProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.BirthDateLabel"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.BirthDateProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.BirthDate"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.PatientIdLabelProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.PatientIdLabel"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.PatientIdProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.PatientId"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.CustomContentProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.CustomContent"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.IsCheckedProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.IsChecked"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.IsInAcquisitionProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.IsInAcquisition"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.HasAllergiesProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.HasAllergies"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.AllergiesProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.Allergies"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.AllergiesIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.AllergiesIcon"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the default <see cref="T:System.Windows.Media.ImageSource"/> value.
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.HasMedicalAlertsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.HasMedicalAlerts"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.MedicalAlertsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.MedicalAlerts"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.MedicalAlertsIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.MedicalAlerts"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the default <see cref="T:System.Windows.Media.ImageSource"/> value.
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.HasNonclinicalAlertsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.HasNonclinicalAlerts"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.NonclinicalAlertsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.NonclinicalAlerts"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.NonclinicalAlertsIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.NonclinicalAlertsIcon"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the default <see cref="T:System.Windows.Media.ImageSource"/> value.
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.NoAllergiesTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.NoAllergiesText"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.NoAllergiesOrMedicalAlertsTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.NoAllergiesOrMedicalAlertsText"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.NoMedicalAlertsTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.NoMedicalAlertsText"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.HasCloseButtonProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.HasCloseButton"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.CloseTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.CloseText"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.CloseToolTipTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.CloseToolTipText"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.SelectorToolTipTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.SelectorToolTipText"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.IsPatientInfoDropDownOpenProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.IsPatientInfoDropDownOpen"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.IsMouseOverInteractiveAreaProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.IsMouseOverInteractiveArea"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.InteractionMarginProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.InteractionMargin"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.PrimaryPatientDataProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.PrimaryPatientData"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.PrimaryPatientDataTemplateProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.PrimaryPatientDataTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.PrimaryPatientDataTemplateSelectorProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.PrimaryPatientDataTemplateSelector"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.PrimaryPatientStringFormatProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.PrimaryPatientStringFormat"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.SecondaryPatientDataProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.SecondaryPatientData"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.SecondaryPatientDataTemplateProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.SecondaryPatientDataTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.SecondaryPatientDataTemplateSelectorProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.SecondaryPatientDataTemplateSelector"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.SecondaryPatientStringFormatProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.SecondaryPatientStringFormat"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.HasPatientTypeIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.HasPatientTypeIcon"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.PatientAcquisitionIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.PatientAcquisitionIcon"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the default <see cref="T:System.Windows.Media.ImageSource"/> value.
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.PatientViewingIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.PatientViewingIcon"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is the default <see cref="T:System.Windows.Media.ImageSource"/> value.
            Giving this property a decent value is the responsibility of the style.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientBar.UsesAnimationWhenPatientDataChangesProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.UsesAnimationWhenPatientDataChanges"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource"/> property changes.
            </summary>
            <param name="oldValue">Old value of the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource"/> property.</param>
            <param name="newValue">New value the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource"/> property.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Invoked when the <see cref="P:System.Windows.Controls.ItemsControl.Items"/> property changes.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Called when the selection changes.
            </summary>
            <remarks>
            Overridden to run an animation to draw the user's attention to the fact that
            the selection has changed. 
            </remarks>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.OnVisualStatePatientBarHiddenStoryboardCompleted(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Media.Animation.Timeline.Completed"/> event of the storyboard that is connected
            to the "PatientBarHidden" visual state.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.OnMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles mouse movements on the parent window.
            </summary>
            <remarks>
            This method checks if the mouse is on the interactive area of the patient bar.
            If this is the case, and the patient bar is checked, then the drop down indicator
            should be made visible.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.OnBackgroundButtonMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the <see cref="F:System.Windows.UIElement.MouseDownEvent"/> on the patient bar background button.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.OnBackgroundButtonMouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the <see cref="F:System.Windows.UIElement.MouseUpEvent"/> on the patient bar background button.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.OnClose">
            <summary>
            Raises the <see cref="E:Philips.Platform.Presentation.Controls.PatientBar.CloseClick"/> event.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.OnActivate">
            <summary>
            Raises the <see cref="E:Philips.Platform.Presentation.Controls.PatientBar.Click"/> event and executes the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.ActivateCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.OnExecuteInternalCloseCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the Execute of the <see cref="F:Philips.Platform.Presentation.Controls.PatientBar.InternalCloseCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.OnCanExecuteInternalCloseCommand(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Handles the CanExecute of the <see cref="F:Philips.Platform.Presentation.Controls.PatientBar.InternalCloseCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.CanExecuteCloseCommand">
            <summary>
            Calls <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> on the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.CloseCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.ExecuteCloseCommand">
            <summary>
            Calls <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> of the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.CloseCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.CanExecuteActivateCommand">
            <summary>
            Calls <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> on the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.ActivateCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.ExecuteActivateCommand">
            <summary>
            Calls <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> of the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.ActivateCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.OnActivateCommandChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.ActivateCommand"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> of which the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.ActivateCommand"/> 
            is changed.
            </param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.HookUpActivateCommand(System.Windows.Input.ICommand,System.Windows.Input.ICommand)">
            <summary>
            Hooks up a new Activate command.
            </summary>
            <param name="oldCommand">The old Activate command, which will be removed.</param>
            <param name="newCommand">The new Activate command, which will be added.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.RemoveActivateCommand(System.Windows.Input.ICommand)">
            <summary>
            Removes an old Activate command.
            </summary>
            <param name="oldCommand">
            The old Activate command. May not be <see langword="null"/>.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PatientBar.AddActivateCommand(System.Windows.Input.ICommand)">
            <summary>
            Adds a new Activate command.
            </summary>
            <param name="newCommand">The new Activate command.</param>
        </member>
        <member name="E:Philips.Platform.Presentation.Controls.PatientBar.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <remarks>
            This event is raised in particular to signal changes to the
            <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.IsMultipatient"/> and <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.IsThreeOrMorePatients"/> properties.
            </remarks>
        </member>
        <member name="E:Philips.Platform.Presentation.Controls.PatientBar.Click">
            <summary>
            Raised when the patient bar is clicked.
            </summary>
        </member>
        <member name="E:Philips.Platform.Presentation.Controls.PatientBar.CloseClick">
            <summary>
            Raised when the patient bar's Close button is clicked.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.ActivateCommand">
            <summary>
            Gets or sets the command that is executed when the patient bar is activated / clicked.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.ActivateCommandTarget">
            <summary>
            Gets or sets the command target for the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.ActivateCommand"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.ActivateCommandParameter">
            <summary>
            Gets or sets the command parameter for the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.ActivateCommand"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.CloseCommand">
            <summary>
            Gets or sets the command that is executed when close button is clicked.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.CloseCommandTarget">
            <summary>
            Gets or sets the command target for the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.CloseCommand"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.CloseCommandParameter">
            <summary>
            Gets or sets the command parameter for the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.CloseCommand"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.PatientName">
            <summary>
            Gets or sets the name of the patient as displayed on the primary patient info area.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.GenderLabel">
            <summary>
            Gets or sets the label for the Gender of the patient.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.Gender">
            <summary>
            Gets or sets the patient's gender.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.BirthDateLabel">
            <summary>
            Gets or set the label for the patient's date of birth.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.BirthDate">
            <summary>
            Gets or sets the date of birth of the patient.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.PatientIdLabel">
            <summary>
            Gets or sets the label for the patient ID.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.PatientId">
            <summary>
            Gets or sets the patient ID.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.CustomContent">
            <summary>
            Gets or sets the (optional) custom content of the patient bar.
            </summary>
            <remarks>
            <para>
            Typically, the custom content is placed to the right of the "fixed" content,
            such as the patient name, patient ID, date of birth, and the gender. It is
            placed to the left of the allergies and alerts indication.
            </para>
            <para>
            Setting this property is only effective if you stick to using the default
            <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.PrimaryPatientDataTemplate"/>. The primary patient data template takes
            this property into account, and hosts the custom content. If you want to deviate
            in a more significant way from what the default primary patient data template
            provides, you can override the entire template.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.IsChecked">
            <summary>
            Gets or sets whether the patient bar is checked.
            </summary>
            <remarks>
            The patient bar can be checked (like a toggle button) to indicate that the action
            that is coupled to the patient bar is active.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.IsInAcquisition">
            <summary>
            Gets or sets whether the currently displayed patient is undergoing an acquisition.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.IsMultipatient">
            <summary>
            Gets whether the patient bar has multiple patients.
            </summary>
            <remarks>
            The patient bar has multiple patients if it has two or more patients. This influences
            the visualization of the patient bar. It is also important to know whether the patient
            bar actually has three or more patients. This can be checked via the
            <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.IsThreeOrMorePatients"/> property.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.IsThreeOrMorePatients">
            <summary>
            Gets whether the patient bar has three or more patients.
            </summary>
            <remarks>
            In addition to whether or not a patient bar has multiple patients (i.e., two or more
            patients), it is important to know whether the patient bar actually has three or more
            patients because this influences the visualization of the patient bar.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.HasAllergies">
            <summary>
            Gets or sets whether the currently displayed patient has known allergies.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.Allergies">
            <summary>
            Gets or sets the allergies for the currently displayed patient.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.AllergiesIcon">
            <summary>
            Gets or sets the icon that is displayed to indicate that the displayed patient
            has allergies.
            </summary>
            <remarks>
            <para>
            This icon is displayed when <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.HasAllergies"/> is <see langword="true"/>.
            </para>
            <para>
            The default value of this property is the default <see cref="T:System.Windows.Media.ImageSource"/> value.
            Giving this property a decent value is the responsibility of the style.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.HasMedicalAlerts">
            <summary>
            Gets or sets whether there are medical alerts for the currently displayed patient.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.MedicalAlerts">
            <summary>
            Gets or sets the medical alerts for the currently displayed patient.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.MedicalAlertsIcon">
            <summary>
            Gets or sets the icon that is displayed to indicate that the displayed patient
            has medical alerts.
            </summary>
            <remarks>
            <para>
            This icon is displayed when <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.HasMedicalAlerts"/> is <see langword="true"/>.
            </para>
            <para>
            The default value of this property is the default <see cref="T:System.Windows.Media.ImageSource"/> value.
            Giving this property a decent value is the responsibility of the style.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.HasNonclinicalAlerts">
            <summary>
            Gets or sets whether the currently displayed patient has non-clinical alerts.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.NonclinicalAlerts">
            <summary>
            Gets or sets the non-clinical alerts for the currently displayed patient.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.NonclinicalAlertsIcon">
            <summary>
            Gets or sets the icon that is displayed to indicate that the displayed patient
            has non-clinical alerts.
            </summary>
            <remarks>
            <para>
            This icon is displayed when <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.HasNonclinicalAlerts"/> is <see langword="true"/>.
            </para>
            <para>
            The default value of this property is the default <see cref="T:System.Windows.Media.ImageSource"/> value.
            Giving this property a decent value is the responsibility of the style.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.NoAllergiesText">
            <summary>
            Gets or sets the text that is shown if the currently displayed patient does not
            have any allergies, or does not have any known allergies.
            </summary>
            <remarks>
            Please note that, in general, it is important to make a distinction between the case
            where a patient does not have any allergies, and the case where there is insufficient
            information to determine whether a patient has allergies.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.NoAllergiesOrMedicalAlertsText">
            <summary>
            Gets or sets the text that is shown if the currently displayed patient does not
            have any (known) allergies, and there are no (known) medical alerts for the patient.
            </summary>
            <remarks>
            Please note that, in general, it is important to make a distinction between the case
            where a patient does not have any allergies, and the case where there is insufficient
            information to determine whether a patient has allergies. The same goes for medical
            alerts.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.NoMedicalAlertsText">
            <summary>
            Gets or sets the text that is shown if the currently displayed patient does not
            have any medical alerts, or does not have any known medical alerts.
            </summary>
            <remarks>
            Please note that, in general, it is important to make a distinction between the case
            where a patient does not have any medical alerts, and the case where there is
            insufficient information to determine whether a patient has any medical alerts.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.HasCloseButton">
            <summary>
            Gets or sets whether the patient bar has a <b>Close</b> button.
            </summary>
            <remarks>
            The default value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.CloseText">
            <summary>
            Gets or sets the text that is used to provide information to the user with respect
            to the effects of executing the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.CloseCommand"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.CloseToolTipText">
            <summary>
            Gets or sets the tooltip text that is used to provide information to the user with
            respect to the effects of executing the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.CloseCommand"/>.
            </summary>
            <remarks>
            This property can be used to provide the text that is displayed as a tooltip for the
            Close button of the Patient Bar. For the time being, the tooltip can only display a
            simple text, it cannot be a fancy tooltip as would otherwise be possible with WPF's
            ToolTip class, which can show arbitrary content.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.SelectorToolTipText">
            <summary>
            Gets or sets the tooltip text that is used on the selector of the
            <see cref="T:Philips.Platform.Presentation.Controls.PatientBar"/>.
            </summary>
            <remarks>
            This property can be used to provide the text that is displayed as a tooltip for the
            selector of the Patient Bar. For the time being, the tooltip can only display a
            simple text, it cannot be a fancy tooltip as would otherwise be possible with WPF's
            ToolTip class, which can show arbitrary content.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.IsPatientInfoDropDownOpen">
            <summary>
            Gets or sets whether the PatientInfoDropDown is open or not.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.IsMouseOverInteractiveArea">
            <summary>
            Gets or sets whether the mouse is over the interactive area or not.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.InteractionMargin">
            <summary>
            Gets or sets the margin of the interactive area relative to the patient bar.
            </summary>
            <remarks>
            When the mouse is over the interactive area, and the patient bar is checked,
            the drop down indicator should become visible. A InteractionMargin of
            50,0,100,25 means that the interactive area extends 50 DIU's compared to the left edge
            of the patient bar, 0 DIU's compared to the top of the patient bar, 100 DIU's compared
            to the right of the patient bar and 25 DIU's compared to the bottom of the patient bar, 
            DIU's being Device Independent Units.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.PrimaryPatientData">
            <summary>
            Main area on the patient bar where patient information can be displayed
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.PrimaryPatientDataTemplate">
            <summary>
            Gets or sets the template for the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.PrimaryPatientData"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.PrimaryPatientDataTemplateSelector">
            <summary>
            Gets or sets the template selector for the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.PrimaryPatientData"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.PrimaryPatientStringFormat">
            <summary>
            Gets or sets the string format for the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.PrimaryPatientData"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.SecondaryPatientData">
            <summary>
            Popup area in which additional patient information could be displayed.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.SecondaryPatientDataTemplate">
            <summary>
            Gets or sets the template for the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.SecondaryPatientData"/>.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.PatientBar.SecondaryPatientDataTemplateProperty"/>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.SecondaryPatientDataTemplateSelector">
            <summary>
            Gets or sets the template selector for the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.SecondaryPatientData"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.SecondaryPatientStringFormat">
            <summary>
            Gets or sets the string format for the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.SecondaryPatientData"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.HasPatientTypeIcon">
            <summary>
            Gets or sets whether there the patient bar has a patient type icon.
            </summary>
            <remarks>
            <para>
            This property can be used to define whether a patient bar that uses the default
            primary patient data template has a patient type icon or not. Which patient type
            icon that is displayed depends on whether the currently displayed patient is in
            "acquisition mode" or in "viewing mode". The icon to be displayed for either mode
            can be customized through the <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.PatientAcquisitionIcon"/> and
            <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.PatientViewingIcon"/> properties.
            </para>
            <para>
            The default value of this property is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.PatientAcquisitionIcon">
            <summary>
            Gets or sets the icon that is displayed when the displayed patient is
            undergoing an acquisition.
            </summary>
            <remarks>
            <para>
            This icon is displayed when <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.IsInAcquisition"/> is <see langword="true"/>.
            </para>
            <para>
            The default value of this property is the default <see cref="T:System.Windows.Media.ImageSource"/> value.
            Giving this property a decent value is the responsibility of the style.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.PatientViewingIcon">
            <summary>
            Gets or sets the icon that is displayed when the displayed patient is in viewing,
            i.e., when the displayed patient is <b>not</b> undergoing an acquisition.
            </summary>
            <remarks>
            <para>
            This icon is displayed when <see cref="P:Philips.Platform.Presentation.Controls.PatientBar.IsInAcquisition"/> is <see langword="false"/>.
            </para>
            <para>
            The default value of this property is the default <see cref="T:System.Windows.Media.ImageSource"/> value.
            Giving this property a decent value is the responsibility of the style.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientBar.UsesAnimationWhenPatientDataChanges">
            <summary>
            Gets or sets whether an animation is used to support changes to the patient data
            that is displayed by the patient bar.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PatientsButton">
            <summary>
            Custom control that is used to provide access to the collection of patients.
            </summary>
            <remarks>
            <para>
            Typically, the <b>PatientsButton</b> is used together with the <see cref="T:Philips.Platform.Presentation.Controls.PatientBar"/> to
            provide access to the collection of patients, and to allow the user to see which patient is
            currently selected, and to select a new patient. The <b>PatientsButton</b> is typically
            displayed in the top left part of the screen.
            </para>
            <para>
            The <b>PatientsButton</b> derives from <see cref="T:Philips.Platform.Presentation.Controls.IconLabelToggleButton"/>, and fixes the
            <see cref="P:Philips.Platform.Presentation.Controls.IconLabelToggleButton.Label"/> and <see cref="P:Philips.Platform.Presentation.Controls.IconLabelToggleButton.Icon"/>
            properties such that the <b>PatientsButton</b> by default displays the Patient List icon,
            and the localized "Patients" label. The application builder can still override the default
            values of these properties, but this is not recommended.
            </para>
            <para>
            According to the Visual Guide 1.1, it should be possible for the <b>PatientsButton</b> to
            act as the default button, and display a glow which indicates this state. To accommodate for
            this requirement, the <b>PatientsButton</b> is defined as a separate class, which exposes
            the <see cref="P:Philips.Platform.Presentation.Controls.PatientsButton.IsDefault"/> dependency property. The reason to do this is
            that <b>PatientsButton</b> derives from <b>IconLabelToggleButton</b>, which in turn derives
            from <see cref="T:System.Windows.Controls.Primitives.ToggleButton"/>, and the standard WPF toggle button does not expose an
            <b>IsDefault</b> property.
            </para>
            </remarks>
            <example>
            The following example shows how to define a <b>PatientsButton</b> that acts as the default
            button.
            <code lang="xaml">
            <![CDATA[
            <pt:PatientsButton x:Name="patientsButton"
                IsDefault="True"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.Primitives.ToggleButton">ToggleButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.IconLabelToggleButton">IconLabelToggleButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PatientBar">PatientBar Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PatientsButton.IsDefaultProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PatientsButton.IsDefault"/> dependency property.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PatientsButton.IsDefault">
            <summary>
            Gets or sets  a value that indicates whether a <see cref="T:Philips.Platform.Presentation.Controls.PatientsButton"/> is
            the default button.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.Pictorial">
            <summary>
            Custom control that represents a <b>Pictorial</b> in a <see cref="T:Philips.Platform.Presentation.Controls.PictorialIndex"/>.
            A pictorial typically visualizes one clinical data element, such as a series, a run,
            a movie, a report, etc.
            </summary>
            <remarks>
            <para>
            A pictorial is a small, card-like representation of a clinical data element such as a
            series, a run, a movie, a report, etc. Typically, a pictorial shows a representative
            element of the data set, such as an image that is representative for an entire series
            or an entire run. In addition to this "pictorial representation", a pictorial can be
            decorated with additional text or icons that reveal more information about the data
            set. Taken together, this information facilitates recognition of the data set by the
            user, and allows him or her to select the right data for further viewing, processing,
            or diagnosis.
            </para>
            <para>
            There are two sets of icons that can be used to decorate a pictorial. The first set tells
            the user something about the <b>kind or type of data</b> that is represented by the
            pictorial. Does the pictorial represent a series, a movie, a report, etc. The second set
            tells the user something about the <b>status of the data</b>. Has the data been sent to a
            printer, has the data been exported to an archive, etc.
            </para>
            <para>
            The following properties are related to the <b>kind or type of data</b>:
            <list type="bullet">
              <item>
                <term><see cref="P:Philips.Platform.Presentation.Controls.Pictorial.DataType"/></term>
                <description>Indicates the type of data represented by the pictorial.</description>
              </item>
              <item>
                <term><see cref="P:Philips.Platform.Presentation.Controls.Pictorial.DataTypeIcon"/></term>
                <description>Icon that visualizes the type of data represented by
                the pictorial.</description>
              </item>
              <item>
                <term><see cref="P:Philips.Platform.Presentation.Controls.Pictorial.AdvancedAnalysisIcon"/></term>
                <description>Icon that visualizes whether the data is suitable for
                an advanced analysis application.</description>
              </item>
              <item>
                <term><see cref="P:Philips.Platform.Presentation.Controls.Pictorial.PictorialTypeOneIcon"/></term>
                <description>Icon that provides additional, custom information about the type of data
                represented by the pictorial. This allows application builder to inject their own custom
                type information.</description>
              </item>
              <item>
                <term><see cref="P:Philips.Platform.Presentation.Controls.Pictorial.PictorialTypeTwoIcon"/></term>
                <description>Another icon that provides additional, custom information about the type of
                data represented by the pictorial. This allows application builder to inject their own
                custom type information.</description>
              </item>
            </list>
            </para>
            <para>
            The following properties are related to the <b>status of the data</b>:
            <list type="bullet">
              <item>
                <term><see cref="P:Philips.Platform.Presentation.Controls.Pictorial.ExportStatusIcon"/></term>
                <description>Indicate the status of the data associated with the pictorial w.r.t.
                exporting that data to an archive. Has export started, is export in progress, has
                export completed, has export failed, etc.</description>
              </item>
              <item>
                <term><see cref="P:Philips.Platform.Presentation.Controls.Pictorial.MediaStatusIcon"/></term>
                <description>Indicate the status of the data associated with the pictorial w.r.t.
                exporting that data to physical media (CD, DVD, Blu-Ray, USB). Has export to media
                started, is export to media in progress, has export to media completed, has export
                to media failed, etc.</description>
              </item>
              <item>
                <term><see cref="P:Philips.Platform.Presentation.Controls.Pictorial.PrintStatusIcon"/></term>
                <description>Indicate the status of the data associated with the pictorial w.r.t.
                printing that data. Has printing started, is printing in progress, has printing
                completed, has printing failed, etc.</description>
              </item>
              <item>
                <term><see cref="P:Philips.Platform.Presentation.Controls.Pictorial.PictorialStatusOneIcon"/></term>
                <description>Icon that provides additional, custom information about the status of the
                data represented by the pictorial. This allows application builder to inject their own
                custom status information.</description>
              </item>
              <item>
                <term><see cref="P:Philips.Platform.Presentation.Controls.Pictorial.PictorialStatusTwoIcon"/></term>
                <description>Another icon that provides additional, custom information about the status
                of the data represented by the pictorial. This allows application builder to inject
                their own custom status information.</description>
              </item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Controls.ListBoxItem">ListBoxItem Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialIndex">PictorialIndex Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialDataType">PictorialDataType Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatus">PictorialExportStatus Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatus">PictorialMediaStatus Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatus">PictorialPrintStatus Enumeration</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Pictorial.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Pictorial.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Philips.Platform.Presentation.Controls.Pictorial"/> class.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.SizeToContentProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.SizeToContent"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.ContentWidthProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.ContentWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.ContentHeightProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.ContentHeight"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.HeaderPlacementProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.HeaderPlacement"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.HeaderPrefixTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.HeaderPrefixText"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.HeaderTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.HeaderText"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.SubHeaderPrefixTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.SubHeaderPrefixText"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.SubHeaderTextProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.SubHeaderText"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.DataTypeProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.DataType"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.DataTypeIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.DataTypeIcon"/> dependency property.
            </summary>
            <remarks>
            The default pictorial data types are defined by the <see cref="T:Philips.Platform.Presentation.Controls.PictorialDataType"/>
            enumeration. Typically, each pictorial data type has a matching pictorial data type
            icon. For the time being, setting the pictorial data type icon is the responsibility
            of the application builder. It might be that, in the future, we transfer at least
            part of this responsibility to the Presentation Toolkit.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.ImageCountProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.ImageCount"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is 0. This property should not be set to a value
            other than 0 if the pictorial data type is any kind of non-image data.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.IsDisplayedProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.IsDisplayed"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>, indicating that,
            by default, a pictorial is not displayed.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.IsDisplayedIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.IsDisplayedIcon"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.ShowsIsDisplayedIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.ShowsIsDisplayedIcon"/> dependency property.
            </summary>
            <remarks>
            <para>
            If this property is set to <see langword="true"/>, the "currently displayed" state
            will be visualized using the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.IsDisplayedIcon"/>.
            </para>
            <para>
            The default value of this property is <see langword="false"/>, indicating that,
            by default, a pictorial is not displayed.
            </para>
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.IsFlaggedProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.IsFlagged"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.IsPartiallyFlaggedProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.IsPartiallyFlagged"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.ExportStatusIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.ExportStatusIcon"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.PictorialStatusOneIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.PictorialStatusOneIcon"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.PictorialStatusTwoIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.PictorialStatusTwoIcon"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.PictorialTypeOneIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.PictorialTypeOneIcon"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.PictorialTypeTwoIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.PictorialTypeTwoIcon"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.MediaStatusIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.MediaStatusIcon"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.PrintStatusIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.PrintStatusIcon"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.AdvancedAnalysisIconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.AdvancedAnalysisIcon"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Pictorial.IsContextMenuOpenProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.IsContextMenuOpen"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Pictorial.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Handles the <see cref="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)"/> attached event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Pictorial.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the pictorial based on the values of <see cref="P:System.Windows.FrameworkElement.Width"/> and
            <see cref="P:System.Windows.FrameworkElement.Height"/>.
            </summary>
            <param name="constraint">The constrained size that children may respect.</param>
            <returns>The desired size of the pictorial.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Pictorial.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is for dragging a multi selection, otherwise the selection is changed on
            the mouse down. This is only needed if a selected item is pressed.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Pictorial.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is for dragging a multi selection, this code is for calling the 
            OnMouseLeftButtonDown before the onMouseLeftButtonUp is handled.
            This must be done because the OnMouseLeftButtonDown is stopped is the item is selected
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Pictorial.CoerceWidth(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the <see cref="P:System.Windows.FrameworkElement.Width"/> of the Pictorial.
            </summary>
            <remarks>
            The <see cref="T:Philips.Platform.Presentation.Controls.Pictorial"/> should ignore the <see cref="P:System.Windows.FrameworkElement.Width"/> 
            when the pictorial sizes its width to the content. In contrast with the 
            <see cref="T:System.Windows.Window"/>, the pictorial will do this even if the 
            <see cref="P:System.Windows.FrameworkElement.Width"/> is animated, and it will maintain the base value 
            of the <see cref="P:System.Windows.FrameworkElement.Width"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Pictorial.CoerceHeight(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the <see cref="P:System.Windows.FrameworkElement.Height"/> of the Pictorial.
            </summary>
            <remarks>
            The <see cref="T:Philips.Platform.Presentation.Controls.Pictorial"/> should ignore the <see cref="P:System.Windows.FrameworkElement.Height"/> 
            when the pictorial sizes its height to the content. In contrast with the 
            <see cref="T:System.Windows.Window"/>, the pictorial will do this even if the 
            <see cref="P:System.Windows.FrameworkElement.Height"/> is animated, and it will maintain the base value 
            of the <see cref="P:System.Windows.FrameworkElement.Height"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Pictorial.OnPictorialContextMenuOpening(System.Object,System.Windows.Controls.ContextMenuEventArgs)">
            <summary> 
            Called when the pictorial context menu is opening.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Pictorial.OnPictorialContextMenuClosing(System.Object,System.Windows.Controls.ContextMenuEventArgs)">
            <summary> 
            Called when the pictorial context menu is closing.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Pictorial.ContextMenuOpenChanged(System.Boolean)">
            <summary>
            Sets the given context menu open state in the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.IsContextMenuOpen"/> property.
            </summary>
            <param name="isOpen">new <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.IsContextMenuOpen"/> state.</param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.SizeToContent">
            <summary>
            Gets or sets the whether the pictorial sizes to its content.
            </summary>
            <remarks>
            The default value of this property is
            <see cref="F:System.Windows.SizeToContent.WidthAndHeight"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.ContentWidth">
            <summary>
            Gets or sets the width of the content.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.ContentHeight">
            <summary>
            Gets or sets the height of the content.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.HeaderPlacement">
            <summary>
            Gets or sets the placement of the pictorial header relative to the pictorial content.
            </summary>
            <remarks>
            <para>
            This property governs the placement of the header, i.e., that part of the pictorial
            that displays the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.HeaderText"/>, <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.HeaderPrefixText"/>,
            <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.SubHeaderText"/>, and <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.SubHeaderPrefixText"/>. It is possible
            to place the header at the <see cref="F:System.Windows.Controls.Dock.Top">Top</see>, i.e., above the pictorial
            content, or at the <see cref="F:System.Windows.Controls.Dock.Bottom">Bottom</see>, i.e., below the pictorial
            content.
            </para>
            <para>
            By default, the value of this property is <see cref="F:System.Windows.Controls.Dock.Bottom">Bottom</see>,
            i.e., the pictorial header is placed below the pictorial content.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.HeaderPrefixText">
            <summary>
            Gets or sets the prefix text for the header.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.HeaderText">
            <summary>
            Gets or sets the header text.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.SubHeaderPrefixText">
            <summary>
            Gets or sets the prefix text for the sub-header.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.SubHeaderText">
            <summary>
            Gets or sets the sub-header text.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.DataType">
            <summary>
            Gets or sets the data type of the pictorial.
            </summary>
            <remarks>
            The default value of this property is <see cref="F:Philips.Platform.Presentation.Controls.PictorialDataType.Series"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.DataTypeIcon">
            <summary>
            Gets or sets the icon that is used to visualize the pictorial data type.
            </summary>
            <remarks>
            The default pictorial data types are defined by the <see cref="T:Philips.Platform.Presentation.Controls.PictorialDataType"/>
            enumeration. Typically, each pictorial data type has a matching pictorial data type
            icon. For the time being, setting the pictorial data type icon is the responsibility
            of the application builder. It might be that, in the future, we transfer at least
            part of this responsibility to the Presentation Toolkit.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.ImageCount">
            <summary>
            Gets or sets the image count, i.e., the number of images associated with the data
            that is represented by this pictorial.
            </summary>
            <remarks>
            The default value of this property is 0. This property should not be set to a value
            other than 0 if the pictorial data type is any kind of non-image data.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.IsDisplayed">
            <summary>
            Gets or sets whether the pictorial is currently displayed.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>, indicating that,
            by default, a pictorial is not displayed.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.IsDisplayedIcon">
            <summary>
            Gets or sets the icon that is displayed to indicate that a pictorial is displayed
            (in a viewer or a clinical application).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.ShowsIsDisplayedIcon">
            <summary>
            Gets or sets whether the pictorial should visualize its "currently displayed" state.
            </summary>
            <remarks>
            <para>
            If this property is set to <see langword="true"/>, the "currently displayed" state
            will be visualized using the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.IsDisplayedIcon"/>.
            </para>
            <para>
            The default value of this property is <see langword="false"/>, indicating that,
            by default, a pictorial is not displayed.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.IsFlagged">
            <summary>
            Gets or sets whether the pictorial is flagged.
            </summary>
            <remarks>
            <para>
            A pictorial can be flagged, meaning that the data associated with the pictorial is
            singled out for future reference - for example, the data may be interesting for further
            analysis, diagnosis, or may be flagged to be exported or printed.
            </para>
            <para>
            Use this property to indicate that all the data associated with the pictorial is
            flagged. If only some, but not all, the data associated with the pictorial is flagged,
            consider using the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.IsPartiallyFlagged"/> property instead.
            </para>
            <para>
            By default, the value of this property is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.IsPartiallyFlagged">
            <summary>
            Gets or sets whether the pictorial is partially flagged.
            </summary>
            <remarks>
            <para>
            A pictorial can be flagged, meaning that the data associated with the pictorial is
            singled out for future reference - for example, the data may be interesting for further
            analysis, diagnosis, or may be flagged to be exported or printed.
            </para>
            <para>
            Use this property to indicate that only some, but not all, of the data associated with
            the pictorial is flagged. If all the data associated with the pictorial is flagged,
            consider using the <see cref="P:Philips.Platform.Presentation.Controls.Pictorial.IsFlagged"/> property instead.
            </para>
            <para>
            By default, the value of this property is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.ExportStatusIcon">
            <summary>
            Gets or sets the icon that is displayed to indicate the export status of the data
            associated with this pictorial. 
            </summary>
            <remarks>
            Typically, the value of this property is set by converting a <see cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatus"/>
            value to its corresponding icon using the <see cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatusToIconConverter"/>.
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatus">PictorialExportStatus Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatusToIconConverter">PictorialExportStatusToIconConverter Class</seealso>
            <seealso cref="P:Philips.Platform.Presentation.Controls.Pictorial.MediaStatusIcon">MediaStatusIcon Property</seealso>
            <seealso cref="P:Philips.Platform.Presentation.Controls.Pictorial.PrintStatusIcon">PrintStatusIcon Property</seealso>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.PictorialStatusOneIcon">
            <summary>
            Gets or sets the first additional status icon.
            </summary>
            <remarks>
            Icon that provides additional, custom information about the status of the data
            represented by the pictorial. This allows application builder to inject their own
            custom status information.
            </remarks>
            <seealso cref="P:Philips.Platform.Presentation.Controls.Pictorial.PictorialStatusTwoIcon">PictorialStatusTwoIcon Property</seealso>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.PictorialStatusTwoIcon">
            <summary>
            Gets or sets the second additional status icon.
            </summary>
            <remarks>
            Another icon that provides additional, custom information about the status of the data
            represented by the pictorial. This allows application builder to inject their own
            custom status information.
            </remarks>
            <seealso cref="P:Philips.Platform.Presentation.Controls.Pictorial.PictorialStatusOneIcon">PictorialStatusOneIcon Property</seealso>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.PictorialTypeOneIcon">
            <summary>
            Gets or sets the first additional (data) type icon.
            </summary>
            <remarks>
            Icon that provides additional, custom information about the type of data represented by
            the pictorial. This allows application builder to inject their own custom type
            information.
            </remarks>
            <seealso cref="P:Philips.Platform.Presentation.Controls.Pictorial.PictorialTypeTwoIcon">PictorialTypeTwoIcon Property</seealso>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.PictorialTypeTwoIcon">
            <summary>
            Gets or sets the second additional (data) type icon.
            </summary>
            <remarks>
            Another icon that provides additional, custom information about the type of data
            represented by the pictorial. This allows application builder to inject their own
            custom type information.
            </remarks>
            <seealso cref="P:Philips.Platform.Presentation.Controls.Pictorial.PictorialTypeOneIcon">PictorialTypeOneIcon Property</seealso>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.MediaStatusIcon">
            <summary>
            Gets or sets the icon that is displayed to indicate the (export to) DICOM media status
            of the data associated with this pictorial.
            </summary>
            <remarks>
            Typically, the value of this property is set by converting a <see cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatus"/>
            value to its corresponding icon using the <see cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatusToIconConverter"/>.
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatus">PictorialMediaStatus Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatusToIconConverter">PictorialMediaStatusToIconConverter Class</seealso>
            <seealso cref="P:Philips.Platform.Presentation.Controls.Pictorial.ExportStatusIcon">ExportStatusIcon Property</seealso>
            <seealso cref="P:Philips.Platform.Presentation.Controls.Pictorial.PrintStatusIcon">PrintStatusIcon Property</seealso>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.PrintStatusIcon">
            <summary>
            Gets or sets the icon that is displayed to indicate the print status of the data
            associated with this pictorial. 
            </summary>
            <remarks>
            Typically, the value of this property is set by converting a <see cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatus"/>
            value to its corresponding icon using the <see cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatusToIconConverter"/>.
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatus">PictorialPrintStatus Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatusToIconConverter">PictorialPrintStatusToIconConverter Class</seealso>
            <seealso cref="P:Philips.Platform.Presentation.Controls.Pictorial.ExportStatusIcon">ExportStatusIcon Property</seealso>
            <seealso cref="P:Philips.Platform.Presentation.Controls.Pictorial.MediaStatusIcon">MediaStatusIcon Property</seealso>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.AdvancedAnalysisIcon">
            <summary>
            Gets or sets the icon that is displayed to indicate that the data represented by this
            pictorial is suitable to be analyzed with advanced (plug-in) clinical applications.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Pictorial.IsContextMenuOpen">
            <summary>
            Gets or sets whether the pictorial context menu is open.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PictorialDataType">
            <summary>
            Enumeration defining the various pictorial data types.
            </summary>
            <remarks>
            <para>
            The pictorial data type is used to indicate what kind of data a pictorial is representing.
            Typically, the type of data is visualized on the pictorial in the form of an icon, to give
            a visual hint to the end user which will facilitate selecting the right pictorial for
            viewing or further processing.
            </para>
            <para>
            Typically, the conversion of the pictorial data type to a corresponding icon is done by a
            converter. The WPF Presentation Toolkit provides a default converter out-of-the-box, called
            the <see cref="T:Philips.Platform.Presentation.Controls.PictorialDataTypeToIconConverter"/>. This converter covers all the pictorial
            data types listed by this enumeration.
            </para>
            </remarks>
            <example>
            The following example shows how to use the <b>PictorialDataTypeToIconConverter</b> with the
            <b>PictorialDataTypeToIconConverterExtension</b> inside a binding:
            <code lang="xaml">
            <![CDATA[
            <Image
                Source="{Binding
                    SomePictorialDataTypeValue,
                    Converter={pt:PictorialDataTypeToIconConverter}
                }"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:Philips.Platform.Presentation.Controls.Pictorial">Pictorial Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialIndex">PictorialIndex Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialDataTypeToIconConverter">PictorialDataTypeToIconConverter Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialDataTypeToIconConverterExtension">PictorialDataTypeToIconConverterExtension Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.None">
            <summary>
            None, meaning that the pictorial data type is not defined, or not relevant.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.Biplane">
            <summary>
            Biplane data.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.BiplaneFrontal">
            <summary>
            Biplane frontal data.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.BiplaneLateral">
            <summary>
            Biplane lateral data.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.BiplaneSeriesFrontal">
            <summary>
            Biplane series frontal data.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.BiplaneSeriesLateral">
            <summary>
            Biplane series lateral data.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.BolusChase">
            <summary>
            Bolus chase.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.Collection">
            <summary>
            Collection data.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.DerivedObject">
            <summary>
            Derived object(s) data.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.Ecg">
            <summary>
            ECG data.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.Exposure">
            <summary>
            Exposure.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.Fluoroscopy">
            <summary>
            Fluoroscopy.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.Movie">
            <summary>
            Movie data.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.NotImported">
            <summary>
            Not imported.
            </summary>
            <remarks>
            This data type is used for data that has not been imported to the local system or
            local database yet. The data may be available offline, or it may be available in
            a remote database or a PACS (Picture Archiving and Communication System).
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.Report">
            <summary>
            Report.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.Request">
            <summary>
            Request.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.Run">
            <summary>
            Run data.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.SecondaryCapture">
            <summary>
            Secondary capture.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.Series">
            <summary>
            Series data.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.SingleImage">
            <summary>
            Single image.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.SpectroFrequencyDomain">
            <summary>
            Spectroscopy frequency domain data.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.SpectroTimeDomain">
            <summary>
            Spectroscopy time domain data.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.Stent">
            <summary>
            Stent data.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.ViewTrace">
            <summary>
            ViewTrace data.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialDataType.Volume">
            <summary>
            Volumetric data.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PictorialExportStatus">
            <summary>
            Enumeration defining the various pictorial export statuses.
            </summary>
            <remarks>
            Typically, the export status associated with a pictorial is converted to an icon
            which visualizes this status on the pictorial. A default mapping of the export status
            to a corresponding icon is provided by the <see cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatusToIconConverter"/>
            class.
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.Pictorial">Pictorial Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialIndex">PictorialIndex Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatus">PictorialMediaStatus Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatus">PictorialPrintStatus Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatusToIconConverter">PictorialExportStatusToIconConverter</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialExportStatus.None">
            <summary>
            None, meaning that the pictorial export status is not defined, or not relevant.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialExportStatus.General">
            <summary>
            General, meaning that an non-specific export operation for the data associated
            with the pictorial is defined.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialExportStatus.InProgress">
            <summary>
            In Progress, meaning that an export operation for the data associated with the
            pictorial is in progress.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialExportStatus.Completed">
            <summary>
            Completed, meaning that an export operation for the data associated with the
            pictorial has completed successfully.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialExportStatus.Warning">
            <summary>
            Warning, meaning that there are one or more warnings related to an export
            operation for the data associated with the pictorial.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialExportStatus.Error">
            <summary>
            Error, meaning that there are one or more errors related to an export
            operation for the data associated with the pictorial.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PictorialIndex">
            <summary>
            Custom control that represents a <b>Pictorial Index</b>,
            which is a sorted list of <see cref="T:Philips.Platform.Presentation.Controls.Pictorial"/> instances.
            </summary>
            <remarks>
            <para>
            The Pictorial Index uses a <see cref="T:System.Windows.Controls.ListBox"/> to visualize its Pictorials,
            and to allow the user to select the data represented by the Pictorials.
            </para>
            <para>
            The Pictorial Index extends the standard <see cref="T:System.Windows.Controls.ListBox"/> with two properties,
            <see cref="P:Philips.Platform.Presentation.Controls.PictorialIndex.AutoSelectFirst"/> and <see cref="P:Philips.Platform.Presentation.Controls.PictorialIndex.AutoSelectSingleItem"/>, that can be used
            to influence the automatic selection behavior of the Pictorial Index.
            </para>
            <para>
            This custom pictorial index control expects the following named template parts to be
            defined in its control template:
            <list type="bullet">
              <item>
                <term>PART_ScrollViewer</term>
                <description>The <see cref="T:System.Windows.Controls.ScrollViewer"/> that hosts the content of the pictorial
                index. This allows the user to scroll through the pictorials if there are so many
                that they can't be all shown at the same time.
                </description>
              </item>
            </list> 
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Controls.ListBox">ListBox Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.Pictorial">Pictorial Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialDataType">PictorialDataType Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatus">PictorialExportStatus Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatus">PictorialMediaStatus Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatus">PictorialPrintStatus Enumeration</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PictorialIndex.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PictorialIndex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Philips.Platform.Presentation.Controls.PictorialIndex"/> class.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialIndex.AddedItemsSincePreviousSelectionChangedProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PictorialIndex.AddedItemsSincePreviousSelectionChanged"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialIndex.RemovedItemsSincePreviousSelectionChangedProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.PictorialIndex.RemovedItemsSincePreviousSelectionChanged"/> dependency
            property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PictorialIndex.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PictorialIndex.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            This is for filling the <see cref="P:Philips.Platform.Presentation.Controls.PictorialIndex.AddedItemsSincePreviousSelectionChanged"/> and <see cref="P:Philips.Platform.Presentation.Controls.PictorialIndex.RemovedItemsSincePreviousSelectionChanged"/> list.
            </summary>
            <param name="e">Event with the added and removed items</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PictorialIndex.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Updates the current selection taking the values of <see cref="P:Philips.Platform.Presentation.Controls.PictorialIndex.AutoSelectFirst"/> and
            <see cref="P:Philips.Platform.Presentation.Controls.PictorialIndex.AutoSelectSingleItem"/> into account.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PictorialIndex.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>
            This method returns a new <see cref="T:Philips.Platform.Presentation.Controls.Pictorial"/> instance, which is
            the element type that is hosted by a <b>PictorialIndex</b>.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PictorialIndex.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            <see langword="true"/>, if the specified item is a <see cref="T:Philips.Platform.Presentation.Controls.Pictorial"/>;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PictorialIndex.OnPictorialIndexMouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This Method is added because the checkbox sets the e.Handled to true
            (in the mouseEvents) and we need to handle this event. This method changes the
            Handled to false.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PictorialIndex.OnPictorialIndexMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This Method is added because the checkbox sets the e.Handled to true
            (in the mouseEvents) and we need to handle this event. This method changes the
            Handled to false.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PictorialIndex.AddedItemsSincePreviousSelectionChanged">
            <summary>
            Gets the collection of items that have been added since the previous
            <c>SelectionChanged</c> event.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PictorialIndex.RemovedItemsSincePreviousSelectionChanged">
            <summary>
            Gets the collection of items that have been removed since the previous
            <c>SelectionChanged</c> event.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PictorialIndex.AutoSelectFirst">
            <summary>
            Gets or sets whether the first item in the pictorial index is automatically selected.
            </summary>
            <remarks>
            <para>
            The intention of this property is that, if nothing is selected (by setting
            <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedItem"/> to <see langword="null"/>, for example),
            automatically the first item will be selected. This supports the use case where
            always at least one item in the pictorial index should be selected.
            </para>
            <para>
            By default, the value of this property is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PictorialIndex.AutoSelectSingleItem">
            <summary>
            Gets or sets whether an item in the pictorial index is automatically selected
            if it is the only item.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PictorialMediaStatus">
            <summary>
            Enumeration defining the various pictorial DICOM media statuses.
            </summary>
            <remarks>
            Typically, the DICOM media status associated with a pictorial is converted to an icon
            which visualizes this status on the pictorial. A default mapping of the DICOM media status
            to a corresponding icon is provided by the <see cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatusToIconConverter"/>
            class.
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.Pictorial">Pictorial Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialIndex">PictorialIndex Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatus">PictorialExportStatus Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatus">PictorialPrintStatus Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatusToIconConverter">PictorialMediaStatusToIconConverter</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialMediaStatus.None">
            <summary>
            None, meaning that the pictorial DICOM media status is not defined, or not relevant.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialMediaStatus.General">
            <summary>
            General, meaning that an non-specific DICOM media operation for the data associated
            with the pictorial is defined.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialMediaStatus.InProgress">
            <summary>
            In Progress, meaning that a DICOM media operation for the data associated with the
            pictorial is in progress.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialMediaStatus.Completed">
            <summary>
            Completed, meaning that a DICOM media operation for the data associated with the
            pictorial has completed successfully.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialMediaStatus.Warning">
            <summary>
            Warning, meaning that there are one or more warnings related to a DICOM media
            operation for the data associated with the pictorial.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialMediaStatus.Error">
            <summary>
            Error, meaning that there are one or more errors related to a DICOM media
            operation for the data associated with the pictorial.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PictorialPrintStatus">
            <summary>
            Enumeration defining the various pictorial print statuses.
            </summary>
            <remarks>
            Typically, the print status associated with a pictorial is converted to an icon
            which visualizes this status on the pictorial. A default mapping of the print status
            to a corresponding icon is provided by the <see cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatusToIconConverter"/>
            class.
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.Pictorial">Pictorial Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialIndex">PictorialIndex Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatus">PictorialExportStatus Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatus">PictorialMediaStatus Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatusToIconConverter">PictorialPrintStatusToIconConverter</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialPrintStatus.None">
            <summary>
            None, meaning that the pictorial print status is not defined, or not relevant.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialPrintStatus.General">
            <summary>
            General, meaning that an non-specific print operation for the data associated
            with the pictorial is defined.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialPrintStatus.InProgress">
            <summary>
            In Progress, meaning that a print operation for the data associated with the
            pictorial is in progress.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialPrintStatus.Completed">
            <summary>
            Completed, meaning that a print operation for the data associated with the
            pictorial has completed successfully.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialPrintStatus.Warning">
            <summary>
            Warning, meaning that there are one or more warnings related to a print
            operation for the data associated with the pictorial.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PictorialPrintStatus.Error">
            <summary>
            Error, meaning that there are one or more errors related to a print
            operation for the data associated with the pictorial.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PinningMode">
            <summary>
            Enumeration defining the various pinning modes.
            </summary>
            <remarks>
            This enumeration is used to define the pinning mode for pinnable UI elements
            such as the <see cref="T:System.Windows.Controls.ToolBar"/> or the <see cref="T:Philips.Platform.Presentation.Controls.MovieBar"/>.
            </remarks>
            <seealso cref="T:System.Windows.Controls.ToolBar">ToolBar Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ToolBarContainer">ToolBarContainer Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.MovieBar">MovieBar Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PinningMode.None">
            <summary>
            The pinning mode is not initialized or not defined.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PinningMode.PinAlways">
            <summary>
            The pinnable UI element is always pinned.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PinningMode.PinNever">
            <summary>
            The pinnable UI element is never pinned.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.PinningMode.PinManual">
            <summary>
            The pinnable UI element can be pinned and unpinned manually by the user.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PreviewMouseMoveWeakEventManager">
            <summary>
            Custom <seealso cref="T:System.Windows.WeakEventManager"/> that is used to subscribe to the 
            <see cref="E:System.Windows.UIElement.PreviewMouseMove"/> event, using a weak reference.
            </summary>
            <remarks>
            By subscribing to the event without using a strong reference, memory leaks can be avoided.
            One example which uses this class is the <see cref="T:Philips.Platform.Presentation.Controls.ToolBarContainer"/> which subscribes
            to the <see cref="E:System.Windows.UIElement.PreviewMouseMove"/> event of its parent <see cref="T:System.Windows.Window"/>.
            When this would be done using a strong reference, the window would hold a reference to the
            <c>ToolBarContainer</c>. This way, the <c>ToolBarContainer</c> would never be disposed.
            A memory leak would exist. This memory leak is avoided by the intervention of the
            <c>WeakEventManager</c>.
            </remarks>
            <seealso cref="T:System.Windows.WeakEventManager">WeakEventManager Class</seealso>
            <seealso cref="E:System.Windows.UIElement.PreviewMouseMove">PreviewMouseMove Event</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PreviewMouseMoveWeakEventManager.AddListener(System.Windows.UIElement,System.Windows.IWeakEventListener)">
            <summary>
            Adds a listener to the given source's <see cref="E:System.Windows.UIElement.PreviewMouseMove"/> event.
            </summary>
            <param name="source">The source whose event we are adding a listener to.</param>
            <param name="listener">The listener.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when an attempt is made to call this method without specifying a source or
            a listener.
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PreviewMouseMoveWeakEventManager.RemoveListener(System.Windows.UIElement,System.Windows.IWeakEventListener)">
            <summary>
            Removes a listener from the given source's <see cref="E:System.Windows.UIElement.PreviewMouseMove"/>
            event.
            </summary>
            <param name="source">The source whose event we are removing a listener from.</param>
            <param name="listener">The listener.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when an attempt is made to call this method without specifying a source or
            a listener.
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PreviewMouseMoveWeakEventManager.StartListening(System.Object)">
            <summary>
            Starts listening to the given source for the event.
            </summary>
            <param name="source">The event source to start listening to.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PreviewMouseMoveWeakEventManager.StopListening(System.Object)">
            <summary>
            Stops listening to the given source for the event.
            </summary>
            <param name="source">The event source to stop listening to.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PreviewMouseMoveWeakEventManager.OnPreviewMouseMove(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.PreviewMouseMove"/> event.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PreviewMouseMoveWeakEventManager.CurrentManager">
            <summary>
            Gets the event manager for the current thread.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ResizeDirection">
            <summary>
            Enumeration defining the possible directions in which a <see cref="T:Philips.Platform.Presentation.Controls.Resizer"/> can resize.
            </summary>
            <seealso cref="T:Philips.Platform.Presentation.Controls.Resizer">Resizer Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ResizeDirection.NorthEast">
            <summary>
            Size is increased by dragging up and to the right,
            and decreased by dragging down and to the left.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ResizeDirection.NorthWest">
            <summary>
            Size is increased by dragging up and to the left,
            and decreased by dragging down and to the right.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ResizeDirection.SouthEast">
            <summary>
            Size is increased by dragging down and to the right,
            and decreased by dragging up and to the left.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ResizeDirection.SouthWest">
            <summary>
            Size is increased by dragging down and to the left,
            and decreased by dragging up and to the right.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.Resizer">
            <summary>
            Represents a control with a single, resizable piece of content.
            </summary>
            <remarks>
            <para>
            The <c>Resizer</c> is a custom <see cref="T:System.Windows.Controls.ContentControl"/> that allows itself to
            be resized. The default template places a WPF <see cref="T:System.Windows.Controls.Primitives.ResizeGrip"/> in the
            lower-right-hand corner of the content. The user can drag the size grip in order
            to resize the <c>Resizer</c> and its content.
            </para>
            <para>
            The <see cref="P:Philips.Platform.Presentation.Controls.Resizer.IsGripEnabled"/> and <see cref="P:Philips.Platform.Presentation.Controls.Resizer.IsGripVisible"/> properties
            facilitate control over the resize grip inside the <c>Resizer</c>.
            </para>
            <para>
            The code in this file was originally written by Kent Boogaart, 
            and could be found on his blog at 
            <see href="http://kentb.blogspot.nl/2007/04/resizer-wpf-control.html"/>.
            Unfortunately, it seems that his blog is no longer active, 
            and this hyperlink does not lead to an active page anymore. 
            We have not been able to find a suitable replacement for this original blog post.
            The code has been modified to meet the HSDP Clinical Platform quality requirements.
            </para>
            </remarks>
            <example>
            The following example shows how a <c>Resizer</c> can be used to provide
            a resizable <c>TextBox</c>:
            <code>
            <![CDATA[
            <ptc:Resizer>
                <TextBox/>
            </ptc:Resizer>
            ]]>
            </code>
            </example>
            <example>
            The following example shows how a <c>Resizer</c> can be used to provide
            resizable content inside a <c>Popup</c>:
            <code>
            <![CDATA[
            <Popup>
                <ptc:Resizer>
                    <TextBlock>Here is the content</TextBlock>
                </ptc:Resizer>
            </Popup>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.ContentControl">ContentControl Class</seealso>
            <seealso cref="T:System.Windows.Controls.Primitives.ResizeGrip">ResizeGrip Class</seealso>
            <seealso href="http://kentb.blogspot.nl/2007/04/resizer-wpf-control.html">Resizer: a WPF Control</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Resizer.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Resizer.IsGripEnabledProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Resizer.IsGripEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Resizer.IsGripVisibleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Resizer.IsGripVisible"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Resizer.IsAutoSizeEnabledProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Resizer.IsAutoSizeEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Resizer.ResizeDirectionProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Resizer.ResizeDirection"/> dependency property.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Resizer.IsGripEnabled">
            <summary>
            Gets or sets a value indicating whether the grip is enabled.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Resizer.IsGripVisible">
            <summary>
            Gets or sets a value indicating whether the grip is visible.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Resizer.IsAutoSizeEnabled">
            <summary>
            Gets or sets a value indicating whether the <c>Resizer</c> can be auto-sized
            (by double-clicking on the grip in the default template).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Resizer.ResizeDirection">
            <summary>
            Gets or sets a value indicating the direction in which resizing takes place.
            </summary>
            <remarks>
            By default, the value of this property is
            <see cref="F:Philips.Platform.Presentation.Controls.ResizeDirection.SouthEast">ResizeDirection.SouthEast</see>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Resizer.StartResizeCommand">
            <summary>
            Gets the command used to start a resize operation.
            </summary>
            <remarks>
            The parameter passed to the command must be a <see cref="T:System.Windows.FrameworkElement"/>,
            which is used as a context for the resizing operation.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Resizer.UpdateSizeCommand">
            <summary>
            Gets the command used to update the size of the <c>Resizer</c>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Resizer.EndResizeCommand">
            <summary>
            Gets the command used to end a resize operation.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Resizer.AutoSizeCommand">
            <summary>
            Gets the command used to automatically size the <c>Resizer</c> according to its content.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ScrollChangedWeakEventManager">
            <summary>
            Custom <seealso cref="T:System.Windows.WeakEventManager"/> that is used to subscribe to the 
            <see cref="E:System.Windows.Controls.ScrollViewer.ScrollChanged"/> event, using a weak reference.
            </summary>
            <remarks>
            By subscribing to the event without using a strong reference, memory leaks can be
            avoided. One example which uses this class is the <see cref="T:Philips.Platform.Presentation.Controls.ListHeaderControl"/> which
            subscribes to the <see cref="E:System.Windows.Controls.ScrollViewer.ScrollChanged"/> event of its parent 
            <see cref="T:System.Windows.Controls.ScrollViewer"/>. When this would be done using a strong reference, the 
            scroll viewer would hold a reference to the child <see cref="T:Philips.Platform.Presentation.Controls.ListHeaderControl"/>'s. 
            This way, the child <see cref="T:Philips.Platform.Presentation.Controls.ListHeaderControl"/>'s would never be disposed, even if
            they would contain no children. A memory leak would exist.
            </remarks>
            <seealso cref="T:System.Windows.WeakEventManager">WeakEventManager Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ScrollChangedWeakEventManager.AddListener(System.Windows.Controls.ScrollViewer,System.Windows.IWeakEventListener)">
            <summary>
            Add a listener for the given source's event.
            </summary>
            <param name="source">The source.</param>
            <param name="listener">The listener.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when an attempt is made to call this method without specifying a source or
            a listener.
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ScrollChangedWeakEventManager.RemoveListener(System.Windows.Controls.ScrollViewer,System.Windows.IWeakEventListener)">
            <summary>
            Remove a listener for the given source's event.
            </summary>
            <param name="source">The source.</param>
            <param name="listener">The listener.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when an attempt is made to call this method without specifying a source or
            a listener.
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ScrollChangedWeakEventManager.StartListening(System.Object)">
            <summary>
            Starts listening to the given source for the event.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ScrollChangedWeakEventManager.StopListening(System.Object)">
            <summary>
            Stops listening to the given source for the event.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ScrollChangedWeakEventManager.OnScrollChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="M:System.Windows.Controls.ScrollViewer.OnScrollChanged(System.Windows.Controls.ScrollChangedEventArgs)"/> event.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ScrollChangedWeakEventManager.CurrentManager">
            <summary>
            Gets the event manager for the current thread.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ScrollViewerShadowOverlay">
            <summary>
            Extends the <see cref="T:Philips.Platform.Presentation.Controls.ShadowOverlay"/> by adding support for <see cref="P:Philips.Platform.Presentation.Controls.ScrollViewerShadowOverlay.ScrollViewer"/>s.
            </summary>
            <remarks>
            This class limits the shadow thickness by checking the offsets of the 
            associated <see cref="P:Philips.Platform.Presentation.Controls.ScrollViewerShadowOverlay.ScrollViewer"/>:
            <list type="bullet">
              <item>
              If the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalOffset">HorizontalOffset</see>
              is 0, the shadow on the left side should not be visible.
              </item>
              <item>
              If the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalOffset">HorizontalOffset</see>
              is equal to the <see cref="P:System.Windows.Controls.ScrollViewer.ScrollableWidth">ScrollableWidth</see>,
              the shadow on the right side should not be visible.
              </item>
              <item>
              If the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalOffset">VerticalOffset</see>
              is 0, the shadow on the top side should not be visible.
              </item>
              <item>
              If the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalOffset">VerticalOffset</see>
              is equal to the <see cref="P:System.Windows.Controls.ScrollViewer.ScrollableHeight">ScrollableHeight</see>,
              the shadow on the bottom side should not be visible.
              </item>
            </list>
            Once scrolling occurs and content disappears at a certain side, then the shadow on 
            that side will gradually appear.
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ShadowOverlay">ShadowOverlay Class</seealso>
            <seealso cref="T:System.Windows.IWeakEventListener">IWeakEventListener Interface</seealso>
            <seealso cref="P:Philips.Platform.Presentation.Controls.ScrollViewerShadowOverlay.ScrollViewer">ScrollViewer Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ShadowOverlay">
            <summary>
            Custom <seealso cref="T:System.Windows.FrameworkElement"/> that can render a "shadow" on each of the four
            sides of the control on which this element is overlaid.
            </summary>
            <remarks>
            This class renders shadows by painting a rectangle with a certain brush and a certain
            opacity mask. Because of the opacity mask, the rectangle gradually blends into its 
            background, giving it the appearance of a shadow. Since this element has no background of
            its own, casting drop shadows instead of painting four separate rectangles is not an option.
            </remarks>
            <seealso cref="T:System.Windows.FrameworkElement">FrameworkElement Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ScrollViewerShadowOverlay">ScrollViewerShadowOverlay Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ShadowOverlay.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ShadowOverlay.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ShadowOverlay.GetIsShadowEnabled(System.Windows.DependencyObject)">
            <summary>
            Gets whether a control can show a shadow overlay.
            </summary>
            <remarks>
            The default value is <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ShadowOverlay.SetIsShadowEnabled(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether a control can show a shadow overlay.
            </summary>
            <remarks>
            Since this property is inheritable, it can be set on any element which ultimately 
            contains a shadow overlay. So, if it is set on a windows level, every shadow overlay 
            in that window will inherit the value.
            The default value is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ShadowOverlay.IsShadowEnabledProperty">
            <summary>
            Attached property for the <c>IsShadowEnabled</c> property.
            </summary>
            <remarks>
            <para>
            Since this property is inheritable, it can be set on any element which ultimately 
            contains a shadow overlay. So, if it is set on a windows level, every shadow overlay 
            in that window will inherit the value.
            </para>
            <para>
            The default value is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ShadowOverlay.ShadowBrushProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ShadowOverlay.ShadowBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ShadowOverlay.LeftShadowBrushProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ShadowOverlay.LeftShadowBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ShadowOverlay.TopShadowBrushProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ShadowOverlay.TopShadowBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ShadowOverlay.RightShadowBrushProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ShadowOverlay.RightShadowBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ShadowOverlay.BottomShadowBrushProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ShadowOverlay.BottomShadowBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ShadowOverlay.ShadowThicknessProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ShadowOverlay.ShadowThickness"/> dependency property.
            </summary>
            <remarks>
            The default value is a thickness of 0 at each side.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ShadowOverlay.OnShadowThicknessChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.ShadowOverlay.ShadowThickness"/> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ShadowOverlay.OnShadowThicknessChanged(System.Windows.Thickness,System.Windows.Thickness)">
            <summary>
            Provides derived classes an opportunity to handle changes to the 
            ShadowThickness property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ShadowOverlay.CoerceShadowThickness(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the value of the <see cref="P:Philips.Platform.Presentation.Controls.ShadowOverlay.ShadowThickness"/> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ShadowOverlay.OnRender(System.Windows.Media.DrawingContext)">
             <summary>
             Creates the drawing instructions for this element.
             </summary>
             <param name="drawingContext">
             The <see cref="T:System.Windows.Media.DrawingContext"/> which contains the drawing instructions for a 
             specific element. This context is provided to the layout system.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ShadowOverlay.OnRenderShadows(System.Windows.Media.DrawingContext)">
             <summary>
             Creates the drawing instructions for the shadows.
             </summary>
             <param name="drawingContext">
             The <see cref="T:System.Windows.Media.DrawingContext"/> which contains the drawing instructions for a 
             specific element. This context is provided to the layout system.
            </param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ShadowOverlay.ShadowBrush">
            <summary>
            Gets or sets the general brush which colors the shadows.
            </summary>
            <remarks>
            This brush is only used if specific side brushes are not specified. 
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ShadowOverlay.LeftShadowBrush">
            <summary>
            Gets or sets the brush which colors the left shadow.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ShadowOverlay.TopShadowBrush">
            <summary>
            Gets or sets the brush which colors the top shadow.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ShadowOverlay.RightShadowBrush">
            <summary>
            Gets or sets the brush which colors the right shadow.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ShadowOverlay.BottomShadowBrush">
            <summary>
            Gets or sets the brush which colors the bottom shadow.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ShadowOverlay.ShadowThickness">
            <summary>
            Gets or sets the thickness of the shadows on each of the four sides.
            </summary>
            <remarks>
            The default value is a thickness of 0 at each side.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ScrollViewerShadowOverlay.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ScrollViewerShadowOverlay.ScrollViewerProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ScrollViewerShadowOverlay.ScrollViewer"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ScrollViewerShadowOverlay.OnShadowThicknessChanged(System.Windows.Thickness,System.Windows.Thickness)">
            <summary>
            Handles changes in the <see cref="P:Philips.Platform.Presentation.Controls.ShadowOverlay.ShadowThickness"/> property.
            </summary>
            <param name="oldShadowThickness">The old shadow thickness.</param>
            <param name="newShadowThickness">The new shadow thickness.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ScrollViewerShadowOverlay.OnScrollViewerChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the ScrollViewer property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ScrollViewerShadowOverlay.CoerceShadowThickness(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the <see cref="P:Philips.Platform.Presentation.Controls.ShadowOverlay.ShadowThickness"/> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ScrollViewerShadowOverlay.CoerceShadowThickness(System.Windows.Thickness)">
            <summary>
            Coerces the <see cref="P:Philips.Platform.Presentation.Controls.ShadowOverlay.ShadowThickness"/> property.
            </summary>
            <remarks>
            This method coerces the shadow thickness by checking the offsets of the 
            associated <see cref="P:Philips.Platform.Presentation.Controls.ScrollViewerShadowOverlay.ScrollViewer"/>:
            <list type="bullet">
              <item>
                If the horizontal offset is 0, the shadow on the left side should not be visible
              </item>
              <item>
                If the horizontal offset is equal to the ScrollableWidth, the shadow on the right 
                side should not be visible
              </item>
              <item>
                If the vertical offset is 0, the shadow on the top side should not be visible
              </item>
              <item>
                If the vertical offset is equal to the ScrollableHeight, the shadow on the bottom 
                side should not be visible
              </item>
            </list>
            Once scrolling occurs and content disappears at a certain side, then the shadow on 
            that side will gradually appear.
            </remarks>
            <param name="shadowThickness">The desired shadow thickness.</param>
            <returns>The final shadow thickness.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ScrollViewerShadowOverlay.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <summary>
            Handles changes to the scroll viewer's scroll position, extent, or viewport size.
            </summary>
            <remarks>
            Calculates the header top offset, which moves the header up or down.
            The <see cref="T:Philips.Platform.Presentation.Controls.ScrollChangedWeakEventManager"/> is used to subscribe to the 
            <see cref="E:System.Windows.Controls.ScrollViewer.ScrollChanged"/> event, 
            using a weak reference.
            </remarks>
            <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager"/> that is used to subscribe to the <see cref="E:System.Windows.Controls.ScrollViewer.ScrollChanged"/> event.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
            <returns>True if the event is recognized and handled, false otherwise.</returns>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ScrollViewerShadowOverlay.ScrollViewer">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Controls.ScrollViewer"/> which 
            this shadow overlay depends on.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ShrinkableStackPanel">
            <summary>
            Custom <see cref="T:System.Windows.Controls.StackPanel"/> to deal with space limitations.
            </summary>
            <remarks>
            This custom <see cref="T:System.Windows.Controls.StackPanel"/> deals with space limitations by shrinking the 
            children in the descending order of their width (widest to smallest). 
            The total process of shrinking the children is called the shrinking process. 
            Every time the ShrinkableStackPanel is measured, this process is executed. 
            This means that no state information is kept between subsequent measurements. However,
            state information is kept between a measurement and arrangement.
            <br/>
            This custom <see cref="T:System.Windows.Controls.StackPanel"/> only supports the 
            <see cref="F:System.Windows.Controls.Orientation.Horizontal">Horizontal</see> orientation. 
            </remarks>
            <seealso cref="T:System.Windows.Controls.StackPanel">StackPanel Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ShrinkableStackPanel.widthToShrink">
            <summary>
            The width to shrink.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ShrinkableStackPanel.childrenSortedOnWidth">
            <summary>
            The collection of children, sorted on their width.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ShrinkableStackPanel.widthDictionary">
            <summary>
            Stores the new desired width of the shrunken or hidden children.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ShrinkableStackPanel.IsShrinkingNecessaryProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ShrinkableStackPanel.IsShrinkingNecessary"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ShrinkableStackPanel.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ShrinkableStackPanel.GetLayoutClip(System.Windows.Size)">
            <summary>
            Returns a geometry for a clipping mask.
            </summary>
            <param name="layoutSlotSize">
            The size of the part of the element that is visible.
            </param>
            <remarks>
            This override is necessary, because a negative margin is applied to the selected
            <see cref="T:System.Windows.Controls.TabItem"/> within a <see cref="T:System.Windows.Controls.TabControl"/> and this 
            <see cref="T:Philips.Platform.Presentation.Controls.ShrinkableStackPanel"/> is typically used within a <see cref="T:System.Windows.Controls.TabControl"/>.
            Otherwise, the TabItem would be clipped at the top and at the bottom.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ShrinkableStackPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the <see cref="T:Philips.Platform.Presentation.Controls.ShrinkableStackPanel"/>.
            </summary>
            <param name="constraint">The maximum size that the method can return.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ShrinkableStackPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the children of the <see cref="T:Philips.Platform.Presentation.Controls.ShrinkableStackPanel"/>.
            </summary>
            <param name="arrangeSize">
            The size of the final area within the parent that this element should use to arrange
            its children. 
            </param>
            <remarks>
            The ArrangeOverride is overridden because we don't want the children to be arranged 
            according to their desired size. This would give a jumping effect when the panel
            would shrink. At the same time, we have to respect the 
            <see cref="P:System.Windows.FrameworkElement.Width"/>, <see cref="P:System.Windows.FrameworkElement.MinWidth"/> and 
            <see cref="P:System.Windows.FrameworkElement.MaxWidth"/> of the children; this would automatically 
            be done if the desired size of the children would be used to arrange them.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ShrinkableStackPanel.DetermineDesiredWidth(System.Windows.Size)">
            <summary>
            Determines the desired width of the <see cref="T:Philips.Platform.Presentation.Controls.ShrinkableStackPanel"/> when
            no truncation would be necessary.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ShrinkableStackPanel.ShrinkChildren(System.Boolean)">
            <summary>
            Shrinks children as much as needed and possible.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ShrinkableStackPanel.ShrinkChildren(System.Int32)">
            <summary>
            Shrinks all children with an index equal or less than a certain index.
            </summary>
            <param name="index">The current index in the sort order.</param>
            <returns>If the shrinking process is finished.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ShrinkableStackPanel.DetermineNewWidth(System.Int32,System.Double,System.Double)">
            <summary>
            Computes and sets the new width of the children that are currently shrunken.
            </summary>
            <param name="childIndex">The index of the new child to shrink.</param>
            <param name="oldWidth">The current width of the child to shrink.</param>
            <param name="newWidth">The target width of the child to shrink.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ShrinkableStackPanel.Remeasure">
            <summary>
            Re-measures the shrunken children.
            </summary>
            <returns>
            The new size that <see cref="T:Philips.Platform.Presentation.Controls.ShrinkableStackPanel"/> would like to have.
            </returns>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ShrinkableStackPanel.IsShrinkingNecessary">
            <summary>
            Gets or sets whether shrinking is necessary or not.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.Side">
            <summary>
            Enumeration defining the various sides (left, right, top, bottom) of a UI element.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Side.Left">
            <summary>
            The left side.
            </summary>
            <remarks>
            The left side is considered to be the zero value for this enumeration.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Side.Right">
            <summary>
            The right side.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Side.Top">
            <summary>
            The top side.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Side.Bottom">
            <summary>
            The bottom side.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.SingleChildToolBarTray">
            <summary>
            Custom <see cref="T:System.Windows.Controls.ToolBarTray"/> which layouts its first child 
            only and gives it all the available space.
            </summary>
            <seealso cref="T:System.Windows.Controls.ToolBarTray">ToolBarTray Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SingleChildToolBarTray.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SingleChildToolBarTray.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the first child to the complete given area.
            </summary>
            <param name="finalSize">
            The final area within the parent that this element 
            should use to arrange itself and its first child.
            </param>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.Spinner">
            <summary>
            General purpose spinner control, which can be used to select a value from a collection
            of values.
            </summary>
            <remarks>
            <para>
            This class represents a general purpose spinner control, which can be used to display
            and select an item from a collection of items. It is implemented as a custom 
            <see cref="T:System.Windows.Controls.Primitives.Selector"/>, which means that it has a SelectedItem, SelectedIndex, 
            an ItemTemplate to visualize the selected item, etc.
            </para>
            <para>
            This class assumes that there is a 'SelectNext' and 'SelectPrevious' button provided
            by the applied style. The commands of these buttons are to be bound to the class commands 
            <see cref="F:Philips.Platform.Presentation.Controls.Spinner.InternalSelectNextCommand"/> and <see cref="F:Philips.Platform.Presentation.Controls.Spinner.InternalSelectPreviousCommand"/>. 
            Pressing the SelectNext button selects the next item in the list until the last item 
            is selected. When the control can cycle (IsCyclic == true), the selection does not stop
            at the last item, but proceeds with the first item.
            Likewise, pressing the SelectPrevious button selects the previous item in the list 
            until the first item is selected. When the control can cycle (IsCyclic == true), 
            the selection does not stop at the first item, but proceeds with the last item.
            </para>
            <para>
            This class allows the user to define the tooltips that are used for the spinner's 
            SelectNext and SelectPrevious buttons. By exposing these properties, the control 
            itself remains agnostic to what exactly the item that it visualizes represents, 
            while giving the maximum amount of freedom to the user to customize the control's visual 
            appearance.
            </para>
            <para>
            A typical use case for this spinner is a frame rate control that allows the user to set
            the frame rate only to a set of predefined values.
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Controls.Primitives.Selector">Selector Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.DoubleSpinner">DoubleSpinner Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.DoubleCollectionSpinner">DoubleCollectionSpinner Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Spinner.InternalSelectNextCommand">
            <summary>
            Internal command for selecting the next item.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Spinner.InternalSelectPreviousCommand">
            <summary>
            Internal command for selecting the previous item.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Spinner.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Spinner.IsSelectedItemDisplayedProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Spinner.IsSelectedItemDisplayed"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Spinner.IsCyclicProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Spinner.IsCyclic"/> dependency property.
            </summary>
            <para>
            By default, the value of this property is <see langword="true"/>.
            </para>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Spinner.SelectNextToolTipProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Spinner.SelectNextToolTip"/> dependency property.
            </summary>
            <remarks>
            The default value is an empty string.
            </remarks> 
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.Spinner.SelectPreviousToolTipProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.Spinner.SelectPreviousToolTip"/> dependency property.
            </summary>
            <remarks>
            The default value is an empty string.
            </remarks> 
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Spinner.OnSelectNext(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executes the <see cref="F:Philips.Platform.Presentation.Controls.Spinner.InternalSelectNextCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Spinner.OnSelectPrevious(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executes the <see cref="F:Philips.Platform.Presentation.Controls.Spinner.InternalSelectPreviousCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Spinner.OnSelectNext">
            <summary>
            Selects the next item.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Spinner.OnSelectPrevious">
            <summary>
            Selects the previous item.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Spinner.OnCanSelectNext(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether the <see cref="F:Philips.Platform.Presentation.Controls.Spinner.InternalSelectNextCommand"/> can execute.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Spinner.OnCanSelectNext">
            <summary>
            Determines whether the next item can be selected.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Spinner.OnCanSelectPrevious(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether the <see cref="F:Philips.Platform.Presentation.Controls.Spinner.InternalSelectPreviousCommand"/> can execute.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.Spinner.OnCanSelectPrevious">
            <summary>
            Determines whether the previous item can be selected.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Spinner.IsSelectedItemDisplayed">
            <summary>
            Gets or sets whether the selected item should be displayed.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Spinner.IsCyclic">
            <summary>
            Gets or sets whether this control can cycle through its values.
            </summary>
            <remarks>
            <para>
            Cycling means:
            <list type="bullet">
              <item>
                When the first item is selected and the SelectPrevious button is pressed, 
                the last item will become selected.
              </item>
              <item>
                When the last item is selected and the SelectNext button is pressed, 
                the first item will become selected.
              </item>
            </list>
            </para>
            <para>
            By default, the value of this property is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Spinner.SelectNextToolTip">
            <summary>
            Gets or sets the tooltip for the SelectNext button.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.Spinner.SelectNextToolTipProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is an empty string.
            </remarks> 
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.Spinner.SelectPreviousToolTip">
            <summary>
            Gets or sets the tooltip for the SelectPrevious button.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.Spinner.SelectPreviousToolTipProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is an empty string.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.SplitButton">
            <summary>
            Custom <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonBase"/> that implements the combination of a 
            <seealso cref="T:System.Windows.Controls.Button"/> with a drop down. 
            </summary>
            <remarks>
            Like a regular <see cref="T:System.Windows.Controls.Button"/>, the SplitButton extends the 
            <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonBase"/> by adding functionality to make a button default.
            </remarks>
            <example>
            <para>
            The following example shows how to instantiate a <c>SplitButton</c> using static 
            content and hard-coded items. The necessary data template is omitted in this example.
            <code lang="xaml">
            <![CDATA[
            <ptc:SplitButton StaticContent="{Binding ToolIcon}">
                <ptc:SplitButtonItem Content="{StaticResource ZoomIcon}"/>
                <ptc:SplitButtonItem Content="{StaticResource InteractorIcon}"/>
                <ptc:SplitButtonItem Content="{StaticResource ViewIcon}"/>
            </ptc:SplitButton>
            ]]>
            </code>
            </para>
            <para>
            It is also possible to use data binding. The split button items can be bound to the
            <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource">ItemsSource</see> property, and an item template can
            be provided to visualize the items. The example below illustrates this by binding the
            <c>ItemsSource</c> to a collection of tool icons, and visualizing each item as an icon.
            It is not necessary to explicitly set the selected index to 0, this is done by default.
            Of course, the selected index can be set to a different value if needed.
            <code lang="xaml">
            <![CDATA[
            <ptc:SplitButton ItemsSource="{Binding ToolIcons}">
                <ptc:SplitButton.ItemTemplate>
                    <DataTemplate>
                        <Image
                            Source="{Binding ImageSource}"
                            Width="{DynamicResource ToolBarItemImageWidth}"
                            Height="{DynamicResource ToolBarItemImageHeight}"/>
                    </DataTemplate>
                </ptc:SplitButton.ItemTemplate>
            </ptc:SplitButton>
            ]]>
            </code>
            </para>
            </example>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitButtonBase">SplitButtonBase Class</seealso>
            <seealso cref="T:System.Windows.Controls.Button">Button Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.SplitButtonBase">
            <summary>
            A custom control, deriving from <seealso cref="T:System.Windows.Controls.ComboBox"/>, that implements the concept of
            a "split button": a combination of either a <seealso cref="T:System.Windows.Controls.Button"/>, a
            <seealso cref="T:System.Windows.Controls.Primitives.ToggleButton"/> or a <seealso cref="T:System.Windows.Controls.RadioButton"/>, with a drop down button
            that provides access to a collection of <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonItem"/> elements.
            </summary>
            <remarks>
            <para>
            A split button is a combination of a basic button - called the <b>action element</b> -
            and a drop down button next to it. There are two ways to open this drop down:
            either by pressing the action element and holding it for a while, or by clicking the
            drop down button.
            </para>
            <para>
            By default, the content of the action element will be bound to the selected item.
            However, if one of the four <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContent"/> properties is set, the
            corresponding default binding with the selected item will be overridden. In other words,
            to set static content on the action element (content that doesn't change when the
            selection changes), just set the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContent"/> property, optionally in
            combination with the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContentTemplate"/>,
            <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContentTemplateSelector"/> or <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContentStringFormat"/>. If
            one of the four static properties is set, the split button is said to be in 'static mode'.
            </para>
            <para>
            This custom split button expects various named template parts to be
            defined in its control template. These template parts are:
            <list type="bullet">
              <item>
                <term>PART_ActionElement</term>
                <description>The split button's action element, which is the element that displays
                either the selected content or the static content that is associated with the split
                button. This element is active in the sense that clicking it will provide access to
                the split button items.</description>
              </item>
              <item>
                <term>PART_DropDownButton</term>
                <description>The split button's drop down button. Clicking this drop down button will
                provide access to the split button items.
                The drop down button is expected to be a <see cref="T:System.Windows.Controls.Primitives.ToggleButton"/>, so that it is
                possible to monitor its <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsChecked"/> state. The property
                <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.IsDropDownButtonChecked"/> is introduced to make it possible to monitor
                from the outside whether the drop down button is checked or not.</description>
              </item>
              <item>
                <term>PART_Popup</term>
                <description>The drop down that contains the items in the split button. This part is
                "inherited" from the <see cref="T:System.Windows.Controls.ComboBox"/> control from which this split button is
                derived. The drop down determines its own width based on the widest split button item
                and the value of the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.WrapWidth"/> property. If you want the drop down to
                have the exact same width as the split button itself, you can set the property
                <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.UseSplitButtonWidthForDropDown"/> to <see langword="true"/>.</description>
              </item>
            </list>
            </para>
            <para>
            Just like in a menu, it is sometimes useful to group the split button items that
            are part of the split button's drop down content. To facilitate this grouping, it is
            possible to host <see cref="T:System.Windows.Controls.Separator"/> items next to <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonItem"/>s.
            Again, just like in a menu, the separators will be displayed so as to convey the idea
            of grouped sets of items.
            </para>
            <para>
            <b>KNOWN ISSUE</b> This control derives from the standard WPF <see cref="T:System.Windows.Controls.ComboBox"/>
            control. In the <b>ComboBox</b> dropdown list, the <see cref="F:System.Windows.Input.Key.Down"/> and
            <see cref="F:System.Windows.Input.Key.Up"/> keys can be used to navigate through and select the options.
            For this derived class, this does not work well, since the commands that are associated
            with the options in the dropdown are not properly executed. Therefore, using these
            keys to navigate through the dropdown does not give the desired result.
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Controls.ComboBox">ComboBox Class</seealso>
            <seealso cref="T:System.Windows.Input.ICommandSource">ICommandSource Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitButton">SplitButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitButtonItem">SplitButtonItem Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitButtonMenuItem">SplitButtonItem Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitRadioButton">SplitRadioButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitToggleButton">SplitToggleButton Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.DropDownDelay">
            <summary>
            The delay (in milliseconds) with which the drop down will open.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.actionElement">
            <summary>
            The action element corresponding to the "PART_ActionElement" template part.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.dropDownButton">
            <summary>
            The drop down button corresponding to the "PART_DropDownButton" template part.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.timer">
            <summary>
            The timer that is used to implement a delay when opening the drop down.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.#ctor">
            <summary>
            Initializes a new <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonBase"/> instance.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.ClickEvent">
            <summary>
            Routed event for the <see cref="E:Philips.Platform.Presentation.Controls.SplitButtonBase.Click"/> event.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.CommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.Command"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.CommandParameterProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.CommandParameter"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.CommandTargetProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.CommandTarget"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContentProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContent"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContentTemplateProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContentTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContentTemplateSelectorProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContentTemplateSelector"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContentStringFormatProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContentStringFormat"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.PopupPlacementProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.PopupPlacement"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.WrapWidthProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.WrapWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.IsWrappableProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.IsWrappable"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.IsDropDownButtonCheckedProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.IsDropDownButtonChecked"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.ShowToolTipForItemsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.ShowToolTipForItems"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.ActionElementWidthProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.ActionElementWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.DropDownButtonWidthProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.WrapWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonBase.UseSplitButtonWidthForDropDownProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.UseSplitButtonWidthForDropDown"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
            <remarks>
            This method subscribes to mouse events on the action element and sets up a
            binding between the content of the action element and the content of the selected
            item.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>
            This method returns a new <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonItem"/> instance, which is
            the element type that is hosted by any class that derives from <b>SplitButtonBase</b>.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            <see langword="true"/>, if the specified item is a <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonItem"/> or
            a <see cref="T:System.Windows.Controls.Separator"/>; <see langword="false"/>, otherwise. The <c>Separator</c>
            is included to avoid that it will get wrapped inside a <c>SplitButtonItem</c> by the
            <see cref="M:Philips.Platform.Presentation.Controls.SplitButtonBase.GetContainerForItemOverride"/> method.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.OnActionPreviewMouseLeftButtonDown(System.Windows.UIElement)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown"/> event on the
            action element.
            </summary>
            <remarks>
            This virtual method opens the drop down with a certain delay. If the drop down was
            already open, it closes the drop down.
            </remarks>
            <param name="element">The action element.</param>
            <returns>Whether the event should be handled.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.OnActionPreviewMouseLeftButtonUp(System.Windows.UIElement)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"/> event on the action element.
            </summary>
            <remarks>
            This virtual method stops the internal timer that is used to open the popup with a
            delay. It prevents the drop down from opening when the action element was pressed for
            only a short duration.
            </remarks>
            <param name="element">The action element.</param>
            <returns>Whether the event should be handled.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.OnClick">
            <summary>
            Called when the action element is clicked.
            </summary>
            <remarks>
            This method will raise the <see cref="E:Philips.Platform.Presentation.Controls.SplitButtonBase.Click"/> event and execute the default
            <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.Command"/> of the split button. It does the same for the selected
            item container if the following holds:
            <list type="bullet">
              <item>The split button is not in static mode</item>
              <item>
                The selected item is its own item container, i.e. is a
                <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonItem"/>.
              </item>
            </list>
            If the split button is data bound, then this last condition will not hold. In this
            case, the selected item may not have an associated item container; this is the case
            when the popup didn't open yet. Therefore, if the split button is data bound, the user
            should use the default <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.Command"/>. By default, the
            <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.CommandParameter"/> is bound to the selected item. With this parameter,
            the user can easily execute the associated command in the execute handler.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.OnItemClick(Philips.Platform.Presentation.Controls.SplitButtonItem)">
            <summary>
            Called when an item is clicked.
            </summary>
            <param name="item">The split button item that was clicked.</param>
            <remarks>
            When an item is clicked, the split button should also raise its
            <see cref="E:Philips.Platform.Presentation.Controls.SplitButtonBase.Click"/> event and execute its
            <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.Command"/>, even if it is in static mode. This should
            occur, after the click event and command of the item are processed.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.OnDropDownButtonChecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Controls.Primitives.ToggleButton.Checked"/> event associated with the
            toggle button corresponding to the "PART_DropDownButton" template part.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.OnDropDownButtonUnchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Controls.Primitives.ToggleButton.Unchecked"/> event associated with the
            toggle button corresponding to the "PART_DropDownButton" template part.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.OnItemClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the <see cref="E:Philips.Platform.Presentation.Controls.SplitButtonItem.Click"/> event.
            </summary>
            <remarks>
            When an item is clicked, the split button should also raise its
            <see cref="E:Philips.Platform.Presentation.Controls.SplitButtonBase.Click"/> event and execute its
            <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.Command"/>, if it is not in static mode. However, this
            should only occur when the item click was initiated by the user, not by code.
            Otherwise, a infinite loop would be created.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.OnActionPreviewMouseLeftButtonDownCore(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"/> event on the action element.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.OnActionPreviewMouseLeftButtonUpCore(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"/> event on the action element.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.OnStaticContentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles a change in the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContent"/> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.OnStaticContentTemplateChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles a change in the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContentTemplate"/> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.OnStaticContentTemplateSelectorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles a change in the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContentTemplateSelector"/> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.OnStaticContentStringFormatChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles a change in the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContentStringFormat"/> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.SetBindingForContentRelatedProperties">
            <summary>
            Sets the binding for the content related properties of the split button's
            action element.
            </summary>
            <remarks>
            The content of the split button's action element is either determined by the selected
            split button item, or it is defined statically. In the former case, the four content
            related properties of the action element must be bound to their counterparts from
            the (selected) split button item. In the latter case, however, these same four
            properties must be bound to their static content counterparts, which are four
            properties of this class: <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContent"/>, <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContentTemplate"/>,
            <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContentTemplateSelector"/>, and <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContentStringFormat"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.SetBindingForContent(System.String)">
            <summary>
            Sets the binding for the content of the split button's action element.
            </summary>
            <param name="path">The path to the binding source.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.SetBindingForContentTemplate(System.String)">
            <summary>
            Sets the binding for the content template of the split button's action element.
            </summary>
            <param name="path">The path to the binding source.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.SetBindingForContentTemplateSelector(System.String)">
            <summary>
            Sets the binding for the content template selector of the split button's action element.
            </summary>
            <param name="path">The path to the binding source.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.SetBindingForContentStringFormat(System.String)">
            <summary>
            Sets the binding for the content string format of the split button's action element.
            </summary>
            <param name="path">The path to the binding source.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.UpdateSynchronizationBetweenSelectedItemAndActionElement">
            <summary>
            Updates the synchronization between properties of the selected item container and
            the action element.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.InitializeSynchronizationOfIsEnabledOfActionElement">
            <summary>
            Initializes the synchronization between the IsEnabled property of the selected item
            container and the IsEnabled property of the action element.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.SubscribeToIsEnabledOfContainer(System.Windows.DependencyPropertyChangedEventHandler,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Subscribes to and un-subscribes from <see cref="E:System.Windows.UIElement.IsEnabledChanged"/> events
            of the item containers.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.UpdateIsActionEnabled">
            <summary>
            Updates whether the action element is enabled or not.
            </summary>
            <remarks>
            If the selected item container is disabled, the action element should also be disabled.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.UpdateIsActionEnabled(Philips.Platform.Presentation.Controls.SplitButtonItem)">
            <summary>
            Updates whether the action element is enabled or not.
            </summary>
            <remarks>
            If the given item is an item container that is disabled, the action element should
            also be disabled, but only when the split button doesn't have static content.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.GetContainerFromItem(System.Object)">
            <summary>
            Gets the <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonItem"/> that hosts the given item.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.OnCommandChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the default <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.Command"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> on which the command is changed.
            </param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.HookUpCommand(System.Windows.Input.ICommand,System.Windows.Input.ICommand)">
            <summary>
            Hooks up a new default <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.Command"/>.
            </summary>
            <param name="oldCommand">The old command, which will be removed.</param>
            <param name="newCommand">The new command, which will be added.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.RemoveCommand(System.Windows.Input.ICommand)">
            <summary>
            Removes an old default <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.Command"/>.
            </summary>
            <param name="oldCommand">
            The old default command.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.AddCommand(System.Windows.Input.ICommand)">
            <summary>
            Adds a new default <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.Command"/>.
            </summary>
            <param name="newCommand">The new default command.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.OnCanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when changes occur that affect whether or not the default <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.Command"/>
            should execute.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
            <remarks>
            This method updates the <see cref="P:System.Windows.UIElement.IsEnabled"/> property of the action element
            only if the split button has static content. If not, this property will be
            synchronized with the <see cref="P:System.Windows.UIElement.IsEnabled"/> property of the selected
            item.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.CanExecuteCommand">
            <summary>
            Calls the <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> method of the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.Command"/>
            or the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.CommandParameter"/>.
            </summary>
            <remarks>
            When the items in the splitbutton are commands the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.Command"/> property
            doesn't have to be set. In that case the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.CommandParameter"/>
            actually provides the command implementation.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonBase.ExecuteCommand">
            <summary>
            Calls the <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> method of the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.Command"/>
            or the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.CommandParameter"/>.
            </summary>
            <remarks>
            When the items in the splitbutton are commands the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.Command"/> property
            doesn't have to be set. In that case the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.CommandParameter"/>
            actually provides either the command implementation or the Command as a property.
            </remarks>
        </member>
        <member name="E:Philips.Platform.Presentation.Controls.SplitButtonBase.Click">
            <summary>
            Raised when the item is clicked.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.Command">
            <summary>
            Gets or sets the command that is executed when the action element is clicked.
            </summary>
            <remarks>
            This command will also be executed when an item in the drop down was clicked, even
            when the selected item was clicked for the second time.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.CommandParameter">
            <summary>
            Gets or sets the command parameter for the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.Command"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.CommandTarget">
            <summary>
            Gets or sets the command target for the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.Command"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContent">
            <summary>
            Gets or sets the static content of the split button. Selecting an item from the
            drop down will not change this static content.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContentTemplate">
            <summary>
            Gets or sets the template for the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContent"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContentTemplateSelector">
            <summary>
            Gets or sets the template selector for the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContent"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContentStringFormat">
            <summary>
            Gets or sets the string format for the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.StaticContent"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.PopupPlacement">
            <summary>
            Gets or sets the placement mode of the popup that hosts the split button items.
            </summary>
            <remarks>
            The default value of this property is <see cref="F:System.Windows.Controls.Primitives.PlacementMode.Bottom"/>, meaning
            that by default the popup that hosts the split button items will be placed at the
            bottom of the split button. If you want to place the popup at the top of the split
            button, set this property to <see cref="F:System.Windows.Controls.Primitives.PlacementMode.Top"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.WrapWidth">
            <summary>
            Gets or sets the maximum width of the drop down.
            </summary>
            <remarks>
            <para>
            By setting this property on a split button, the items inside the drop down will
            wrap to the next row if they don't fit anymore. The name is in line with the
            <see cref="P:System.Windows.Controls.Primitives.ToolBarOverflowPanel.WrapWidth"/> property.
            </para>
            <para>
            The default for this property is <see cref="F:System.Double.NaN"/>.
            </para>
            </remarks>
            <seealso cref="P:System.Windows.Controls.ComboBox.MaxDropDownHeight"/>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.IsWrappable">
            <summary>
            Gets or sets whether the drop down menu should be wrappable.
            </summary>
            <remarks>
            <para>
            By setting this property on a split button, the items inside the drop down will
            be wrapped according to the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.WrapWidth"/>.
            </para>
            <para>
            The default for this property is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.IsDropDownButtonChecked">
            <summary>
            Gets whether the toggle button associated with the "PART_DropDownButton" template part
            is checked.
            </summary>
            <remarks>
            <para>
            This property is introduced to manage dependencies between the various constituent
            elements of the split button. For example, the "PART_ActionElement" template part
            might want to update its visualization based on whether the "PART_DropDownButton"
            template part is checked or not.
            </para>
            <para>
            This property only has a public getter. The setter is protected because we do not
            want this property to be set from the outside.
            </para>
            <para>
            The default value of this property is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.ShowToolTipForItems">
            <summary>
            Gets or sets whether a <see cref="T:System.Windows.Controls.ToolTip"/> is shown for each individual item of the
            split button.
            </summary>
            <remarks>
            <para>
            It is possible to let each individual split button item display a <see cref="T:System.Windows.Controls.ToolTip"/>.
            However, sometimes this is not useful, for example of the tooltip is the same as the
            text that is already displayed in the item, or does not add any useful information.
            In such a case, it should be possible to disable the display of the tooltips at the
            level of the split button itself, i.e., not at the level of the individual items.
            This property is intended to be used for exactly that purpose.
            </para>
            <para>
            The default value of this property is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.ActionElementWidth">
            <summary>
            Gets or sets the width of the action element (PART_ActionElement) of the split button.
            </summary>
            <remarks>
            The default for this property is <see cref="F:System.Double.NaN"/>. It is the responsibility
            of the style to give a sensible value to this property.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.DropDownButtonWidth">
            <summary>
            Gets or sets the width of the drop down button (PART_DropDownButton) of
            the split button.
            </summary>
            <remarks>
            The default for this property is <see cref="F:System.Double.NaN"/>. It is the responsibility
            of the style to give a sensible value to this property.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.UseSplitButtonWidthForDropDown">
            <summary>
            Gets or sets whether the width of the split button should be used to determine the
            width of the drop down.
            </summary>
            <remarks>
            <para>
            The split button presents its items in a drop down. This drop down determines its width
            autonomously, based on the width of the largest item, and the value of the
            <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonBase.WrapWidth"/> dependency property. However, in some cases, we want the width
            of the drop down to be the same as the width of the split button itself, so that the
            drop down aligns neatly with the split button itself. To achieve this, this property can
            be set to <see langword="true"/>.
            </para>
            <para>
            The default for this property is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.IsInStaticMode">
            <summary>
            Gets whether the split button is in static mode, i.e. if any of the static content
            properties is set.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.IsStaticContentSet">
            <summary>
            Gets if the static content is set or data bound.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.IsStaticContentTemplateSet">
            <summary>
            Gets if the static content template is set or data bound.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.IsStaticContentTemplateSelectorSet">
            <summary>
            Gets if the static content template selector is set or data bound.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonBase.IsStaticContentStringFormatSet">
            <summary>
            Gets if the static content string format is set or data bound.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButton.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.SplitButtonItem">
            <summary>
            Custom <see cref="T:System.Windows.Controls.ComboBoxItem"/> that serves as an item container for a split button.
            </summary>
            <remarks>
            <para>
            The <c>SplitButtonItem</c> is a control that can be hosted by any control that derives
            from <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonBase"/>. Just like with a regular <see cref="T:System.Windows.Controls.MenuItem"/>, it
            is possible to attach a command to a <c>SplitButtonItem</c>. To support this, the 
            <c>SplitButtonItem</c> class implements the <see cref="T:System.Windows.Input.ICommandSource"/> interface.
            </para>
            <para>
            Due to an issue in the <see cref="T:System.Windows.Media.VisualBrush"/> class, the enabled state of the content has
            to be set to <see langword="false"/> whenever the enabled state of the <c>SplitButtonItem</c>
            is set to <see langword="false"/>. The same issue can be reproduced with a regular 
            <see cref="T:System.Windows.Controls.ComboBox"/>. The issue is the following:
            </para>
            <para>
            When the split button shows the selected item in its action element, it needs to use a 
            <see cref="T:System.Windows.Media.VisualBrush"/> to visually duplicate the selected item when that selected item
            is a <see cref="T:System.Windows.UIElement"/>. This is necessary because <c>UIElement</c>'s can only 
            have one visual parent. This visual brush is used to paint a <see cref="T:System.Windows.Shapes.Rectangle"/>. 
            The content of the action element binds with the <see cref="P:System.Windows.Controls.ComboBox.SelectionBoxItem"/> 
            and this element contains the rectangle.
            </para>
            <para>
            The <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonBase"/> already makes sure that the action element is disabled
            when initially, a disabled item (container) is selected. Due to this disabling, the
            internal rectangle which uses the visual brush is also disabled. 
            </para>
            <para>
            However, whenever items are created by creating <c>SplitButtonItem</c>'s explicitly, and 
            the selected <c>SplitButtonItem</c> is disabled, then the visual brush does not respect 
            this initial disabled state and paints the content of the action element like it is 
            enabled. This is probably because the enabled state of the content of the selected 
            <c>SplitButtonItem</c> is not set to <see langword="false"/> explicitly; it is set on the 
            <c>SplitButtonItem</c>. Only when the drop down is opened, the enabled state of the 
            content will be updated, and the content of the action element will look disabled.
            </para>
            <para>
            One solution to this issue is to set the enabled state of the content of the 
            <c>SplitButtonItem</c> explicitly, whenever the enabled state of the SplitButtonItem is 
            set to <see langword="false"/>. This way, the visual brush will eventually duplicate 
            content that already looks disabled. 
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Controls.ComboBoxItem">ComboBoxItem Class</seealso>
            <seealso cref="T:System.Windows.Input.ICommandSource">ICommandSource Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitButtonBase">SplitButtonBase Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitButton">SplitButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitRadioButton">SplitRadioButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitToggleButton">SplitToggleButton Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonItem.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonItem.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonItem.ClickEvent">
            <summary>
            Routed event for the <see cref="E:Philips.Platform.Presentation.Controls.SplitButtonItem.Click"/> event.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonItem.CommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonItem.Command"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonItem.CommandParameterProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonItem.CommandParameter"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonItem.CommandTargetProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonItem.CommandTarget"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonItem.OnClick">
            <summary>
            Handles a click on this item.
            </summary>
            <remarks>
            This method is called by the <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonBase">split button</see> when a
            click on the action element should trigger a click on the selected item as well.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"/> on this item.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonItem.OnContentChanged(System.Object,System.Object)">
            <summary>
            Handles changes in the <see cref="P:System.Windows.Controls.ContentControl.Content"/> property.
            </summary>
            <remarks>
            The split button item's content has changed, which means that the enabled
            state of the new content must be (re)synchronized with the enabled state of
            the split button item.
            </remarks>
            <param name="oldContent">The old content.</param>
            <param name="newContent">The new content.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonItem.SynchronizeContentIsEnabled">
            <summary>
            Synchronizes the enabled state of the content with the enabled state of
            the split button item.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonItem.OnCommandChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the default <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonItem.Command"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> on which the command is changed.
            </param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonItem.HookUpCommand(System.Windows.Input.ICommand,System.Windows.Input.ICommand)">
            <summary>
            Hooks up a new default <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonItem.Command"/>.
            </summary>
            <param name="oldCommand">The old command, which will be removed.</param>
            <param name="newCommand">The new command, which will be added.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonItem.RemoveCommand(System.Windows.Input.ICommand)">
            <summary>
            Removes an old default <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonItem.Command"/>.
            </summary>
            <param name="oldCommand">The old default command.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonItem.AddCommand(System.Windows.Input.ICommand)">
            <summary>
            Adds a new default <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonItem.Command"/>.
            </summary>
            <param name="newCommand">The new default command.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonItem.CanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when changes occur that affect whether or not the default <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonItem.Command"/> 
            should execute.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonItem.CanExecuteCommand">
            <summary>
            Calls the <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> method of the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonItem.Command"/>.
            </summary>
            <remarks>
            Will call the <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> method on the command parameter when 
            this is a command.
            </remarks>
        </member>
        <member name="E:Philips.Platform.Presentation.Controls.SplitButtonItem.Click">
            <summary>
            Raised when the item is clicked.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonItem.Command">
            <summary>
            Gets or sets the command that will be executed when the split button item is clicked.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonItem.CommandParameter">
            <summary>
            Gets or sets the user defined data value that can be passed to the
            <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonItem.Command"/> when it is executed.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonItem.CommandTarget">
            <summary>
            Gets or sets the command target that the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonItem.Command"/> is being executed on.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.SplitButtonMenuItem">
            <summary>
            Custom <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonItem"/> that mimics the behavior and the visual style of
            a regular <see cref="T:System.Windows.Controls.MenuItem"/> to some extent.
            </summary>
            <remarks>
            <para>
            This class makes it easier for application builders to define split button items that
            behave and look like regular menu items. For this, some of the more commonly used
            properties of the regular <see cref="T:System.Windows.Controls.MenuItem"/> are mimicked. For example, it is easy
            to define a split button item using its <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonMenuItem.Header"/> and <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonMenuItem.Icon"/>
            properties.
            </para>
            <para>
            This class is derived from <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonItem"/>, and as such it supports commands
            through its implementation of the <see cref="T:System.Windows.Input.ICommandSource"/> interface.
            </para>
            </remarks>
            <example>
            <para>
            The following example shows how to instantiate a <see cref="T:Philips.Platform.Presentation.Controls.SplitToggleButton"/> that has
            four <c>SplitButtonMenuItem</c> elements, and one <see cref="T:System.Windows.Controls.Separator"/>.
            <code lang="xaml">
            <![CDATA[
            <pt:SplitToggleButton x:Name="splitToggleButton"
                StaticContent="{StaticResource ToolIcon}">
                <pt:SplitButtonMenuItem
                    Header="Undo"
                    Icon="{StaticResource GeneralUndoIcon"/>
                <Separator Style="{DynamicResource SeparatorSplitButtonStyle}"/>
                <pt:SplitButtonMenuItem
                    Header="Cut"
                    Icon="{StaticResource GeneralCutIcon"/>
                <pt:SplitButtonMenuItem
                    Header="Copy"
                    Icon="{StaticResource GeneralCopyIcon"/>
                <pt:SplitButtonMenuItem
                    Header="Paste"
                    Icon="{StaticResource GeneralPasteIcon"/>
            </pt:SplitToggleButton>
            ]]>
            </code>
            </para>
            </example>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitButtonItem">SplitButtonItem Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitButtonBase">SplitButtonBase Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitButton">SplitButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitRadioButton">SplitRadioButton Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitToggleButton">SplitToggleButton Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitButtonMenuItem.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonMenuItem.HeaderProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonMenuItem.Header"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonMenuItem.IconProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonMenuItem.Icon"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonMenuItem.IsCheckableProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonMenuItem.IsCheckable"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitButtonMenuItem.IsCheckedProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitButtonMenuItem.IsChecked"/> dependency property.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonMenuItem.Header">
            <summary>
            Gets or sets the header of the <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonMenuItem"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonMenuItem.Icon">
            <summary>
            Gets or sets the icon that appears in a <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonMenuItem"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonMenuItem.IsCheckable">
            <summary>
            Gets or sets a value that indicates whether a <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonMenuItem"/>
            can be checked.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitButtonMenuItem.IsChecked">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonMenuItem"/>
            is checked.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.SplitRadioButton">
            <summary>
            Custom <see cref="T:Philips.Platform.Presentation.Controls.SplitToggleButton"/> that implements the combination of a 
            <see cref="T:System.Windows.Controls.RadioButton"/> with a drop down.
            </summary>
            <remarks>
            <para>
            This class doesn't mimic a <see cref="T:System.Windows.Controls.RadioButton"/> yet in the sense that it doesn't
            uncheck other <see cref="T:System.Windows.Controls.RadioButton"/>'s or <see cref="T:Philips.Platform.Presentation.Controls.SplitRadioButton"/>'s that have 
            the same parent or group name. This functionality will be added later. Until that time,
            the application should do this unchecking.
            </para>
            </remarks>
            <example>
            <para>
            The following example shows how to instantiate a <c>SplitRadioButton</c> using static 
            content and hard-coded items. The necessary data template is omitted in this example.
            <code lang="xaml">
            <![CDATA[
            <ptc:SplitRadioButton StaticContent="{StaticResource ToolIcon}">
                <ptc:SplitButtonItem Content="{StaticResource ZoomIcon}"/>
                <ptc:SplitButtonItem Content="{StaticResource InteractorIcon}"/>
                <ptc:SplitButtonItem Content="{StaticResource ViewIcon}"/>
            </ptc:SplitRadioButton>
            ]]>
            </code>
            </para>
            <para>
            Using data binding is also possible by using the ItemsSource. It is not necessary to set
            the selected index to 0, this is done by default.
            <code lang="xaml">
            <![CDATA[
            <ptc:SplitRadioButton ItemsSource="{Binding ToolModels}" IsChecked="True">
                <ptc:SplitRadioButton.ItemTemplate>
                    <DataTemplate>
                        <Image Source="{Binding IconSource}"
                           Width="24" Height="24"
                           RenderOptions.BitmapScalingMode="HighQuality"/>
                    </DataTemplate>
                </ptc:SplitRadioButton.ItemTemplate>
            </ptc:SplitRadioButton>
            ]]>
            </code>
            </para>
            </example>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitToggleButton">SplitToggleButton Class</seealso>
            <seealso cref="T:System.Windows.Controls.RadioButton">RadioButton Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.SplitToggleButton">
            <summary>
            Custom <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonBase"/> that implements the combination of a 
            <seealso cref="T:System.Windows.Controls.Primitives.ToggleButton"/> with a drop down. 
            </summary>
            <remarks>
            Like a regular <see cref="T:System.Windows.Controls.Primitives.ToggleButton"/>, the SplitToggleButton extends the 
            <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonBase"/> by adding functionality to check or uncheck the action 
            element. This control is commonly found in tool bars in which a tool can be selected from
            a list. The checked state of the split button then indicates whether the tool is active
            at that moment or not.
            </remarks>
            <example>
            <para>
            The following example shows how to instantiate a <c>SplitToggleButton</c> using static 
            content and hard-coded items. The necessary data template is omitted in this example.
            <code lang="xaml">
            <![CDATA[
            <ptc:SplitToggleButton StaticContent="{StaticResource ToolIcon}">
                <ptc:SplitButtonItem Content="{StaticResource ZoomIcon}"/>
                <ptc:SplitButtonItem Content="{StaticResource InteractorIcon}"/>
                <ptc:SplitButtonItem Content="{StaticResource ViewIcon}"/>
            </ptc:SplitToggleButton>
            ]]>
            </code>
            </para>
            <para>
            Using data binding is also possible by using the ItemsSource. It is not necessary to set
            the selected index to 0, this is done by default.
            <code lang="xaml">
            <![CDATA[
            <ptc:SplitToggleButton ItemsSource="{Binding ToolModels}" IsChecked="True">
                <ptc:SplitToggleButton.ItemTemplate>
                    <DataTemplate>
                        <Image Source="{Binding IconSource}"
                           Width="24" Height="24"
                           RenderOptions.BitmapScalingMode="HighQuality"/>
                    </DataTemplate>
                </ptc:SplitToggleButton.ItemTemplate>
            </ptc:SplitToggleButton>
            ]]>
            </code>
            </para>
            </example>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SplitButtonBase">SplitButtonBase Class</seealso>
            <seealso cref="T:System.Windows.Controls.Primitives.ToggleButton">ToggleButton Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitToggleButton.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitToggleButton.CheckedEvent">
            <summary>
            Routed event for the <see cref="E:Philips.Platform.Presentation.Controls.SplitToggleButton.Checked"/> event.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitToggleButton.UncheckedEvent">
            <summary>
            Routed event for the <see cref="E:Philips.Platform.Presentation.Controls.SplitToggleButton.Unchecked"/> event.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.SplitToggleButton.IsCheckedProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.SplitToggleButton.IsChecked"/> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
            <seealso cref="F:System.Windows.Controls.Primitives.ToggleButton.IsCheckedProperty"/>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitToggleButton.OnClick">
            <summary>
            Called when the action element is clicked.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitToggleButton.OnToggle">
            <summary>
            Called when the button is clicked.
            </summary>
            <remarks>
            This method toggles the <see cref="P:Philips.Platform.Presentation.Controls.SplitToggleButton.IsChecked"/> state of the button.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitToggleButton.OnItemClick(Philips.Platform.Presentation.Controls.SplitButtonItem)">
            <summary>
            Called when an item is clicked.
            </summary>
            <param name="item">The underlying split button item that was clicked.</param>
            <remarks>
            When an item is clicked, the split button should be checked, even if it is in static
            mode. This is also done for the U(nderlined) button in Word, it also contains static 
            content but is checked any time an item in the drop down is clicked. Checking the 
            split button should occur, after the click event and command of the item are processed.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitToggleButton.OnIsCheckedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="P:Philips.Platform.Presentation.Controls.SplitToggleButton.IsChecked"/> property.
            </summary>
            <remarks>
            This method raises either the <see cref="E:Philips.Platform.Presentation.Controls.SplitToggleButton.Checked"/> event or the <see cref="E:Philips.Platform.Presentation.Controls.SplitToggleButton.Unchecked"/>
            event, depending on the new value of the <see cref="P:Philips.Platform.Presentation.Controls.SplitToggleButton.IsChecked"/> property.
            </remarks>
            <param name="dependencyObject">
            The dependency object on which the property was set.
            </param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitToggleButton.RaiseCheckedEvent">
            <summary>
            Raises the <see cref="E:Philips.Platform.Presentation.Controls.SplitToggleButton.Checked"/> event.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitToggleButton.RaiseUncheckedEvent">
            <summary>
            Raises the <see cref="E:Philips.Platform.Presentation.Controls.SplitToggleButton.Unchecked"/> event.
            </summary>
        </member>
        <member name="E:Philips.Platform.Presentation.Controls.SplitToggleButton.Checked">
            <summary>
            Raised when the toggle button is checked.
            </summary>
        </member>
        <member name="E:Philips.Platform.Presentation.Controls.SplitToggleButton.Unchecked">
            <summary>
            Raised when the toggle button is unchecked.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.SplitToggleButton.IsChecked">
            <summary>
            Gets or sets whether the action element is checked.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitRadioButton.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SplitRadioButton.OnToggle">
            <summary>
            Called by the <see cref="M:System.Windows.Controls.Primitives.ToggleButton.OnClick"/> method to implement toggle behavior.
            </summary>
            <remarks>
            This method sets the <see cref="P:Philips.Platform.Presentation.Controls.SplitToggleButton.IsChecked"/> state of the 
            button to <see langword="true"/>.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.StaggeredContentControl">
            <summary>
            Custom control which displays its content in a staggered way, like a deck of cards.
            </summary>
            <remarks>
            <para>
            A <c>StaggeredContentControl</c> visualizes its content in a staggered way. This can be
            thought of as a deck of cards, where only the top card is entirely visible, and the
            underlying cards are only partly visible. A staggered content control can, for example,
            be used to visualize a pictorial that represents a data set with multiple images or
            frames. Visualizing such a pictorial as a staggered content control conveys the impression
            that the pictorial represents a collection of images or frames rather than just one
            image or frame.
            </para>
            <para>
            A <c>StaggeredContentControl</c> has one additional properties which can be used to 
            provide and visualize information on the data represented by the control. This property is 
            the <see cref="P:Philips.Platform.Presentation.Controls.StaggeredContentControl.Count"/> property, which can be used to indicate the number of items 
            represented by the draggable container content control. Typically, for a dragged pictorial, 
            this property indicates the number of pictorials.
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Controls.ContentControl">ContentControl Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.Pictorial">Pictorial Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialIndex">PictorialIndex Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.StaggeredContentControl.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.StaggeredContentControl.CountProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.StaggeredContentControl.Count"/> dependency property.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.StaggeredContentControl.Count">
            <summary>
            Gets or sets the number of items represented by the staggered content control.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.StartupScreen">
            <summary>
            Custom <see cref="T:System.Windows.Window"/> that serves as the startup screen for an application.
            </summary>
            <example>
            The following example shows how to initialize and show a <c>StartupScreen</c>. Most of
            the content of the <c>StartupScreen</c> is defined in text resources that are part of the
            Presentation Toolkit. You can also define your own text resources, but please be aware
            that the text resources that come with the Presentation Toolkit conform to the legal
            requirements for how Philips Healthcare products should be labeled.
            <code lang="csharp">
            <![CDATA[
            var StartupScreen =
                new StartupScreen {
                    //
                    // Set the StartupScreen properties. These define the legal content that is
                    // shown in the StartupScreen.
                    //
                    ProductRange = "IPF",
                    ProductName = "Presentation Toolkit",
                    ProductRelease = "MM.mm",
                    ProductReleaseDate = DateTime.Now,
                    MedicalDeviceClassification = MedicalDeviceClassification.ClassOne,
                    Manufacturer = LegalTextResources.Manufacturer,
                    ManufacturingAddress = LegalTextResources.ManufacturingAddress,
                    Copyright = String.Format(TextResources.Copyright, 2016),
                    CopyrightClause = LegalTextResources.CopyrightClause,
                    SoftwareLicensingStatement = LegalTextResources.SoftwareLicensingStatement,
                    ReengineeringStatement = LegalTextResources.ReengineeringStatement,
                    EndUserLicenseAgreementLink = LegalTextResources.EndUserLicenseAgreementLink,
                    WarrantyDisclaimer =
                        String.Format(
                            LegalTextResources.WarrantyDisclaimer,
                           "WPF Presentation Toolkit MM.mm"
                        ),
               };
               //
               // Set the font size of the startup screen to match the font size of the owner, i.e.,
               // the main window. Note that the startup screen uses different (both larger and smaller)
               // font sizes for some of its content. This is currently taken care of in the
               // StartupScreen control.
               //
               StartupScreen.Owner = GetWindow(this);
               StartupScreen.Show();
               // Do some work.
               StartupScreen.Close();
            ]]>
            </code>
            </example>
            <seealso cref="T:Philips.Platform.Presentation.Controls.BrandingScreenBase">BrandingScreenBase Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.AboutBox">AboutBox Class</seealso>
            <seealso cref="T:System.Windows.Window">Window Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.StartupScreen.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.StartupScreen.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.StartupScreen.ShowsProgressProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.StartupScreen.ShowsProgress"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.StartupScreen.ShowsProgress">
            <summary>
            Enables or disables showing Progress.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.StartupScreen.ShowsProgressProperty">Dependency property associated with this property.</seealso>
            <remarks>
            By default, the value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.SystemStatusTray">
            <summary>
            Represents a system status tray, which is hosted in the <see cref="T:Philips.Platform.Presentation.Controls.ExtendedStatusBar"/>.
            The system status tray itself hosts a <see cref="T:Philips.Platform.Presentation.Controls.SystemStatusToolBar"/>.
            </summary>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SingleChildToolBarTray">SingleChildToolBarTray Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SystemStatusToolBar">SystemStatusToolBar Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SystemStatusToolBarItem">SystemStatusToolBarItem Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ExtendedStatusBar">ExtendedStatusBar Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SystemStatusTray.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.SystemStatusToolBar">
            <summary>
            Represents a system status toolbar, which is hosted in the <see cref="T:Philips.Platform.Presentation.Controls.SystemStatusTray"/>.
            </summary>
            <seealso cref="T:System.Windows.Controls.ToolBar">ToolBar Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SystemStatusToolBarItem">SystemStatusToolBarItem Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SystemStatusTray">SystemStatusTray Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ExtendedStatusBar">ExtendedStatusBar Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SystemStatusToolBar.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SystemStatusToolBar.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>
            This method returns a new <see cref="T:Philips.Platform.Presentation.Controls.SystemStatusToolBarItem"/> instance, which is
            the element type that is hosted by a <b>SystemStatusToolBar</b>.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SystemStatusToolBar.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            <see langword="true"/>, if the specified item is a <see cref="T:Philips.Platform.Presentation.Controls.SystemStatusToolBarItem"/>;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.SystemStatusToolBarItem">
            <summary>
            Represents a toolbar item that is hosted in the system status tray.
            </summary>
            <seealso cref="T:System.Windows.Controls.Button">Button Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SystemStatusToolBar">SystemStatusToolBar Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.SystemStatusTray">SystemStatusTray Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ExtendedStatusBar">ExtendedStatusBar Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.SystemStatusToolBarItem.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.TabContainer">
            <summary>
            Custom control which represents a tab container. This control is responsible for showing
            tab container items. 
            </summary>
            <remarks>
            This custom TabControl extends the standard TabControl with optional 
            <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.IsMaximizable"/>, <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.IsMaximized"/> and  <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.HasHeader"/>
            properties. Typically, a <b>TabContainer</b> hosts one or more
            <see cref="T:Philips.Platform.Presentation.Controls.TabContainerItem"/> instances.
            </remarks>
            <seealso cref="T:System.Windows.Controls.TabControl">TabControl Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.TabContainerItem">TabContainerItem Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TabContainer.InternalMaximizeCommand">
            <summary>
            Internal command for maximizing a TabContainer (e.g. for connecting to the 
            Maximize/restore button in the template).
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TabContainer.IsMaximizableProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.IsMaximizable"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TabContainer.IsMaximizedProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.IsMaximized"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TabContainer.HasBorderProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.HasBorder"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="true"/>.
            Typically, a tab container should always have a border. The exception to this rule is
            a tab container that hosts only one tab, and (possibly) does not have a header. In
            that case, the border serves no real purpose, and this property can be used to remove
            it from the tab container visualization.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TabContainer.HasHeaderProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.HasHeader"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TabContainer.IsMouseOverSelectedContentPropertyKey">
            <summary>
            Dependency property key for the <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.IsMouseOverSelectedContent"/> property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TabContainer.IsMouseOverSelectedContentProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.IsMouseOverSelectedContent"/> read only dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TabContainer.MaximizeCommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.MaximizeCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TabContainer.MaximizeCommandTargetProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.MaximizeCommandTarget"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TabContainer.MaximizeCommandParameterProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.MaximizeCommandParameter"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TabContainer.MaximizedChangedEvent">
            <summary>
            Custom routed event registration for the <see cref="E:Philips.Platform.Presentation.Controls.TabContainer.MaximizedChanged"/> event.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TabContainer.OnIsMaximizedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called by the PropertyChangedCallback of the <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.IsMaximized"/> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TabContainer.OnIsMaximizedChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when the <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.IsMaximized"/> property is changed.
            </summary>
            <param name="oldValue">The old value of <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.IsMaximized"/>.</param>
            <param name="newValue">The new value of <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.IsMaximized"/>.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TabContainer.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TabContainer.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TabContainer.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>
            This method returns a new <see cref="T:Philips.Platform.Presentation.Controls.TabContainerItem"/> instance, which is
            the element type that is hosted by a <b>TabContainer</b>.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TabContainer.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            <see langword="true"/>, if the specified item is a <see cref="T:Philips.Platform.Presentation.Controls.TabContainerItem"/>;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TabContainer.OnExecuteInternalMaximizeCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            This is used by the execute of the <see cref="F:Philips.Platform.Presentation.Controls.TabContainer.InternalMaximizeCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TabContainer.OnCanExecuteInternalMaximizeCommand(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Handles the CanExecute of the <see cref="F:Philips.Platform.Presentation.Controls.TabContainer.InternalMaximizeCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TabContainer.ExecuteMaximizeCommand">
            <summary>
            Calls <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> of the <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.MaximizeCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TabContainer.CanExecuteMaximizeCommand">
            <summary>
            Calls <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> on the <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.MaximizeCommand"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.TabContainer.IsMaximizable">
            <summary>
            Gets or sets whether the TabContainer is maximizable.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.TabContainer.IsMaximized">
            <summary>
            Gets or sets whether the TabContainer is maximized.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.TabContainer.HasBorder">
            <summary>
            Gets or sets whether a tab container has a border.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="true"/>.
            Typically, a tab container should always have a border. The exception to this rule is
            a tab container that hosts only one tab, and (possibly) does not have a header. In
            that case, the border serves no real purpose, and this property can be used to remove
            it from the tab container visualization.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.TabContainer.HasHeader">
            <summary>
            Gets or sets whether the TabControlContainer has a Header.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.TabContainer.IsMouseOverSelectedContent">
            <summary>
            Gets or sets whether the mouse is over the selected content or not.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.TabContainer.MaximizeCommand">
            <summary>
            Gets or sets the command that is executed when the maximize button is clicked.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.TabContainer.MaximizeCommandTarget">
            <summary>
            Gets or sets the command target for the <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.MaximizeCommand"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.TabContainer.MaximizeCommandParameter">
            <summary>
            Gets or sets the command parameter for the <see cref="P:Philips.Platform.Presentation.Controls.TabContainer.MaximizeCommand"/>.
            </summary>
        </member>
        <member name="E:Philips.Platform.Presentation.Controls.TabContainer.MaximizedChanged">
            <summary>
            Raised when the maximized button is clicked.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.TabContainerItem">
            <summary>
            Custom control which represents a tab container item, i.e., a custom tab item in
            the custom <see cref="T:Philips.Platform.Presentation.Controls.TabContainer"/> control.
            </summary>
            <remarks>
            <para>
            This custom <see cref="T:System.Windows.Controls.TabItem"/> is meant to be used in close association with the custom
            <see cref="T:Philips.Platform.Presentation.Controls.TabContainer"/> control. The <b>TabContainer</b> is a dedicated
            <see cref="T:System.Windows.Controls.TabControl"/> for hosting tabs in the viewing area of a clinical application.
            The functionality and the visualization of a <b>TabContainer</b> differs from that of a
            regular <b>TabControl</b>.
            </para>
            <para>
            Tab container items, which host viewers or viewing arrangements, typically have a
            Maximize/Restore toggle button as well as a Close button. The Maximize/Restore toggle button
            can be used to maximize a viewer or a viewing arrangement within its viewing area, and to
            restore the viewing area to its original tabbed layout. The Close button, on the other hand,
            can be used to close an individual <b>TabContainerItem</b>. This is similar to the Close
            button found on the tabs in modern web browsers such as Microsoft Edge or Google Chrome.
            </para>
            <para>
            To support the feature that a <b>TabContainerItem</b> can be closed, this custom control
            exposes a <see cref="P:Philips.Platform.Presentation.Controls.TabContainerItem.IsClosable"/> dependency property, which can be used to determine
            whether the tab container item can be closed or not. If this property is set to
            <see langword="false"/>, the tab container item cannot be closed, and its Close button
            is not visible.
            </para>
            <para>
            In addition to the <b>IsClosable</b> property, the <b>TabContainerItem</b> also exposes
            three related properties <see cref="P:Philips.Platform.Presentation.Controls.TabContainerItem.CloseCommand"/>, <see cref="P:Philips.Platform.Presentation.Controls.TabContainerItem.CloseCommandTarget"/>,
            and <see cref="P:Philips.Platform.Presentation.Controls.TabContainerItem.CloseCommandParameter"/>, which together can be used to define the command
            that is executed when the Close button is clicked. These properties allow application
            builders to attach custom business logic to the handling of the Close button click events.
            </para>
            <para>
            The <c>TabContainerItem</c> expects various named template parts to be defined in its
            control template. These template parts are:
            <list type="bullet">
              <item>
                <term>PART_MaximizeRestoreButton</term>
                <description>The Maximize/Restore toggle button. Must be a <see cref="T:System.Windows.Controls.Primitives.ToggleButton"/>.</description>
              </item>
              <item>
                <term>PART_CloseButton</term>
                <description>The Close button. Must be a <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/>.</description>
              </item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Controls.TabItem">TabItem Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.TabContainer">TabContainer Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TabContainerItem.InternalCloseCommand">
            <summary>
            Internal command to close a TabContainerItem (e.g., for connecting to the close
            button in the template).
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TabContainerItem.IsClosableProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.TabContainerItem.IsClosable"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TabContainerItem.CloseCommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.TabContainerItem.CloseCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TabContainerItem.CloseCommandTargetProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.TabContainerItem.CloseCommandTarget"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TabContainerItem.CloseCommandParameterProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.TabContainerItem.CloseCommandParameter"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TabContainerItem.CloseEvent">
            <summary>
            Routed event for the <see cref="E:Philips.Platform.Presentation.Controls.TabContainerItem.Close"/> event.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TabContainerItem.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TabContainerItem.OnExecuteInternalCloseCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            This is called by the <see cref="F:Philips.Platform.Presentation.Controls.TabContainerItem.InternalCloseCommand"/>.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TabContainerItem.OnCanExecuteInternalCloseCommand(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Handles the CanExecute of the <see cref="F:Philips.Platform.Presentation.Controls.TabContainerItem.InternalCloseCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TabContainerItem.RaiseClosedEvent">
            <summary>
            This method is called by the <see cref="F:Philips.Platform.Presentation.Controls.TabContainerItem.InternalCloseCommand"/>.
            It raises the <see cref="E:Philips.Platform.Presentation.Controls.TabContainerItem.Close"/> event.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TabContainerItem.ExecuteCloseCommand">
            <summary>
            Calls <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> of the <see cref="P:Philips.Platform.Presentation.Controls.TabContainerItem.CloseCommand"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TabContainerItem.CanExecuteCloseCommand">
            <summary>
            Calls <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> on the <see cref="P:Philips.Platform.Presentation.Controls.TabContainerItem.CloseCommand"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.TabContainerItem.IsClosable">
            <summary>
            Gets or sets whether the tab container item is closable.
            </summary>
            <remarks>
            <para>
            The default value of this property is <see langword="false"/>.
            </para>
            <para>
            If this property is <see langword="false"/>, then the Close button, represented by the
            <b>PART_CloseButton</b> template part, is not visible. If, on the other hand, the value
            of this property is <see langword="true"/>, then the Close button is visible.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.TabContainerItem.CloseCommand">
            <summary>
            Gets or sets the command that is executed when the Close button, represented by the
            <b>PART_CloseButton</b> template part, is clicked.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.TabContainerItem.CloseCommandTarget">
            <summary>
            Gets or sets the command target for the <see cref="P:Philips.Platform.Presentation.Controls.TabContainerItem.CloseCommand"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.TabContainerItem.CloseCommandParameter">
            <summary>
            Gets or sets the command parameter for the <see cref="P:Philips.Platform.Presentation.Controls.TabContainerItem.CloseCommand"/>.
            </summary>
        </member>
        <member name="E:Philips.Platform.Presentation.Controls.TabContainerItem.Close">
            <summary>
            Raised when the Close button on the TabContainerItem is clicked.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.TextExtension">
             <summary>
             Helper class to extend the behavior to <see cref="T:System.Windows.Controls.TextBlock"/> and <see cref="T:System.Windows.Controls.AccessText"/>
             controls.
             </summary>
             <remarks>
             This class extends the behavior of the <see cref="T:System.Windows.Controls.TextBlock"/> and <see cref="T:System.Windows.Controls.AccessText"/>
             controls. This class provides an attached dependency property <c>ShowToolTipWhenTrimmed</c>
             that can be used to let <c>TextBlock</c> and <c>AccessText</c> instances automatically show
             a <see cref="T:System.Windows.Controls.ToolTip"/> when the text that is displayed by these controls does not fit, and
             is trimmed (truncated). The content of the tooltip will be equal to the content of the
             <c>TextBlock</c> or <c>AccessText</c> control.
             <example>
             The following example shows how to define a custom <see cref="T:System.Windows.Style"/> for the standard
             <see cref="T:System.Windows.Controls.TextBlock"/> control that trims its content by using the ellipsis character,
             and that automatically shows a <see cref="T:System.Windows.Controls.ToolTip"/> when the content is trimmed.
             <code lang="xaml">
             <![CDATA[
                 <Style x:Key="TextBlockStyle" TargetType="{x:Type TextBlock}">
                     <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                     <Setter Property="ptc:TextExtension.ShowToolTipWhenTrimmed" Value="True"/>
                 </Style>
             ]]>
             </code>
             </example>
            </remarks>
             <seealso cref="T:System.Windows.Controls.TextBlock">TextBlock Class</seealso> 
             <seealso cref="T:System.Windows.Controls.AccessText">AccessText Class</seealso>
             <seealso cref="T:System.Windows.Controls.ToolTip">ToolTip Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TextExtension.GetShowToolTipWhenTrimmed(System.Windows.DependencyObject)">
            <summary>
            Gets whether the specified dependency object shows a tooltip when its content
            is trimmed.
            </summary>
            <param name="dependencyObject">
            The dependency object. This should be a <see cref="T:System.Windows.Controls.TextBlock"/> or
            an <see cref="T:System.Windows.Controls.AccessText"/>.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TextExtension.SetShowToolTipWhenTrimmed(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether the specified dependency object shows a tooltip when its content
            is trimmed.
            </summary>
            <param name="dependencyObject">
            The dependency object. This should be a <see cref="T:System.Windows.Controls.TextBlock"/> or
            an <see cref="T:System.Windows.Controls.AccessText"/>.
            </param>
            <param name="value">The Boolean value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TextExtension.ShowToolTipWhenTrimmedProperty">
            <summary>
            Identifies the <c>ShowToolTipWhenTrimmed</c> attached dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TextExtension.OnShowToolTipWhenTrimmedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <c>ShowToolTipWhenTrimmed</c> attached property.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ToolBarContainer">
            <summary>
            Custom controls that hosts a <see cref="T:System.Windows.Controls.ToolBarTray"/> which in turn hosts one single
            <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar"/>, and extends the standard <c>ToolBarTray</c> behavior with features
            like pinning/unpinning and a location hint.
            </summary>
            <remarks>
            The <b>LocationHint</b> is a <see cref="T:System.Windows.UIElement"/> that can be designated to
            indicate the location of the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see>
            when it is not visible. 
            </remarks>
            <seealso cref="T:System.Windows.Controls.Control">Control Class</seealso>
            <seealso cref="T:System.Windows.IWeakEventListener">IWeakEventListener Interface</seealso>
            <seealso cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar Class</seealso>
            <seealso cref="T:System.Windows.Controls.ToolBarTray">ToolBarTray Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ToolBarContainer.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ToolBarContainer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBarStyleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBarStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ToolBarContainer.PinningModeProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.PinningMode"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ToolBarContainer.IsPinnedProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.IsPinned"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ToolBarContainer.HasGripProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.HasGrip"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ToolBarContainer.LocationHintSideProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.LocationHintSide"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ToolBarContainer.MouseOffOpacityProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.MouseOffOpacity"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ToolBarContainer.MouseOffDistanceProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.MouseOffDistance"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ToolBarContainer.IsToolBarVisiblePropertyKey">
            <summary>
            Dependency property key for the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.IsToolBarVisible"/> property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ToolBarContainer.IsToolBarVisibleProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.IsToolBarVisible"/> read only dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ToolBarContainer.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
            <remarks>
            Hosts the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see>
            in a <see cref="T:System.Windows.Controls.ToolBarTray"/>, if present.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ToolBarContainer.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <summary>
            Handles mouse movements in the parent window.
            </summary>
            <remarks>
            The <see cref="T:Philips.Platform.Presentation.Controls.PreviewMouseMoveWeakEventManager"/> is used to subscribe to the 
            <see cref="E:System.Windows.UIElement.PreviewMouseMove"/> event, using a weak reference.
            </remarks>
            <param name="managerType">
            The type of the <see cref="T:System.Windows.WeakEventManager"/> that is used to subscribe to the 
            <see cref="E:System.Windows.UIElement.PreviewMouseMove"/> event.
            </param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
            <returns>true if the event is recognized and handled, false otherwise.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ToolBarContainer.OnLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <c>ToolBarContainer</c> is loaded.
            </summary>
            <remarks>
            Subscribes to the <see cref="E:System.Windows.UIElement.PreviewMouseMove"/> event of the parent 
            window in order to compute the distance between the mouse and the 
            <c>ToolBarContainer</c>. With this, an appropriate opacity for the 
            <c>ToolBarContainer</c> can be determined. The event is subscribed to using a 
            PreviewMouseMoveWeakEventManager. This prevents a memory leak from occurring.
            </remarks>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ToolBarContainer.OnUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <c>ToolBarContainer</c> is unloaded.
            </summary>
            <remarks>
            Unsubscribes from the <see cref="E:System.Windows.UIElement.PreviewMouseMove"/> event of the parent 
            window to avoid unnecessary monitoring of the mouse.
            </remarks>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ToolBarContainer.OnPinningModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.PinningMode"/> property.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ToolBarContainer.OnToolBarStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBarStyle"/> property.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ToolBarContainer.CoerceMouseOffOpacity(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.MouseOffOpacity"/> to ensure that it is between 0 and 1.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ToolBarContainer.CoerceMouseOffDistance(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.MouseOffDistance"/> to ensure that it is greater than 0.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ToolBarContainer.OnParentWindowPreviewMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.PreviewMouseMove"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ToolBarContainer.IsMouseOverInteractiveArea(System.Windows.Point)">
            <summary>
            Determines whether the mouse is over the interactive area of the 
            <see cref="T:Philips.Platform.Presentation.Controls.ToolBarContainer"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ToolBarContainer.ApplyToolBarStyle">
            <summary>
            Applies the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBarStyle"/> to the 
            <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see>.
            </summary>
            <remarks>
            If the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBarStyle"/> is <see langword="null"/>, then the ToolBar's
            <see cref="F:System.Windows.FrameworkElement.StyleProperty"/> is cleared, and a fallback to an implicit
            style (possibly the default style) is enabled.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ToolBarContainer.ApplyPinningMode(Philips.Platform.Presentation.Controls.PinningMode)">
            <summary>
            Applies the specified pinning mode.
            </summary>
            <param name="pinningMode">The pinning mode to apply.</param>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBarStyle">
            <summary>
            Gets or sets the style for the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">
            <summary>
            Gets or sets the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar"/> to host.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ToolBarContainer.PinningMode">
            <summary>
            Gets or sets the pinning mode.
            </summary>
            <remarks>
            The default value of this property is
            <see cref="F:Philips.Platform.Presentation.Controls.PinningMode.PinManual"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ToolBarContainer.IsPinned">
            <summary>
            Gets or sets whether the <b>ToolBarContainer</b> pins down the 
            <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see>.
            </summary>
            <remarks>
            This property is to be used by the template of the 
            <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see> to 
            visualize the <b>IsPinned</b> state.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ToolBarContainer.HasGrip">
            <summary>
            Gets or sets whether the <b>ToolBarContainer</b> has a grip to move the 
            <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see>.
            </summary>
            <remarks>
            This property is to be used by the template of the 
            <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see> to 
            visualize the <b>HasGrip</b> state.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ToolBarContainer.LocationHintSide">
            <summary>
            Gets or sets the side on which the <b>LocationHint</b> is located, 
            relative to the <b>ToolBar</b>.
            </summary>
            <remarks>
            The <b>LocationHint</b> is a <see cref="T:System.Windows.UIElement"/> that can be designated to
            indicate the location of the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see> 
            when it is not visible. 
            In general, the position of the <b>LocationHint</b> will be directly related to the 
            <b>DockPanel.Dock"</b> property, if this <see cref="T:Philips.Platform.Presentation.Controls.ToolBarContainer"/> is hosted 
            in a <see cref="T:System.Windows.Controls.DockPanel"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ToolBarContainer.MouseOffOpacity">
            <summary>
            Gets or sets the opacity of the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see>
            when the mouse is not over it.
            </summary>
            <remarks>
            This property is to be used by the template of the 
            <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.ToolBar">ToolBar</see>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ToolBarContainer.MouseOffDistance">
            <summary>
            Gets or sets the distance to the nearest edge of the <c>ToolBarContainer</c> from the
            point at which the mouse is considered to be 'off' the ToolBarContainer.
            </summary>
            <remarks>
            <para>
            When the <c>ToolBarContainer</c> is pinned, and when the mouse is off the 
            <c>ToolBarContainer</c>, the opacity of the internal toolbar tray will be equal to 
            the <see cref="P:Philips.Platform.Presentation.Controls.ToolBarContainer.MouseOffOpacity"/>. When the mouse is directly over the toolbar, the 
            opacity will be 1 and in between, the opacity increases gradually when the mouse 
            approaches the toolbar.
            </para>
            <para>
            When the <c>ToolBarContainer</c> is <c>not</c> pinned, the same holds, except that
            the mouse off opacity is considered to be 0. So the fading in and fading out is
            between opacity 0 and 1 instead of between MouseOffOpacity and 1.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ToolBarContainer.IsToolBarVisible">
            <summary>
            Gets whether the tool bar is visible.
            </summary>
            <remarks>
            This property should be used in the template to control the visibility of both
            the tool bar itself and the location hint.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ToolkitTheme">
            <summary>
            Enumeration defining the various overarching toolkit themes. The options
            represent the entire spectrum of colors within the themes. For example,
            Experience Identity covers both the dark and the light Experience Identity themes.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ToolkitTheme.ExperienceIdentity">
            <summary>
            Toolkit theme representing all the EI themes
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ToolkitTheme.DesignLanguageSystem">
            <summary>
            Toolkit theme representing all the sDLS themes
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.TileContainer">
            <summary>
            Custom <see cref="T:System.Windows.Controls.ListBox"/> which puts its items (tiles) in a tiled layout.
            </summary>
            <remarks>
            This custom control is typically used to arrange <see cref="T:Philips.Platform.Presentation.Controls.ViewContainer"/> instances
            in a viewing application in a tiled layout. Using this control for other purposes is
            discouraged.
            </remarks>
            <seealso cref="T:System.Windows.Controls.ListBox">ListBox Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ViewContainer">ViewContainer Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TileContainer.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TileContainer.NumberOfColumnsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.TileContainer.NumberOfColumns"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.TileContainer.NumberOfRowsProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.TileContainer.NumberOfRows"/> dependency property.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.TileContainer.NumberOfColumns">
            <summary>
            Gets or sets the number of columns.
            </summary>
            <remarks>
            If this property has the value <b>0</b>, then the number of columns is
            determined automatically.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.TileContainer.NumberOfRows">
            <summary>
            Gets or sets the number of rows. A value of 0 means automatic.
            </summary>
            <remarks>
            If this property has the value <b>0</b>, then the number of rows is
            determined automatically.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ViewContainer">
            <summary>
            Custom control that offers tab container functionality.
            </summary>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ViewContainerItem">ViewContainerItem Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.TabContainer">TabContainer Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.TabContainerItem">TabContainerItem Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ViewContainer.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>
            This method returns a new <see cref="T:Philips.Platform.Presentation.Controls.ViewContainerItem"/> instance, which is
            the element type that is hosted by a <b>ViewContainer</b>.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ViewContainer.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            <see langword="true"/>, if the specified item is a <see cref="T:Philips.Platform.Presentation.Controls.ViewContainerItem"/>;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ViewContainerItem">
            <summary>
            Custom control that offers tab container item functionality.
            </summary>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ViewContainer">ViewContainer Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.TabContainer">TabContainer Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.TabContainerItem">TabContainerItem Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.VisualStateExtension">
            <summary>
            Extends the functionality of the <see cref="T:System.Windows.VisualState"/> and 
            <see cref="T:System.Windows.VisualStateGroup"/>.
            </summary>
            <remarks>
            This class provides extension methods that make it easier to navigate the visual states
            and the visual state groups that are defined by a control's visual state manager.
            Out of the box, it is not possible to access visual states and visual state groups by
            name in code. This class provides methods which make that possible.
            </remarks>
            <seealso cref="T:System.Windows.VisualState">VisualState Class</seealso>
            <seealso cref="T:System.Windows.VisualStateGroup">VisualStateGroup Class</seealso>
            <seealso cref="T:System.Windows.VisualStateManager">VisualStateManager Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.VisualStateExtension.Get(System.Collections.Generic.IEnumerable{System.Windows.VisualStateGroup},System.String)">
            <summary>
            Gets the unique visual state group that is identified by the specified name from
            a collection of visual state groups.
            </summary>
            <param name="visualStateGroups">The list of visual state groups.</param>
            <param name="name">The name of the visual state group to get.</param>
            <returns>
            The unique visual state group that corresponds to the specified name.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.VisualStateExtension.Get(System.Collections.Generic.IEnumerable{System.Windows.VisualState},System.String)">
            <summary>
            Gets the unique visual state that is identified by the specified name from
            a collection of visual states.
            </summary>
            <param name="visualStates">The list of visual states.</param>
            <param name="name">The name of the visual state to get.</param>
            <returns>
            The unique visual state that corresponds to the specified name.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.XrayMovieBar">
            <summary>
            Custom control that provides basic movie and navigation functionality that is
            suitable for X-ray data.
            </summary>
            <remarks>
            <para>
            The <c>XrayMovieBar</c> expects various named template parts to be defined in its control
            template. These template parts are:
            <list type="bullet">
              <item>
                <term>PART_MainContainer</term>
                <description>The main container that hosts the movie bar. This template part captures
                and handles <see cref="E:System.Windows.UIElement.MouseEnter"/> and <see cref="E:System.Windows.UIElement.MouseLeave"/>
                events for the movie bar.
                </description>
              </item>
              <item>
                <term>PART_Ellipse</term>
                <description>An <see cref="T:System.Windows.Shapes.Ellipse"/> that serves as a hint for users to access the movie
                bar functionality in case the movie bar is "hidden". The ellipse is a subtle visual hint
                or indication that the movie bar is there, and hovering over it will reveal the full
                movie bar functionality.</description>
              </item>
              <item>
                <term>PART_FrameRateContainer</term>
                <description>The container for the frame rate functionality of the movie bar.
                This template part captures and handles <see cref="E:System.Windows.UIElement.MouseEnter"/>
                and <see cref="E:System.Windows.UIElement.MouseLeave"/> events for the frame rate functionality
                of the movie bar.
                </description>
              </item>
              <item>
                <term>PART_FrameRateSlider</term>
                <description>A <see cref="T:System.Windows.Controls.Slider"/> that allows the user to change the frame rate
                at which the movie is played.
                </description>
              </item>
              <item>
                <term>PART_PlayPauseButton</term>
                <description>A <see cref="T:System.Windows.Controls.Primitives.ToggleButton"/> that allows the user to toggle between
                playing and pausing the movie.</description>
              </item>
              <item>
                <term>PART_RecommendedFrameRateThumb</term>
                <description>A <see cref="T:System.Windows.Shapes.Polygon"/> that represents a visual indication of the
                recommended frame rate for a given set of images.
                </description>
              </item>
              <item>
                <term>PART_MovieBarHitTester</term>
                <description>A transparent <see cref="T:System.Windows.Shapes.Rectangle"/> that is used as hit-tester when the
                movie bar is in unpinned state.
                </description>
              </item>
              <item>
                <term>PART_LegsBackground</term>
                <description>
                </description>
              </item>
              <item>
                <term>PART_LeftLegContent</term>
                <description>Container on the movie bar with content placed on the left side of the 
                movie bar.
                </description>
              </item>
              <item>
                <term>PART_Core</term>
                <description>Container on the movie bar with content placed in the middle of the 
                movie bar.
                </description>
              </item>
              <item>
                <term>PART_OverflowButton</term>
                <description>The movie bar overflow button. Clicking this button will open the overflow
                popup panel, which hosts all the controls that do not fit on the movie bar itself.
                </description>
              </item>
              <item>
                <term>PART_Pin</term>
                <description>The movie bar pin button. If the movie bar is pinned, the auto-hide
                behavior is disabled. See the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.IsPinned"/> dependency property.
                </description>
              </item>
              <item>
                <term>PART_LeftCoreContent</term>
                <description>
                    The container for the PART_PreviousImageButton and PART_PreviousSeriesButton.
                </description>
              </item>
              <item>
                <term>PART_PreviousImageButton</term>
                <description>
                    The previous image button. Clicking this will navigate to the previous image.
                </description>
              </item>
              <item>
                <term>PART_PreviousSeriesButton</term>
                <description>
                    The previous series button. Clicking this will navigate to the previous series.
                </description>
              </item>
              <item>
                <term>PART_StudyOverviewButton</term>
                <description>
                    The study overview button. Clicking this will show all images in the study.
                </description>
              </item>
              <item>
                <term>PART_SeriesOverviewButton</term>
                <description>
                    The series overview button. Clicking this will show an overview of the series.
                </description>
              </item>
              <item>
                <term>PART_RightCoreContent</term>
                <description>
                    The container for the PART_NextImageButton and PART_NextSeriesButton.
                </description>
              </item>
              <item>
                <term>PART_NextImageButton</term>
                <description>
                    The next image button. Clicking this will navigate to the next image in the movie.
                </description>
              </item>
              <item>
                <term>PART_NextSeriesButton</term>
                <description>
                    The next series button. Clicking this will navigate to the next series.
                </description>
              </item>
              <item>
                <term>PART_StudyCycleButton</term>
                <description>
                    The cycle study button. Clicking this will make the movie cycle over the series.
                </description>
              </item>
              <item>
                <term>PART_FrameRateIndexSlider</term>
                <description>
                    The frame rate index slider. Clicking the button shows a slider that can change the
                    frame rate of the movie.
                </description>
              </item>
            </list>
            </para>
            <para>
            The user can navigate through the available frame rate values. These are either determined
            by the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.MinimumFrameRate"/> and <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.MaximumFrameRate"/>
            properties, which allow for a continuous range of frame rate values; or they are determined
            by explicitly setting a collection of available frame rate values using the
            <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.FrameRateValues"/> property, which allows the application builder to
            define a fixed set of discrete frame rate values.
            </para>
            <para>
            Navigation through the frame rate values is either cyclic, or it respects the boundaries
            set by the minimum and maximum frame rate values. This latter mode is the default, as it
            corresponds most naturally to the user's expectations of this behavior. The default behavior
            can be changed by setting the value of the <see cref="P:Philips.Platform.Presentation.Controls.MovieBar.IsFrameRateCyclic"/> property
            to <see langword="true"/>.
            </para>
            <para>
            This class provides basic movie functionality that is not specialized for any modality or
            data type. If you need specific movie functionality for your modality, or for your type
            of clinical data, you can implement a dedicated movie bar that derives from this basic
            movie bar, or you can implement one from scratch.
            </para>
            <para>
            The WPF Presentation Toolkit provides a number of dedicated, specialized movie bars:
            <list type="bullet">
              <item>
                <term><b>MRMovieBar</b></term>
                <description>Movie bar specialized for MR data sets.</description>
              </item>
              <item>
                <term><see cref="T:Philips.Platform.Presentation.Controls.XrayMovieBar"/></term>
                <description>Movie bar specialized for X-ray data sets (this class).</description>
              </item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Controls.Control">Control Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.MovieBar">XrayMovieBar Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.MovieBarArranger">MovieBarArranger class</seealso> 
            <seealso cref="T:Philips.Platform.Presentation.Controls.MovieBarCoreArranger">MovieBarCoreArranger class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.XrayMovieBar.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.XrayMovieBar.HasCycleStudyProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.XrayMovieBar.HasCycleStudy"/> dependency property.
            </summary>
            <remarks>
            By default, the value of this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.XrayMovieBar.HasOverviewNavigationProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.XrayMovieBar.HasOverviewNavigation"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.XrayMovieBar.IsStudyOverviewActiveProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.XrayMovieBar.IsStudyOverviewActive"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.XrayMovieBar.IsSeriesOverviewActiveProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.XrayMovieBar.IsSeriesOverviewActive"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.XrayMovieBar.IsCycleStudyActiveProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.XrayMovieBar.IsCycleStudyActive"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.XrayMovieBar.SeriesOverviewPreviousPageCommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.XrayMovieBar.SeriesOverviewPreviousPageCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.XrayMovieBar.SeriesOverviewNextPageCommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.XrayMovieBar.SeriesOverviewNextPageCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.XrayMovieBar.SeriesOverviewCommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.XrayMovieBar.SeriesOverviewCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.XrayMovieBar.SeriesOverviewToolTipProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.XrayMovieBar.SeriesOverviewToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.XrayMovieBar.StudyOverviewCommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.XrayMovieBar.StudyOverviewCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.XrayMovieBar.StudyOverviewToolTipProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.XrayMovieBar.StudyOverviewToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.XrayMovieBar.StudyOverviewPreviousPageCommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.XrayMovieBar.StudyOverviewPreviousPageCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.XrayMovieBar.StudyOverviewNextPageCommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.XrayMovieBar.StudyOverviewNextPageCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.XrayMovieBar.CycleStudyCommandProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.XrayMovieBar.CycleStudyCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.XrayMovieBar.CycleStudyToolTipProperty">
            <summary>
            Identifies the <see cref="P:Philips.Platform.Presentation.Controls.XrayMovieBar.CycleStudyToolTip"/> dependency property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.XrayMovieBar.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.XrayMovieBar.HasCycleStudy">
            <summary>
            Gets or sets whether the movie bar has a user interface to switch the "Cycle Study"
            mode on or off. In the "Cycle Study" mode, the movie bar automatically cycles through
            all the movies (i.e., runs) that are part of the same study.
            </summary>
            <remarks>
            <para>
            Use this property to configure whether the movie bar exposes a user interface
            (typically, a toggle button) to switch the "Cycle Study" mode on or off. This
            property should not be confused with the <see cref="P:Philips.Platform.Presentation.Controls.XrayMovieBar.IsCycleStudyActive"/> property,
            which is used to determine whether the "Cycle Study" mode is currently active.
            </para>
            <para>
            By default, the value of this property is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.XrayMovieBar.HasOverviewNavigation">
            <summary>
            Gets or sets whether the movie bar has a user interface to navigate through an overview,
            which can be either a series overview, an exam overview, or a study overview.
            </summary>
            <remarks>
            <para>
            Typically, the movie bar will show buttons to navigate to the next and previous page of
            the currently active overview (series, exam, or study) if this property is set to
            <see langword="true"/>. However, it is the responsibility of the movie bar style to
            visualize this state in an appropriate way.
            </para>
            <para>
            The default value is <see langword="true"/>. 
            </para>
            <para>
            A viewer that uses a scroll bar for browsing in overview mode, will typically set this
            property to <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.XrayMovieBar.IsStudyOverviewActive">
            <summary>
            Gets or sets whether the Study Overview is active.
            </summary>
            <remarks>
            <para>
            This property is used to tell the <see cref="T:Philips.Platform.Presentation.Controls.XrayMovieBar"/> whether the context
            (the viewer/arrangement) in which the movie bar is shown is currently showing the
            Study Overview. The movie bar can use this information to adapts its state and
            visualization.
            </para>
            <para>
            This property should not be confused with the  <see cref="P:Philips.Platform.Presentation.Controls.XrayMovieBar.HasOverviewNavigation"/>
            property, which is used to instruct the movie bar whether it should expose Series
            and Study Overview functionality at all.
            </para>
            <para>
            The default value is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.XrayMovieBar.IsSeriesOverviewActive">
            <summary>
            Gets or sets whether the Series Overview is active.
            </summary>
            <remarks>
            <para>
            This property is used to tell the <see cref="T:Philips.Platform.Presentation.Controls.XrayMovieBar"/> whether the context
            (the viewer/arrangement) in which the movie bar is shown is currently showing the
            Series Overview. The movie bar can use this information to adapts its state and
            visualization.
            </para>
            <para>
            This property should not be confused with the  <see cref="P:Philips.Platform.Presentation.Controls.XrayMovieBar.HasOverviewNavigation"/>
            property, which is used to instruct the movie bar whether it should expose Series
            and Study Overview functionality at all.
            </para>
            <para>
            The default value is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.XrayMovieBar.IsCycleStudyActive">
            <summary>
            Gets or sets whether cycle study is active.
            </summary>
            <remarks>
            <para>
            This property is used to determine whether the "Cycle Study" mode is currently active.
            This property should not be confused with the <see cref="P:Philips.Platform.Presentation.Controls.XrayMovieBar.HasCycleStudy"/> property,
            which is used to configure whether the movie bar exposes a user interface to switch
            the "Cycle Study" mode on or off.
            </para>
            <para>
            By default, the value of this property is <see langword="false"/>.
            </para>
            </remarks> 
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.XrayMovieBar.SeriesOverviewPreviousPageCommand">
            <summary>
            Command to toggle the study overview mode.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.XrayMovieBar.SeriesOverviewPreviousPageCommandProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <see langword="null"/>.
            </remarks> 
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.XrayMovieBar.SeriesOverviewNextPageCommand">
            <summary>
            Command to toggle the study overview mode.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.XrayMovieBar.SeriesOverviewNextPageCommandProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <see langword="null"/>.
            </remarks> 
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.XrayMovieBar.SeriesOverviewCommand">
            <summary>
            Command to toggle the study overview mode.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.XrayMovieBar.SeriesOverviewCommandProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <see langword="null"/>.
            </remarks> 
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.XrayMovieBar.SeriesOverviewToolTip">
            <summary>
            Get/set the tooltip for series overview command.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.XrayMovieBar.SeriesOverviewToolTipProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <seealso cref="P:Philips.Platform.Presentation.TextResources.SeriesOverview"/>.
            </remarks> 
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.XrayMovieBar.StudyOverviewCommand">
            <summary>
            Command to toggle the study overview mode.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.XrayMovieBar.SeriesOverviewNextPageCommandProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <see langword="null"/>.
            </remarks> 
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.XrayMovieBar.StudyOverviewToolTip">
            <summary>
            Get/set the tooltip for the study overview command.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.XrayMovieBar.StudyOverviewToolTipProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <seealso cref="P:Philips.Platform.Presentation.TextResources.StudyOverview"/>.
            </remarks> 
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.XrayMovieBar.StudyOverviewPreviousPageCommand">
            <summary>
            Command to toggle the study overview mode.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.XrayMovieBar.StudyOverviewPreviousPageCommandProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <see langword="null"/>.
            </remarks> 
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.XrayMovieBar.StudyOverviewNextPageCommand">
            <summary>
            Command to toggle the study overview mode.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.XrayMovieBar.StudyOverviewNextPageCommandProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <see langword="null"/>.
            </remarks> 
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.XrayMovieBar.CycleStudyCommand">
            <summary>
            Command to toggle the study overview mode.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.XrayMovieBar.CycleStudyCommandProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <see langword="null"/>.
            </remarks> 
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.XrayMovieBar.CycleStudyToolTip">
            <summary>
            Get/set the tooltip for cycle study command.
            </summary>
            <seealso cref="F:Philips.Platform.Presentation.Controls.XrayMovieBar.CycleStudyToolTipProperty">
            Dependency property associated with this property.
            </seealso>
            <remarks>
            The default value is <seealso cref="P:Philips.Platform.Presentation.TextResources.StudyCycle"/>.
            </remarks> 
        </member>
        <member name="T:Philips.Platform.Presentation.ExperienceIdentity.ListViewResourceDictionary">
             <summary>
             Resources for the Experience Identity <see cref="T:System.Windows.Controls.ListView"/> style.
             </summary>
             <remarks>
             This class provides resources that go with the default Experience Identity style
             for the <see cref="T:System.Windows.Controls.ListView"/> control. This class defines a method to handle the
             event that the column header gripper is dragged. This way, a minumum width can be set
             on the column header, which is otherwise not possible. Also see:
            
             @shoscarOff S2@101   Allow line length for URL to be longer than 100 characters.
            
             https://stackoverflow.com/questions/10097574/how-apply-minwidth-for-listview-columns-in-wpf-in-control-template
            
             @shoscarOn S2@101
            
             </remarks>
             <seealso cref="T:System.Windows.ResourceDictionary">ResourceDictionary Class</seealso>
             <seealso cref="T:System.Windows.Controls.ListView">ListView Class</seealso>
            <summary>
            ListViewResourceDictionary
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.ExperienceIdentity.ListViewResourceDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.ExperienceIdentity.ResizerResources">
            <summary>
            Resources for the Experience Identity <see cref="T:Philips.Platform.Presentation.Controls.Resizer"/> style.
            </summary>
            <remarks>
            This class provides resources that go with the default Experience Identity style
            for the <see cref="T:Philips.Platform.Presentation.Controls.Resizer"/> control. This class defines a number of private
            mouse event handlers that are used in the style to implement the resizing behavior.
            </remarks>
            <seealso cref="T:System.Windows.ResourceDictionary">ResourceDictionary Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.Resizer">Resizer Class</seealso>
            <summary>
            ResizerResources
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.ExperienceIdentity.ResizerResources.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.BooleanToValueConverter">
             <summary>
             Converts a Boolean to a predefined value if <see langword="true"/> or a different
             predefined value if <see langword="false"/>.
             </summary>
             <remarks>
             <para>
             For more information, see:
             @shoscarOff S2@101   Allow line length for URL to be longer than 100 characters.
            
             http://geekswithblogs.net/codingbloke/archive/2010/05/28/a-generic-boolean-value-converter.aspx
            
             @shoscarOn S2@101
             </para>
             <para>
             This <b>BooleanToValueConverter</b> can be used to set a generic value if true or a
             different value if false. For example, a property such as visibility can be set to
             <see cref="F:System.Windows.Visibility.Visible"/> if the Boolean value is <see langword="true"/>,
             or <see cref="F:System.Windows.Visibility.Hidden"/> if the Boolean value is <see langword="false"/>.
             </para>
             </remarks>
             <example>
             The following example shows how an <c>BooleanToValueConverter</c> can be used to
             change the visibility of a control depending on whether or not it is enabled.
             <code lang="xaml">
             <![CDATA[
                 <Grid.Resources>
                     <pt:BooleanToValueConverter x:Key="BooleanToValueConverter"
                         FalseValue="{x:Static Visibility.Hidden}"
                         TrueValue="{x:Static Visibility.Visible}"/>
                </Grid.Resources>
                <Button
                    Visibility="{Binding
                        IsEnabled,
                        Source={RelativeSource Self},
                        Converter={StaticResource BooleanToValueConverter}}"/>
             ]]>
             </code>
             </example>
             <seealso cref="T:Philips.Platform.Presentation.Controls.BooleanToValueConverterExtension">BooleanToValueConverterExtension Class</seealso>
             <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.BooleanToValueConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Philips.Platform.Presentation.Controls.BooleanToValueConverter"/> class.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.BooleanToValueConverter.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Philips.Platform.Presentation.Controls.BooleanToValueConverter"/>
            class with the specified TrueValue and FalseValue.
            </summary>
            <param name="trueValue">
            The value to return when the input <see cref="T:System.Boolean"/> is true (see <see cref="P:Philips.Platform.Presentation.Controls.BooleanToValueConverter.TrueValue"/>).
            </param>
            <param name="falseValue">
            The value to return when the input <see cref="T:System.Boolean"/> is false (see <see cref="P:Philips.Platform.Presentation.Controls.BooleanToValueConverter.FalseValue"/>).
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.BooleanToValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Tries to set a value if true, and a different value if false.
            </summary>
            <param name="value">
            The specified element value in the expression. This should be a <see cref="T:System.Boolean"/>.
            </param>
            <param name="targetType">The type of the binding target property (currently
            ignored).</param>
            <param name="parameter">The converter parameter to use (currently ignored).</param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            The <see cref="P:Philips.Platform.Presentation.Controls.BooleanToValueConverter.TrueValue"/> or <see cref="P:Philips.Platform.Presentation.Controls.BooleanToValueConverter.FalseValue"/>, depending on whether the input
            <see cref="T:System.Boolean"/> was true or false. If the input value was <see langword="null"/> or
            not a <see cref="T:System.Boolean"/>, <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> is returned.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.BooleanToValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Tries to determine if the input value is equal to the value of <see cref="P:Philips.Platform.Presentation.Controls.BooleanToValueConverter.TrueValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            <see langword="true"/> if the input is equal to <see cref="P:Philips.Platform.Presentation.Controls.BooleanToValueConverter.TrueValue"/>,
            <see langword="false"/> if the input is equal to <see cref="P:Philips.Platform.Presentation.Controls.BooleanToValueConverter.FalseValue"/>.
            Otherwise, <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> is returned.
            </returns>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BooleanToValueConverter.TrueValue">
            <summary>
            Gets or sets the value to return when the input Boolean is set to
            <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BooleanToValueConverter.FalseValue">
            <summary>
            Gets or sets the value to return when the input Boolean is set to
            <see langword="false"/>.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.BooleanToVisibilityMultiValueConverter">
            <summary>
            A custom multi-value converter which converts an array of Boolean values
            to a single <see cref="T:System.Windows.Visibility"/> value.
            </summary>
            <remarks>
            This is a variant of the standard .NET <see cref="T:System.Windows.Controls.BooleanToVisibilityConverter"/>.
            The .NET converter takes a single Boolean value, and converts that to a
            <see cref="T:System.Windows.Visibility"/> value. Our variant takes an array of Boolean values,
            and converts those to a single <see cref="T:System.Windows.Visibility"/> value. See the
            <see cref="M:Philips.Platform.Presentation.Controls.BooleanToVisibilityMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)"/> method for more details on the exact return value.
            </remarks>
            <seealso cref="T:System.Windows.Data.IMultiValueConverter">IMultiValueConverter Interface</seealso>
            <seealso cref="T:System.Windows.Visibility">Visibility Enumeration</seealso>
            <seealso cref="T:System.Windows.Controls.BooleanToVisibilityConverter">BooleanToVisibilityConverter Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.BooleanToVisibilityMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified values to a <see cref="T:System.Windows.Visibility"/> value.
            </summary>
            <param name="values">
            The value produced by the binding source.
            This must be an array of Boolean values.
            </param>
            <param name="targetType">
            The type of the binding target property (ignored).
            </param>
            <param name="parameter">
            The converter parameter to use (ignored).
            </param>
            <param name="culture">
            The culture to use in the converter (ignored).
            </param>
            <returns>
            This method returns
            <list type="bullet">
              <item>
                 <term><see cref="F:System.Windows.DependencyProperty.UnsetValue"/></term>
                 <description>If the provided array of values is <see langword="null"/>.</description>
              </item>
              <item>
                 <term><see cref="F:System.Windows.DependencyProperty.UnsetValue"/></term>
                 <description>If the provided array of values is empty.</description>
              </item>
              <item>
                <term><see cref="F:System.Windows.DependencyProperty.UnsetValue"/></term>
                <description>If the provided array of values has elements that are
                not Booleans.</description>
             </item>
             <item>
                <term><see cref="F:System.Windows.Visibility.Visible"/></term>
                <description>If the provided array of values has only elements that
                are Booleans, and all of those have the value <see langword="true"/>.</description>
             </item>
             <item>
               <term><see cref="F:System.Windows.Visibility.Collapsed"/></term>
               <description>If the provides array of values has only elements that
               are Booleans, and some of those have the value <see langword="false"/>.</description>
             </item>
            </list>
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.BooleanToVisibilityMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetTypes">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.CaseConverter">
            <summary>
            Represents an <see cref="T:System.Windows.Data.IValueConverter"/> that converts the casing of the input string.
            </summary>
            <remarks>
            <para>
            The <c>CaseConverter</c> class can be used to convert input strings into upper or
            lower case according to the <see cref="P:Philips.Platform.Presentation.Controls.CaseConverter.Casing"/> property.
            Setting <see cref="P:Philips.Platform.Presentation.Controls.CaseConverter.Casing"/> is a shortcut for setting both <see cref="P:Philips.Platform.Presentation.Controls.CaseConverter.SourceCasing"/>
            and <see cref="P:Philips.Platform.Presentation.Controls.CaseConverter.TargetCasing"/>. It is therefore possible
            to specify that the source and target properties be converted to different casings.
            </para>
            <para>
            The code is based on Kent Boogaart's WPF Converters, V1.3.0.0.
            See <see href="https://github.com/kentcb/WPFConverters"/>.
            </para>
            </remarks>
            <example>
            The following example shows how a <c>CaseConverter</c> can be used to convert
            a bound value to upper-case. This example uses the more convenient way of addressing
            the converter in XAML by making use of the <see cref="T:Philips.Platform.Presentation.Controls.CaseConverterExtension"/>.
            <code lang="xaml">
            <![CDATA[
            <Label  x:Name="upperCaseLabel"
                Content="{Binding Name, Converter={ptc:CaseConverter Upper}}"/>
            ]]>
            </code>
            </example>
            <example>
            The following example shows how a <c>CaseConverter</c> can be used to convert
            a bound value to upper-case, but display it in lower-case. This example uses
            the more convenient way of addressing the converter in XAML by making use of
            the <see cref="T:Philips.Platform.Presentation.Controls.CaseConverterExtension"/>.
            <code lang="xaml">
            <![CDATA[
            <Label x:Name="lowerCaseLabel"
                Content="{Binding
                    Name,
                    Converter={CaseConverter SourceCasing=Upper, TargetCasing=Lower}
                }"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.CaseConverterExtension">CaseConverterExtension Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CaseConverter.#ctor">
            <summary>
            Initializes a new instance of the CaseConverter class.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CaseConverter.#ctor(System.Windows.Controls.CharacterCasing)">
            <summary>
            Initializes a new instance of the CaseConverter class with the
            specified source and target casings.
            </summary>
            <param name="casing">
            The source and target casings for the converter (see <see cref="P:Philips.Platform.Presentation.Controls.CaseConverter.Casing"/>).
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CaseConverter.#ctor(System.Windows.Controls.CharacterCasing,System.Windows.Controls.CharacterCasing)">
            <summary>
            Initializes a new instance of the CaseConverter class with the
            specified source and target casings.
            </summary>
            <param name="sourceCasing">
            The source casing for the converter (see <see cref="P:Philips.Platform.Presentation.Controls.CaseConverter.SourceCasing"/>).
            </param>
            <param name="targetCasing">
            The target casing for the converter (see <see cref="P:Philips.Platform.Presentation.Controls.CaseConverter.TargetCasing"/>).
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CaseConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Attempts to convert the specified value.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A value that is converted according to the <see cref="P:Philips.Platform.Presentation.Controls.CaseConverter.TargetCasing"/>;
            or <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the value is not a string.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CaseConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Attempts to convert the specified value back.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A value that is converted according to the <see cref="P:Philips.Platform.Presentation.Controls.CaseConverter.SourceCasing"/>;
            or <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the value is not a string.
            </returns>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.CaseConverter.SourceCasing">
            <summary>
            Gets or sets the source casing for the converter.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.CaseConverter.TargetCasing">
            <summary>
            Gets or sets the target casing for the converter.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.CaseConverter.Casing">
            <summary>
            Sets both the source and target casings for the converter.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ColorToSolidColorBrushConverter">
            <summary>
            Represents an <see cref="T:System.Windows.Data.IValueConverter"/> that converts a <see cref="T:System.Windows.Media.Color"/>
            to a <see cref="T:System.Windows.Media.SolidColorBrush"/>.
            </summary>
            <remarks>
            This converter takes a <see cref="T:System.Windows.Media.Color"/> value, and produces a corresponding
            <see cref="T:System.Windows.Media.SolidColorBrush"/> that has the same color value as the original <c>Color</c>.
            </remarks>
            <example>
            The following example shows how a <c>ColorToSolidColorBrushConverter</c> can be used to
            convert a <c>Color</c> value selected from a <see cref="T:Philips.Platform.Presentation.Controls.ColorPicker"/> to a
            <see cref="T:System.Windows.Media.SolidColorBrush"/> that is used to fill a rectangle.
            <code lang="xaml">
            <![CDATA[
            <Rectangle x:Name="coloredRectangle"
                Fill="{Binding
                    SelectedColor,
                    RelativeSource={RelativeSource
                        Mode=FindAncestor,
                        AncestorType={x:Type ptc:ColorPicker}
                    },
                    Converter={StaticResource ColorToSolidColorBrushConverter}
                }"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:System.Windows.Media.Color">Color Structure</seealso>
            <seealso cref="T:System.Windows.Media.SolidColorBrush">SolidColorBrush Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorToSolidColorBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a <see cref="T:System.Windows.Media.Color"/> to a <see cref="T:System.Windows.Media.SolidColorBrush"/>.
            </summary>
            <param name="value">The <see cref="T:System.Windows.Media.Color"/> value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A <see cref="T:System.Windows.Media.SolidColorBrush"/> having the same color as the specified value;
            or <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the conversion cannot be made.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ColorToSolidColorBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a <see cref="T:System.Windows.Media.SolidColorBrush"/> to a <see cref="T:System.Windows.Media.Color"/>.
            </summary>
            <param name="value">The <see cref="T:System.Windows.Media.SolidColorBrush"/> that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A <see cref="T:System.Windows.Media.Color"/> corresponding to the color of the <see cref="T:System.Windows.Media.SolidColorBrush"/>;
            or <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the conversion cannot be made.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.CompareConverter">
            <summary>
            A custom converter that compares the input value to the <see cref="P:Philips.Platform.Presentation.Controls.CompareConverter.OriginalValue"/>.
            The types of comparison are defined by the values of the <see cref="T:Philips.Platform.Presentation.Controls.ComparisonType"/>
            enumeration.
            </summary>
            <remarks>
            <para>
            This converter can compare two <see cref="T:System.IComparable"/> instances with each other. The 
            original value has to be strongly typed and has to have the same type as the input value, 
            otherwise an exception will be thrown.
            </para>
            <para>
            This converter has a limitation that only one of the values to be compared can be passed
            into the <see cref="M:Philips.Platform.Presentation.Controls.CompareConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> method. The other value to be compared must be assigned as
            a constant to the <see cref="P:Philips.Platform.Presentation.Controls.CompareConverter.OriginalValue"/> property. Note that this cannot be done using
            a <see cref="T:System.Windows.Data.Binding"/> in XAML. So, the values that is passed to the <c>OriginalValue</c>
            must always be a constant. If you need to pass two values using a <c>Binding</c> for each
            value, you cannot use this converter. Instead, you will need to use the
            <see cref="T:Philips.Platform.Presentation.Controls.CompareMultiValueConverter"/>.
            </para>
            </remarks>
            <example>
            The following example shows how to use the <c>CompareConverter</c> to check if a value is
            less than or equal to 1. This example uses the more convenient way of addressing the
            converter in XAML by making use of the <see cref="T:Philips.Platform.Presentation.Controls.CompareConverterExtension"/>.
            <code lang="xaml">
            <![CDATA[
            <Binding 
                Path="Count"
                ConverterParameter="{x:Static ptc:ComparisonType.LessThanOrEqual}"
                RelativeSource="{RelativeSource Self}">
                <Binding.Converter>
                    <ptc:CompareConverter>
                        <ptc:CompareConverter.OriginalValue>
                            <sys:Int32>1</sys:Int32>
                        </ptc:CompareConverter.OriginalValue>
                    </ptc:CompareConverter>
                </Binding.Converter>
            </Binding>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:System.IComparable">IComparable Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.CompareConverterExtension">CompareConverterExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.CompareMultiValueConverter">CompareMultiValueConverter Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CompareConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Attempts to compare the given value to the <see cref="P:Philips.Platform.Presentation.Controls.CompareConverter.OriginalValue"/>.
            </summary>
            <param name="value">The value to compare with the <see cref="P:Philips.Platform.Presentation.Controls.CompareConverter.OriginalValue"/>.
            </param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">
            The parameter is used to specify the type of comparison <see cref="T:Philips.Platform.Presentation.Controls.ComparisonType"/>.
            If it is not set explicitly, <see cref="F:Philips.Platform.Presentation.Controls.ComparisonType.GreaterThan"/> is used.
            </param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            <see langword="true"/>, when the specified value can be compared to the
            <see cref="P:Philips.Platform.Presentation.Controls.CompareConverter.OriginalValue"/>, and the result of the comparison is <b>true</b>;
            <see langword="false"/>, when the specified value can be compared to the
            <see cref="P:Philips.Platform.Presentation.Controls.CompareConverter.OriginalValue"/>, and the result of the comparison is <b>false</b>;
            <see cref="F:System.Windows.DependencyProperty.UnsetValue"/>, when the specified value cannot
            be compared to the <see cref="P:Philips.Platform.Presentation.Controls.CompareConverter.OriginalValue"/> (for example, because the two
            values are not of the same type, or do not implement <see cref="T:System.IComparable"/>).
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CompareConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.CompareConverter.OriginalValue">
            <summary>
            Gets or sets the original value, which is the value to compare with.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.CompareMultiValueConverter">
            <summary>
            A custom multi-value converter that compares two input values.
            The types of comparison are defined by the values of the <see cref="T:Philips.Platform.Presentation.Controls.ComparisonType"/>
            enumeration.
            </summary>
            <remarks>
            <para>
            This converter can compare two <see cref="T:System.IComparable"/> instances with each other. Both
            input values can be passed to the <see cref="M:Philips.Platform.Presentation.Controls.CompareMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)"/> method, making this converter
            suitable to be used in a <see cref="T:System.Windows.Data.MultiBinding"/> where each of the input values is
            the subject of a <see cref="T:System.Windows.Data.Binding"/>.
            </para>
            </remarks>
            <example>
            The following example shows how to use the <c>CompareConverter</c> to check if the
            <see cref="P:System.Windows.Controls.ScrollViewer.VerticalOffset"/> and <see cref="P:System.Windows.Controls.ScrollViewer.ScrollableHeight"/>
            values are equal to each other, which is a way to check whether the scrollable content
            is scrolled all the way down. This example uses the more convenient way of addressing the
            converter in XAML by making use of the <see cref="T:Philips.Platform.Presentation.Controls.CompareMultiValueConverterExtension"/>.
            <code lang="xaml">
            <![CDATA[
            <MultiBinding
                Converter="{ptc:CompareMultiValueConverter}"
                ConverterParameter="{x:Static ptc:ComparisonType.Equal}">
                <Binding Path="VerticalOffset" RelativeSource="{RelativeSource Self}"/>
                <Binding Path="ScrollableHeight" RelativeSource="{RelativeSource Self}"/>
            </MultiBinding>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:System.IComparable">IComparable Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.CompareMultiValueConverterExtension">CompareMultiValueConverterExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.CompareConverter">CompareConverter Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CompareMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Attempts to compare the (first two) specified values.
            </summary>
            <param name="values">The values to compare. Only the first two specified values are
            compared. If more than two values are specified, the additional values are ignored.
            </param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">
            The parameter is used to specify the type of comparison <see cref="T:Philips.Platform.Presentation.Controls.ComparisonType"/>.
            If it is not set explicitly, <see cref="F:Philips.Platform.Presentation.Controls.ComparisonType.GreaterThan"/> is used.
            </param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            <see langword="true"/>, when the (first two) specified values can be compared,
            and the result of the comparison is <b>true</b>;
            <see langword="false"/>, when the (first two) specified values can be compared,
            and the result of the comparison is <b>false</b>;
            <see cref="F:System.Windows.DependencyProperty.UnsetValue"/>, when the (first two) specified values
            cannot be compared (for example, because the two values are not of the same type,
            or do not implement <see cref="T:System.IComparable"/>).
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CompareMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetTypes">The types to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CompareMultiValueConverter.VerifyPreconditionsForConversion(System.Object[])">
            <summary>
            Verifies that the preconditions for doing the conversion are met.
            </summary>
            <param name="values">The values to compare.</param>
            <returns>
            <see langword="true"/>, if the preconditions for conversion are met;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ComparisonType">
            <summary>
            Enumeration defining the various comparison types. 
            </summary>
            <seealso cref="T:Philips.Platform.Presentation.Controls.CompareConverter">CompareConverter Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ComparisonType.Equal">
            <summary>
            Used to check whether two values are equal.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ComparisonType.NotEqual">
            <summary>
            Used to check whether two values are not equal.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ComparisonType.LessThan">
            <summary>
            Used to check whether one value is less than another value.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ComparisonType.LessThanOrEqual">
            <summary>
            Used to check whether one value is less than or equal to another value.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ComparisonType.GreaterThan">
            <summary>
            Used to check whether one value is greater than another value.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ComparisonType.GreaterThanOrEqual">
            <summary>
            Used to check whether one value is greater than or equal to another value.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.DateConverter">
            <summary>
            Converts <see cref="T:System.DateTime"/> or <see cref="T:System.DateTimeOffset"/> values to strings that
            can be presented in the user interface.
            </summary>
            <remarks>
            This converter is only concerned with converting dates. If you want to convert times,
            you should use its sibling, the <see cref="T:Philips.Platform.Presentation.Controls.TimeConverter"/>.
            </remarks>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:System.DateTime">DateTime Struct</seealso>
            <seealso cref="T:System.DateTimeOffset">DateTimeOffset Struct</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.TimeConverter">TimeConverter Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DateConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value, which should represent a <see cref="T:System.DateTime"/> or a
            <see cref="T:System.DateTimeOffset"/>, to a string representation which is suitable for display.
            </summary>
            <remarks>
            The specified value should be converted to a string representation using the
            "International Settings" date format as defined by UI Harmonization. The
            <paramref name="targetType"/> and the <paramref name="parameter"/> are ignored.<br/>
            Applications must explicitly set the <see cref="P:System.Windows.Data.Binding.ConverterCulture"/>
            property to the culture to be used. This must be <see cref="P:Philips.Platform.Presentation.Controls.DateConverter.HarmonizedCulture"/> or
            an alternative format if deviation from the Standard is legitimized.
            </remarks>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use (currently ignored).</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            The converted value, if the value is indeed a <see cref="T:System.DateTime"/> or a
            <see cref="T:System.DateTimeOffset"/>; or the string "Unknown", otherwise, to indicate that the
            specified value does not represent a valid date/time.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DateConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DateConverter.StaticConvert(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Static version of <seealso cref="M:Philips.Platform.Presentation.Controls.DateConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DateConverter.GetDateTimeFormatForCulture(System.Globalization.CultureInfo)">
            <summary>
            Gets the date/time format that is associated with the specified culture.
            </summary>
            <param name="culture">The culture for which to get the date/time format.</param>
            <returns>
            A <see cref="T:System.String"/> representing the date/time format associated with
            the specified culture.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DateConverter.IsLongDatePatternCulture(System.Globalization.CultureInfo)">
            <summary>
            Determines whether the specified culture is one of the cultures for which we need to
            apply the long date pattern instead of the short date pattern.
            </summary>
            <param name="culture">The culture.</param>
            <returns>
            <see langword="true"/>, if the culture is one of those for which we need to apply the
            long date pattern; <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DateConverter.HarmonizedCulture">
            <summary>
            Gets the culture corresponding to the Harmonized Date format.
            </summary>
            <remarks>
            This property can be used as the <see cref="P:System.Windows.Data.Binding.ConverterCulture"/> for bindings
            using this converter, causing dates to be formatted correctly according to the
            "dd-MMM-yyyy" format.<br/>
            <see href="http://wiki.best.ms.philips.com/wiki/index.php?title=PresentationToolkit/Design/Date_and_Time"/>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DateConverter.DefaultCulture">
            <summary>
            Gets or sets the default culture to be used in presentation toolkit components and other
            users of this converter which abides by the user specified default.
            </summary>
            <remarks>
            By default, <see cref="P:Philips.Platform.Presentation.Controls.DateConverter.HarmonizedCulture"/> is used for formatting dates; however, to
            provide a way to change the default in the presentation toolkit components and other
            users of this converter, this property can be used to explicitly override the default.
            <br/>Unless there is a good reason to do so, this should not be changed from its default
            value.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.DivideConverter">
            <summary>
            A custom converter that can be used to divide a value (the <b>dividend</b>
            or <b>numerator</b>) by another value (the <b>divisor</b> or <b>denominator</b>).
            </summary>
            <remarks>
            <para>
            The <c>DivideConverter</c> class can be used to convert a double value to another
            double value which is the result of dividing the input double value by a specified
            denominator. The input double value is provided as the value argument to the
            <see cref="M:Philips.Platform.Presentation.Controls.DivideConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> method. The denominator is set via the <see cref="P:Philips.Platform.Presentation.Controls.DivideConverter.Denominator"/>
            property.
            </para>
            <para>
            For the time being, this converter only handles double values. This means that it only
            accepts double input values, and the result of the conversion will also be a double,
            or <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the division cannot be performed.
            </para>
            </remarks>
            <example>
            The following example shows how the <see cref="T:Philips.Platform.Presentation.Controls.DivideConverter"/> can be used.
            Here, the converter is used to calculate the center of the grid.
            <code lang="xaml">
            <![CDATA[
            <Style.Resources>
                <ptc:DivideConverter x:Key="DivideConverter" Denominator="-2"/>
            </Style.Resources>
            
            <Grid.RenderTransform>
               <TransformGroup>
                   <TranslateTransform
                       X="{
                           Binding Path=ActualWidth,
                           Converter={StaticResource DivideConverter},
                           RelativeSource={RelativeSource Self}
                       }" 
                       Y="{
                           Binding Path=ActualHeight,
                           Converter={StaticResource DivideConverter},
                           RelativeSource={RelativeSource Self}
                       }"
                   />
                   </TransformGroup>
               </Grid.RenderTransform>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.DivideConverterExtension">DivideConverterExtension Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DivideConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value, which acts as the numerator of a division operation,
            by the <see cref="P:Philips.Platform.Presentation.Controls.DivideConverter.Denominator"/>.
            </summary>
            <param name="value">The value to divide, i.e., the numerator.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The is not used.</param>
            <param name="culture">The culture is not used.</param>
            <returns>
            The result of the division; or <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the
            division cannot be performed. In case of a division by zero, this conversion method
            returns <see cref="F:System.Double.PositiveInfinity"/>, in accordance with
            <see href="http://stackoverflow.com/questions/4609698/inconsistency-in-divide-by-zero-behavior-between-different-value-types"/>.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DivideConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Attempts to convert the specified value back.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DivideConverter.Denominator">
            <summary>
            Gets or sets the denominator value, which divides the double value
            that is provided as input to the <see cref="M:Philips.Platform.Presentation.Controls.DivideConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> method.
            </summary>
            <remarks>
            By default, the value of the denominator is 1.0.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.DockToSideConverter">
            <summary>
            Converts a <see cref="T:System.Windows.Controls.Dock"/> to a <see cref="T:Philips.Platform.Presentation.Controls.Side"/>, and vice versa.
            </summary>
            <example>
            The following example shows how a <c>DockToSideConverter</c> can be used to convert
            a <see cref="T:System.Windows.Controls.Dock"/> value to a <see cref="T:Philips.Platform.Presentation.Controls.Side"/> value. This example uses the more
            convenient way of addressing the converter in XAML by making use of the
            <see cref="T:Philips.Platform.Presentation.Controls.DockToSideConverterExtension"/>.
            <code lang="xaml">
            <![CDATA[
            <Style x:Key="ToolBarContainerStyle" TargetType="{x:Type ptc:ToolBarContainer}">
                <Setter Property="LocationHintSide"
                    Value="{Binding
                        Path=(DockPanel.Dock),
                        RelativeSource={RelativeSource Self},
                        Converter={ptc:DockToSideConverter}}"/>
            </Style>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:System.Windows.Controls.Dock">Dock Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.Side">Side Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.DockToSideConverterExtension">DockToSideConverterExtension Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DockToSideConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value, which should be a <see cref="T:System.Windows.Controls.Dock"/>, 
            to a <see cref="T:Philips.Platform.Presentation.Controls.Side"/>.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use (currently ignored).</param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            The <see cref="T:Philips.Platform.Presentation.Controls.Side"/> value which corresponds to the specified <see cref="T:System.Windows.Controls.Dock"/>
            value; or <see cref="F:Philips.Platform.Presentation.Controls.Side.Left"/> in case no proper conversion can be carried out.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DockToSideConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value, which should be a <see cref="T:Philips.Platform.Presentation.Controls.Side"/>, 
            to a <see cref="T:System.Windows.Controls.Dock"/>.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use (currently ignored).</param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            The <see cref="T:System.Windows.Controls.Dock"/> value which corresponds to the specified <see cref="T:Philips.Platform.Presentation.Controls.Side"/>
            value; or <see cref="F:System.Windows.Controls.Dock.Left"/> in case no proper conversion can be carried out.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.DoubleToDurationConverter">
            <summary>
            Converts a double value which represents a duration in milliseconds to a <see cref="T:System.Windows.Duration"/> value.
            </summary>
            <remarks>
            This converter converts a value in milliseconds to a duration. The value is
            assumed to be a double and positive.
            </remarks>
            <example>
            The following example shows how the <see cref="T:Philips.Platform.Presentation.Controls.DoubleToDurationConverter"/> can be used.
            Here, the converter is used to bind the animation speed of an expanding rectangle
            to the width of another element.
            <code lang="xaml">
            <![CDATA[
            <Rectangle x:Name="targetRectangle
                Width=400/>
            <Rectangle x:Name="rectangle"
                Width="0">
                <Rectangle.Triggers>
                    <EventTrigger RoutedEvent="Rectangle.Loaded">
                        <BeginStoryboard>
                            <Storyboard TargetName="rectangle"
                                RepeatBehavior="Forever">
                                <DoubleAnimation
                                    Storyboard.TargetProperty="Width"
                                    From="0" To="{Binding ActualWidth, ElementName=targetRectangle}"
                                    Duration="{
                                        Binding ActualWidth,
                                        ElementName=targetRectangle,
                                        Converter={ptc:DoubleToDurationConverter}}"/>
                            </Storyboard>
                        </BeginStoryboard>
                     </EventTrigger>
                </Rectangle.Triggers>
             </Rectangle>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:System.Windows.Duration">Duration Struct</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleToDurationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value into a duration, assuming the value is in milliseconds and positive.
            </summary>
            <param name="value">
            The value produced by the binding source.
            This value must be a positive double.
            </param>
            <param name="targetType">
            The type of the binding target property (ignored).
            </param>
            <param name="parameter">
            The converter parameter to use (ignored).
            </param>
            <param name="culture">
            The culture to use in the converter (ignored).
            </param>
            <returns>
            This method returns
            <list type="bullet">
              <item>
                 <term><see cref="F:System.Windows.DependencyProperty.UnsetValue"/></term>
                 <description>If the value is <see langword="null"/>.</description>
              </item>
              <item>
                 <term><see cref="F:System.Windows.DependencyProperty.UnsetValue"/></term>
                 <description>If the value is not a double.</description>
              </item>
              <item>
                <term><see cref="F:System.Windows.DependencyProperty.UnsetValue"/></term>
                <description>If the value is a negative double.</description>
             </item>
             <item>
                <term>A <see cref="T:System.Windows.Duration"/>.</term>
                <description>If the provided value is a positive double.</description>
             </item>
            </list>
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleToDurationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Attempts to convert the specified value back.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.EnumDescriptionConverter">
            <summary>
            Converts enumeration values to strings that can be presented in the user interface.
            </summary>
            <remarks>
            This converter converts enumeration values to the descriptions that are associated
            with the enumeration values through the <see cref="T:System.ComponentModel.DescriptionAttribute"/>. This allows
            enumeration values to be presented in the user interface in a way that differs from
            the raw enumeration value, which is often too technical to present to a user.
            </remarks>
            <example>
            The following example shows how a <c>EnumDescriptionConverter</c> can be used to convert an
            enumeration value to its description. This example uses the more convenient way of
            addressing the converter in XAML by making use of the
            <see cref="T:Philips.Platform.Presentation.Controls.EnumDescriptionConverterExtension"/>.
            <code lang="xaml">
            <![CDATA[
            <Label Content="{Binding SomeEnumProperty, Converter={ptc:EnumDescriptionConverter}}"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:System.Enum">Enumeration Base Class</seealso>
            <seealso cref="T:System.ComponentModel.DescriptionAttribute">DescriptionAttribute Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.EnumDescriptionConverterExtension">EnumDescriptionConverterExtension Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.EnumDescriptionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value, which should be of type <see cref="T:System.Enum"/>,
            to a string corresponding to the <see cref="T:System.ComponentModel.DescriptionAttribute"/> of the
            enumeration value (if any).
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use (currently ignored).</param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            The converted value, if the value is indeed an <see cref="T:System.Enum"/>;
            or <see cref="F:System.String.Empty"/>, otherwise, to indicate that the specified value does
            not represent a valid enumeration value. Also returns <see cref="F:System.String.Empty"/> if
            the enumeration value does not have a <see cref="T:System.ComponentModel.DescriptionAttribute"/> associated
            with it.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.EnumDescriptionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.EnumDescriptionConverter.GetEnumDescription(System.Enum)">
            <summary>
            Gets the description for the specified enumeration value.
            </summary>
            <param name="enumValue">The enumeration value.</param>
            <returns>
            A string representing the <see cref="T:System.ComponentModel.DescriptionAttribute"/> associated with
            the specified enumeration value; or <see cref="F:System.String.Empty"/> if no such
            attribute is associated with the enumeration value.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.EnumToBooleanConverter">
            <summary>
            Converts enumeration values to Boolean.
            </summary>
            <remarks>
            This converter can be used to convert an enumeration value to a Boolean. This can
            be used, for example, to determine if a user interface should element be enabled,
            checked, visible, etc., depending on the value of an enumeration type that is bound to
            the user interface element. The enumeration value to convert is provided as the <b>value</b>
            argument of the <b>Convert</b> method, and the enumeration value to compare with is
            provided as the <b>parameter</b> argument of the <b>Convert</b> method. The result is
            <see langword="true"/> if and only if the two enumeration values are equal.
            </remarks>
            <example>
            The following example shows how a <c>EnumToBooleanConverter</c> can be used to convert an
            enumeration value to a Boolean. This example uses the more convenient way of addressing
            the converter in XAML by making use of the <see cref="T:Philips.Platform.Presentation.Controls.EnumToBooleanConverterExtension"/>.
            <code lang="xaml">
            <![CDATA[
            <CheckBox IsChecked="{Binding SomeEnumProperty, Converter={ptc:EnumToBooleanConverter}}"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:System.Enum">Enumeration Base Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.EnumToBooleanConverterExtension">EnumToBooleanConverterExtension Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.EnumToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value, which should be of type <see cref="T:System.Enum"/>,
            to a Boolean corresponding to whether the specified value is equal
            to the specified parameter.
            </summary>
            <param name="value">The enumeration value to convert.</param>
            <param name="targetType">
            The type of the binding target property (currently ignored).
            </param>
            <param name="parameter">The enumeration value to compare with.</param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            <see langword="true"/>, if <paramref name="value"/> is equal to
            <paramref name="parameter"/>.
            <see langword="false"/>, if <paramref name="value"/> is not equal to
            <paramref name="parameter"/>.
            <see langword="false"/>, if <paramref name="value"/> is <see langword="null"/>.
            <see langword="false"/>, if <paramref name="value"/> is not an enumeration value.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.EnumToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts back a nullable Boolean value (which indicates whether the enum value 
            in the given parameter is selected) to the corresponding enum value.
            When the bool value is false, the conversion returns Binding.DoNothing. 
            Which means that the enum value is not selected
            so nothing is done for the Binding (The model's value is not affected).
            </summary>
            <param name="value">
            A nullable Boolean indicating whether or not the specified <paramref name="parameter"/>
            is selected.
            </param>
            <param name="targetType">
            The type of the binding target property (currently ignored).
            </param>
            <param name="parameter">
            The enumeration value to convert to, in case the specified <paramref name="value"/>
            is <see langword="true"/>.
            </param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            The enumeration value specified by <paramref name="parameter"/>, if the specified
            <paramref name="value"/> is <see langword="true"/>.
            <see cref="F:System.Windows.Data.Binding.DoNothing"/>, if the specified <paramref name="value"/>
            is <see langword="false"/>.
            <see cref="F:System.Windows.Data.Binding.DoNothing"/>, if the specified <paramref name="value"/>
            is <see langword="null"/>.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ExpressionConverter">
            <summary>
            Converts a simple mathematical expression to an integer or a double value (depending on
            whether the result of calculating the mathematical expression can be expressed as an
            integer, or needs to be expressed as a double).
            </summary>
            <remarks>
            <para>
            This <b>ExpressionConverter</b> can be used to implement simple mathematical expressions
            in XAML. It does so by accepting an input value, which should be a positive integer (or 0),
            and a simple string representation of the mathematical operation that we want to apply to
            this input value. For example, with an input value of 10, and a mathematical operation of
            "@VALUE+5", the output of the converter would be 10 + 5 = 15. Likewise, an input value of
            100 and a mathematical operation of "@VALUE/4" would yield 100 / 4 = 25.
            </para>
            <para>
            This simple expression converter currently supports the operators "+", "-", "*", "/", "%",
            and the grouping operators "(" and ")".
            </para>
            </remarks>
            <example>
            The following example shows how an <c>ExpressionConverter</c> can be used to 
            carry out a mathematical equation on a bound value. Operator order is parenthesis 
            first, then Left-To-Right (no operator precedence). Use @VALUE in your mathEquation 
            as a substitute for bound value.
            <code lang="xaml">
            <![CDATA[
            <TextBox x:Name="headerTextBox"
                Width="{Binding
                    ElementName=contentPresenter,
                    Path=ActualWidth,
                    Converter={ptc:ExpressionConverter},
                    ConverterParameter=@VALUE-30}"
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ExpressionConverterExtension">ExpressionConverterExtension Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExpressionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value by applying the specified mathematical expression to it.
            </summary>
            <param name="value">
            The specified element value in the expression. This should be a positive integer, or 0.
            </param>
            <param name="targetType">The type of the binding target property(currently 
            ignored).</param>
            <param name="parameter">The value to compare with.</param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            The calculated value of the expression, or <see cref="F:System.Windows.DependencyProperty.UnsetValue"/>
            if the string to be evaluated is not valid.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown when a non-numeric, an operator or brackets are found in the string.
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExpressionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Attempts to convert the specified value back.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExpressionConverter.EvaluateMathString(System.String@,System.Collections.Generic.List{System.Double}@,System.Int32)">
            <summary>
            Evaluates a mathematical string and keeps track of the results in a list of numbers.
            </summary>
            <param name="mathEquation">The mathematical equation to be evaluated.</param>
            <param name="numbers">Contains the operands to be evaluated.</param>
            <param name="index">
            The index of the number on which the mathematical operation is performed.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ExpressionConverter.GetNextToken(System.String)">
            <summary>
            Gets the next token from the string which represents a mathematical equation.
            </summary>
            <param name="mathEquation">The mathematical equation.</param>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.HasAncestorConverter">
             <summary>
             Tries to find whether or not a control has an ancestor of a certain type.
             </summary>
             <remarks>
             <para>
             For more information, see:
             @shoscarOff S2@101   Allow line length for URL to be longer than 100 characters.
            
             https://stackoverflow.com/questions/19645660/setting-style-based-on-existence-of-an-ancestor-type
            
             @shoscarOn S2@101
             </para>
             <para>
             This <b>HasAncestorConverter</b> can be used to detect wheter or not
             a control has a parent of a certain type in either its logical or
             visual tree.
             </para>
             </remarks>
             <example>
             The following example shows how an <c>HasAncestorConverter</c> can be used to
             change the foreground of a control depending on whether it is hosted in a toolbar.
             Note that it only searches for this parent once, on the initialization of the control.
             Therefore, this method should only be used if the condition does not change during
             runtime.
             <code lang="xaml">
             <![CDATA[
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},
                        Converter={ptc:HasAncestorConverter},
                        ConverterParameter={x:Type ToolBar}}"
                        Value="True">
                    <Setter Property = "Foreground" Value="Red"/>
                </DataTrigger>
             ]]>
             </code>
             </example>
             <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.HasAncestorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Tries to find an ancestor of a specific type exists.
            </summary>
            <param name="value">
            The specified element value in the expression. This should be a <see cref="T:System.Windows.DependencyObject"/>.
            </param>
            <param name="targetType">The type of the binding target property(currently
            ignored).</param>
            <param name="parameter">The type of the ancestor.</param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            A <see cref="T:System.Boolean"/> indicating whether an ancestor of a specific type exists.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Thrown when the specified <paramref name="parameter"/> or <paramref name="value"/>
            are not of the correct type./&gt;.
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.HasAncestorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Attempts to convert the specified value back.
            </summary>
            <remarks>Not implemented as it is not possible.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not possible).
            </exception>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.IconIdConverter">
            <summary>
            Converts an Experience Identity icon ID to its corresponding sDLS icon ID.
            </summary>
            <remarks>
            Most of the sDLS icon IDs match their Experience Identity counterparts. There are,
            however, a number of sDLS icon IDs that are different from the corresponding
            Experience Identity icon IDs. This converter allows the caller to resolve these
            mismatches by always returning the sDLS icon ID that matches the specified
            Experience Identity icon ID.
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.IconIdConverterExtension">IconIdConverterExtension Class</seealso>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.IconIdConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts an Experience Identity icon ID to its corresponding sDLS icon ID.
            </summary>
            <param name="value">
            The Experience Identity icon ID to convert. This should be a <see cref="T:System.String"/>.
            </param>
            <param name="targetType">
            The type of the binding target property (currently ignored).
            </param>
            <param name="parameter">The converter parameter to use (currently ignored).</param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            The sDLS icon ID that matches the specified Experience Identity icon ID.
            Returns <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if there is no match, or if the
            specified <paramref name="value"/> does not represent an Experience Identity icon ID.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.IconIdConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.IconIdToIsMulticolorConverter">
            <summary>
            Converter that takes an icon ID and returns whether the corresponding icon is a single
            color or a multicolor icon.
            </summary>
            <remarks>
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.IconIdToIsMulticolorConverterExtension">IconIdToIsMulticolorConverterExtension Class</seealso>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.IconIdToIsMulticolorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts an icon ID to a Boolean which indicates whether the icon corresponding to
            the icon ID is a single color or a multicolor icon.
            </summary>
            <param name="value">
            The icon ID to convert. This should be a <see cref="T:System.String"/>.
            </param>
            <param name="targetType">
            The type of the binding target property (currently ignored).
            </param>
            <param name="parameter">
            The converter parameter to use. Callers of this method should specify the
            <see cref="T:Philips.Platform.Presentation.PresentationTheme"/> here to instruct this conversion method
            whether or not the specified icon ID refers to an Experience Identity icon
            or to an sDLS icon. If this parameter is not specified, this conversion method
            assumes <see cref="F:Philips.Platform.Presentation.PresentationTheme.DesignLanguageSystemVeryDarkGray"/>.
            </param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            <see langword="true"/>, if the icon ID corresponds to a multicolor icon;
            <see langword="false"/>, if the icon ID corresponds to a single color icon;
            <see cref="F:System.Windows.DependencyProperty.UnsetValue"/>, if the icon ID does not correspond to
            any icon.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.IconIdToIsMulticolorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.InverseBooleanConverter">
            <summary>
            Converts a (nullable) Boolean to its inverse value, i.e., <see langword="true"/> to
            <see langword="false"/> and vice versa.
            </summary>
            <remarks>
            A <see langword="null"/> value is converted to <see langword="null"/> 
            (in case of a nullable Boolean).
            </remarks>
            <example>
            The following example shows how an <c>InverseBooleanConverter</c> can be used to convert
            a Boolean value to its inverse. This example uses the more convenient way of addressing
            the converter in XAML by making use of the <see cref="T:Philips.Platform.Presentation.Controls.InverseBooleanConverterExtension"/>.
            <code lang="xaml">
            <![CDATA[
            <CheckBox
                IsChecked="{Binding SomeBooleanProperty, Converter={ptc:InverseBooleanConverter}}"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.InverseBooleanConverterExtension">InverseBooleanConverterExtension Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.InverseBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value, which should be a (nullable) <see cref="T:System.Boolean"/>, 
            to its inverse value. A <see langword="null"/> is converted to <see langword="null"/>.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use (currently ignored).</param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the conversion cannot be 
            performed, <see langword="null"/> if the value is <see langword="null"/>, or the 
            inverted value otherwise.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.InverseBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value, which should be a (nullable) <see cref="T:System.Boolean"/>, 
            to its inverse value. A <see langword="null"/> is converted to <see langword="null"/>.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use (currently ignored).</param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the conversion cannot be 
            performed, <see langword="null"/> if the value is <see langword="null"/>, or the 
            inverted value otherwise.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.InverseBooleanConverter.ConvertCore(System.Object)">
            <summary>
            Converts the specified value, which should be a (nullable) <see cref="T:System.Boolean"/>, 
            to its inverse value. A <see langword="null"/> is converted to <see langword="null"/>.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <returns>
            <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the conversion cannot be 
            performed, <see langword="null"/> if the value is <see langword="null"/>, or the 
            inverted value otherwise.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.InverseBooleanToVisibilityConverter">
            <summary>
            A custom converter which converts a Boolean value to a <see cref="T:System.Windows.Visibility"/> value.
            </summary>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.InverseBooleanToVisibilityConverterExtension">InverseBooleanToVisibilityConverterExtension Interface</seealso>
            <seealso cref="T:System.Windows.Visibility">Visibility Enumeration</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.InverseBooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value to a <see cref="T:System.Windows.Visibility"/> value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use (currently ignored).</param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            This method maps <see langword="true"/> to <see cref="F:System.Windows.Visibility.Collapsed"/>,
            and <see langword="false"/> to <see cref="F:System.Windows.Visibility.Visible"/>.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.InverseBooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified <see cref="T:System.Windows.Visibility"/> value back to a Boolean value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use (currently ignored).</param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            This method maps <see cref="F:System.Windows.Visibility.Visible"/> to <see langword="false"/>, and both
            <see cref="F:System.Windows.Visibility.Collapsed"/> and <see cref="F:System.Windows.Visibility.Hidden"/> to
            <see langword="true"/>.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.InverseNullToBooleanConverter">
            <summary>
            Converts an object to a Boolean which indicates whether the object is <b>not</b> equal to
            <see langword="null"/>.
            </summary>
            <remarks>
            This converter is the counterpart of the <see cref="T:Philips.Platform.Presentation.Controls.NullToBooleanConverter"/>.
            </remarks>
            <example>
            The following example shows how an <c>InverseNullToBooleanConverter</c> can be used to
            convert a value to a Boolean indicating whether the value is equal to
            <see langword="null"/>.
            This example uses the more convenient way of addressing the converter in XAML by making
            use of the <see cref="T:Philips.Platform.Presentation.Controls.InverseNullToBooleanConverterExtension"/>.
            <code lang="xaml">
            <![CDATA[
            <Label
                Content="{
                    Binding SomePropertyThatCanBeNull,
                    Converter={ptc:InverseNullToBooleanConverter}
                }"
            />
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.InverseNullToBooleanConverterExtension">InverseNullToBooleanConverterExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.NullToBooleanConverter">NullToBooleanConverter Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.InverseNullToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value, which can be any object, to a Boolean, indicating
            whether the specified value is equal to <see langword="null"/> or not.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <param name="targetType">
            The type of the binding target property (ignored).
            </param>
            <param name="parameter">
            The converter parameter to use (ignored).
            </param>
            <param name="culture">
            The culture to use in the converter (ignored).
            </param>
            <returns>
            <see langword="true"/>, if the specified value is not equal to <see langword="null"/>;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.InverseNullToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.LogicalAndConverter">
            <summary>
            A custom multi-value converter which takes an array of Boolean values and
            converts them to the logical AND value.
            </summary>
            <remarks>
            This converter takes an array of Boolean values as its input, and returns
            <see langword="true"/> if and only if all the Boolean values in the array
            are <see langword="true"/>.
            </remarks>
            <seealso cref="T:System.Windows.Data.IMultiValueConverter">IMultiValueConverter Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.LogicalOrConverter">LogicalOrConverter Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.LogicalAndConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified values to a Boolean value.
            </summary>
            <param name="values">
            The value produced by the binding source.
            This must be an array of Boolean values.
            </param>
            <param name="targetType">
            The type of the binding target property (ignored).
            </param>
            <param name="parameter">
            The converter parameter to use (ignored).
            </param>
            <param name="culture">
            The culture to use in the converter (ignored).
            </param>
            <returns>
            This method returns
            <list type="bullet">
              <item>
                 <term><see cref="F:System.Windows.DependencyProperty.UnsetValue"/></term>
                 <description>If the provided array of values is <see langword="null"/>.</description>
              </item>
              <item>
                 <term><see cref="F:System.Windows.DependencyProperty.UnsetValue"/></term>
                 <description>If the provided array of values is empty.</description>
              </item>
              <item>
                <term><see cref="F:System.Windows.DependencyProperty.UnsetValue"/></term>
                <description>If the provided array of values has elements that are
                not Booleans.</description>
             </item>
             <item>
                <term><see langword="true"/></term>
                <description>If the provided array of values has only elements that
                are Booleans, and some of those have the value <see langword="true"/>.</description>
             </item>
             <item>
               <term><see langword="true"/></term>
               <description>If the provides array of values has only elements that
               are Booleans, and none of those have the value <see langword="true"/>.</description>
             </item>
            </list>
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.LogicalAndConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetTypes">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.LogicalOrConverter">
            <summary>
            A custom multi-value converter which takes an array of Boolean values and
            converts them to the logical OR value.
            </summary>
            <remarks>
            This converter takes an array of Boolean values as its input, and returns
            <see langword="true"/> if and only if at least one of the Boolean values in the array
            is <see langword="true"/>.
            </remarks>
            <seealso cref="T:System.Windows.Data.IMultiValueConverter">IMultiValueConverter Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.LogicalAndConverter">LogicalAndConverter Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.LogicalOrConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified values to a Boolean value.
            </summary>
            <param name="values">
            The value produced by the binding source.
            This must be an array of Boolean values.
            </param>
            <param name="targetType">
            The type of the binding target property (ignored).
            </param>
            <param name="parameter">
            The converter parameter to use (ignored).
            </param>
            <param name="culture">
            The culture to use in the converter (ignored).
            </param>
            <returns>
            This method returns
            <list type="bullet">
              <item>
                 <term><see cref="F:System.Windows.DependencyProperty.UnsetValue"/></term>
                 <description>If the provided array of values is <see langword="null"/>.</description>
              </item>
              <item>
                 <term><see cref="F:System.Windows.DependencyProperty.UnsetValue"/></term>
                 <description>If the provided array of values is empty.</description>
              </item>
              <item>
                <term><see cref="F:System.Windows.DependencyProperty.UnsetValue"/></term>
                <description>If the provided array of values has elements that are
                not Booleans.</description>
             </item>
             <item>
                <term><see langword="true"/></term>
                <description>If the provided array of values has only elements that
                are Booleans, and some of those have the value <see langword="true"/>.</description>
             </item>
             <item>
               <term><see langword="false"/></term>
               <description>If the provides array of values has only elements that
               are Booleans, and none of those have the value <see langword="true"/>.</description>
             </item>
            </list>
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.LogicalOrConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetTypes">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.MinMaxStepToDashConverter">
            <summary>
            A custom, multi-value converter which takes a number of parameters, and converts
            those values to a DoubleCollection, indicating an on-off pattern for the pen.
            This value converter calculates the pattern on the basis of the number of steps
            between a min and a max: for each step, exactly one dash is generated.
            Because a WPF StrokeDashArray (for which this value converter can be used) multiplies
            the length of the dashes by the stroke thickness, this value converter compensates
            for this effect by dividing by the same thickness.
            </summary>
            <seealso cref="T:System.Windows.Data.IMultiValueConverter">IMultiValueConverter Interface</seealso>
            <seealso cref="T:System.Windows.Media.DoubleCollection">DoubleCollection Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MinMaxStepToDashConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified values to a <see cref="T:System.Windows.Media.DoubleCollection"/> value.
            </summary>
            <param name="values">The value produced by the binding source. It should be a list
              of double values, with a length of 6:
              <item>
                <term>min</term>
                <description>The minimum value of the control</description>
              </item>
              <item>
                <term>max</term>
                <description>The maximum value of the control</description>
              </item>
              <item>
                <term>steps</term>
                <description>
                  The step size value. The number of steps/drawn dashes is (max-min)/step.
                </description>
              </item>
              <item>
                <term>length</term>
                <description>The length of the control (dip).</description>
              </item>
              <item>
                <term>gapLength</term>
                <description>The length of the gap between the dashes (dip).</description>
              </item>
              <item>
                <term>strokeThickness</term>
                <description>The stroke thickness (dip), needed for the compensation.</description>
              </item>
            </param>
            <param name="targetType">
            The type of the binding target property (ignored).
            </param>
            <param name="parameter">
            The converter parameter to use (ignored).
            </param>
            <param name="culture">
            The culture to use in the converter (ignored).
            </param>
            <returns>
            A DoubleCollection, with a length equal to 2 times the number of steps. It indicates
            an on-off pattern: turn on the pen for x pixels, turn off the pen for y pixels etc.
            In case the input does not conform to the expectations, the method will return
            <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> in case the value parameter does not meet
            the specifications.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MinMaxStepToDashConverter.CreateDoubleDashCollection(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a collection of doubles which represent the dashed line.
            </summary>
            <param name="dashCount">The dash count.</param>
            <param name="dashLengthPixels">The dash length in pixels.</param>
            <param name="gapLengthPixels">The gap length in pixels.</param>
            <param name="strokeThickness">The stroke thickness.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MinMaxStepToDashConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetTypes">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not possible).
            </exception>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.NullToBooleanConverter">
            <summary>
            Converts an object to a Boolean which indicates whether the object is equal to
            <see langword="null"/>.
            </summary>
            <remarks>
            This converter is the counterpart of the <see cref="T:Philips.Platform.Presentation.Controls.InverseNullToBooleanConverter"/>.
            </remarks>
            <example>
            The following example shows how a <c>NullToBooleanConverter</c> can be used to convert
            a value to a Boolean indicating whether the value is equal to <see langword="null"/>.
            This example uses the more convenient way of addressing the converter in XAML by making
            use of the <see cref="T:Philips.Platform.Presentation.Controls.NullToBooleanConverterExtension"/>.
            <code lang="xaml">
            <![CDATA[
            <Label
                Content="{
                    Binding SomePropertyThatCanBeNull,
                    Converter={ptc:NullToBooleanConverter}
                }"
            />
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.NullToBooleanConverterExtension">NullToBooleanConverterExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.InverseNullToBooleanConverter">InverseNullToBooleanConverter Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NullToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value, which can be any object, to a Boolean, indicating
            whether the specified value is equal to <see langword="null"/> or not.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <param name="targetType">
            The type of the binding target property (ignored).
            </param>
            <param name="parameter">
            The converter parameter to use (ignored).
            </param>
            <param name="culture">
            The culture to use in the converter (ignored).
            </param>
            <returns>
            <see langword="true"/>, if the specified value is equal to <see langword="null"/>;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.NullToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.OffsetConverter">
            <summary>
            A custom converter that can be used to add an offset to a value.
            </summary>
            <remarks>
            The <c>OffsetConverter</c> class can be used to add an offset to a value. Both the offset
            and the value can be positive or negative. The offset is passed as the parameter argument
            to the <see cref="M:Philips.Platform.Presentation.Controls.OffsetConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> method.
            </remarks>
            <example>
            The following example shows how the <see cref="T:Philips.Platform.Presentation.Controls.OffsetConverter"/> can be used to
            set the maximum value of a <see cref="T:System.Windows.Controls.Slider"/>. This example uses the more convenient
            way of addressing the converter in XAML by making use of the
            <see cref="T:Philips.Platform.Presentation.Controls.OffsetConverterExtension"/>.
            <code lang="xaml">
            <![CDATA[
            <Slider>
                <Slider.Maximum>
                    <Binding
                        Path="SliderValue"
                        ElementName="sliderValueSelector"
                        Converter="{ptc:OffsetConverter}">
                        <Binding.ConverterParameter>
                            <sys:Int32>-1</sys:Int32>
                        </Binding.ConverterParameter>
                    </Binding>
                </Slider.Maximum>
            </Slider>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.OffsetConverterExtension">OffsetConverterExtension Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.OffsetConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts an integer to its value plus the specified offset.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The offset that will be added to the value.</param>
            <param name="culture">The culture to use in the converter. Currently ignored.</param>
            <returns>
            The converted value, or <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the specified
            value or parameter is not an integer.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.OffsetConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Attempts to convert the specified value back.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PairwiseOrConverter">
            <summary>
            Converts an array of Booleans to a single Boolean value, which equals the disjunction of
            the conjunction of successive pairs in the array. The conversion in the other direction
            is not supported.
            </summary>
            <remarks>
            The <c>PairwiseOrConverter</c> class can be used to check if among a group of Boolean pairs,
            there exists a pair for which both its Boolean values are <see langword="true"/>.
            </remarks>
            <example>
            <para>
            The following example shows how the <see cref="T:Philips.Platform.Presentation.Controls.PairwiseOrConverter"/> can be used to
            set the IsChecked property of a <see cref="T:Philips.Platform.Presentation.Controls.SplitToggleButton"/>. For the SplitToggleButton
            to be checked one of the <see cref="T:Philips.Platform.Presentation.Controls.SplitButtonItem">SplitButtonItems</see> needs to be
            both checked and selected. The SplitToggleButtonBehavior ensures that the converter is
            evaluated on every click of the button.
            </para>
            <para>
            This example uses the more convenient way of addressing the converter in XAML by making
            use of the <see cref="T:Philips.Platform.Presentation.Controls.PairwiseOrConverterExtension"/>.
            </para>
            <code lang="xml">
            <![CDATA[
            <ptc:SplitToggleButton x:Name="exampleSplitToggleButton"
                Style="{DynamicResource SplitToggleButtonStyle}"
                ptc:SplitToggleButtonBehavior.UpdateTargetOnClick="True">
                <ptc:SplitToggleButton.IsChecked>
                    <MultiBinding Converter="{ptc:PairwiseOrConverter}" Mode="OneWay">
                        <Binding ElementName="splitButtonItem1" Path="DataContext.IsChecked"/>
                        <Binding ElementName="splitButtonItem1" Path="IsSelected"/>
                        <Binding ElementName="splitButtonItem2" Path="DataContext.IsChecked"/>
                        <Binding ElementName="splitButtonItem2" Path="IsSelected"/>
                    </MultiBinding>
                </ptc:SplitToggleButton.IsChecked>
                <ptc:SplitButtonItem x:Name="splitButtonItem1"
                    DataContext="{Binding CurrentTask.AnnotationsTool.LineAnnotationCommand}">
                </ptc:SplitButtonItem>
                <ptc:SplitButtonItem x:Name="splitButtonItem2"
                    DataContext="{Binding CurrentTask.AnnotationsTool.CircleROIAnnotationCommand}">
                </ptc:SplitButtonItem>
            </ptc:SplitToggleButton>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IMultiValueConverter">IMultiValueConverter Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PairwiseOrConverterExtension">PairwiseOrConverterExtension Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PairwiseOrConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts an array of booleans to a single boolean value, which equals the disjunction of
            the conjunction of successive pairs in the array.
            </summary>
            <param name="values">The value to convert.</param>
            <param name="targetType">The type of the binding target property (ignored).</param>
            <param name="parameter">The converter parameter to use (ignored).</param>
            <param name="culture">The culture to use in the converter (ignored).</param>
            <returns>
            <see langword="true"/>, if one of the pairs of the array holds true for both its values;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PairwiseOrConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Conversion from a single boolean value to an array of booleans is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PairwiseOrConverter.VerifyPreconditionsForConversion(System.Object[])">
            <summary>
            Verifies that the preconditions for doing the conversion are met.
            </summary>
            <param name="values">The values to convert.</param>
            <returns>
            <see langword="true"/>, if the preconditions for conversion are met;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PictorialDataTypeToIconConverter">
            <summary>
            Represents an <see cref="T:System.Windows.Data.IValueConverter"/> that converts a
            <see cref="T:Philips.Platform.Presentation.Controls.PictorialDataType"/> to its corresponding icon (image).
            </summary>
            <remarks>
            This converter can be used in combination with its markup extension, which makes it easy
            to create an instance of this converter in XAML code.
            </remarks>
            <example>
            The following example shows how to use the <b>PictorialDataTypeToIconConverter</b> with the
            <b>PictorialDataTypeToIconConverterExtension</b> inside a binding. By default, the icon that
            will be produced by the converter is an Experience Identity icon.
            <code lang="xaml">
            <![CDATA[
            <Image
                Source="{Binding
                    SomePictorialDataTypeValue,
                    Converter={pt:PictorialDataTypeToIconConverter}
                }"/>
            ]]>
            </code>
            </example>
            <example>
            The following example shows how to use the <b>PictorialDataTypeToIconConverter</b> with the
            <b>PictorialDataTypeToIconConverterExtension</b> inside a binding to produce an icon for
            the sDLS Very Dark Gray theme.
            <code lang="xaml">
            <![CDATA[
            <Image
                Source="{Binding
                    SomePictorialDataTypeValue,
                    Converter={pt:PictorialDataTypeToIconConverter},
                    ConverterParameter={x:Static pt:PresentationTheme.DesignLanguageSystemVeryDarkGray}
                }"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialDataType">PictorialDataType Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialDataTypeToIconConverterExtension">PictorialDataTypeToIconConverterExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatusToIconConverter">PictorialExportStatusToIconConverter Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatusToIconConverter">PictorialMediaStatusToIconConverter Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatusToIconConverter">PictorialPrintStatusToIconConverter Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PictorialDataTypeToIconConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value, which should be of type <see cref="T:Philips.Platform.Presentation.Controls.PictorialDataType"/>,
            to an <see cref="T:System.Windows.Media.ImageSource"/> corresponding to the pictorial data type.
            </summary>
            <param name="value">
            The value provided by the binding source.
            Should be of type <see cref="T:Philips.Platform.Presentation.Controls.PictorialDataType"/>.
            </param>
            <param name="targetType">
            The type of the binding target property (currently ignored).
            </param>
            <param name="parameter">
            The converter parameter to use. The converter parameter represents the
            <see cref="T:Philips.Platform.Presentation.PresentationTheme"/> for which this converter must produce an icon.
            If this parameter is not specified, by default this converter will produce an Experience
            Identity icon. If this parameter is set to one of the sDLS presentation themes, this
            converter will produce an sDLS icon.
            </param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            The converted value, which is an <see cref="T:System.Windows.Media.ImageSource"/> if the conversion can be done;
            or <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the conversion cannot be done.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PictorialDataTypeToIconConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PictorialExportStatusToIconConverter">
            <summary>
            A value converter that converts a <see cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatus"/> to an icon that
            represents this value in the user interface.
            </summary>
            <remarks>
            This converter can be used in combination with its markup extension, which makes it easy
            to create an instance of this converter in XAML code.
            </remarks>
            <example>
            The following example shows how to use the <b>PictorialExportStatusToIconConverter</b> with
            the <b>PictorialExportStatusToIconConverterExtension</b> inside a binding:
            <code lang="xaml">
            <![CDATA[
            <Image
                Source="{Binding
                    SomePictorialExportStatusValue,
                    Converter={pt:PictorialExportStatusToIconConverter}
                }"/>
            ]]>
            </code>
            </example>
            <example>
            The following example shows how to use the <b>PictorialExportStatusToIconConverter</b> with
            the <b>PictorialExportStatusToIconConverterExtension</b> inside a binding to produce an icon
            for the sDLS Very Dark Gray theme.
            <code lang="xaml">
            <![CDATA[
            <Image
                Source="{Binding
                    SomePictorialExportStatusValue,
                    Converter={pt:PictorialExportStatusToIconConverter},
                    ConverterParameter={x:Static pt:PresentationTheme.DesignLanguageSystemVeryDarkGray}
                }"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatus">PictorialExportStatus Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatusToIconConverter">PictorialMediaStatusToIconConverter Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatusToIconConverter">PictorialPrintStatusToIconConverter Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatusToIconConverterExtension">PictorialExportStatusToIconConverterExtension Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PictorialExportStatusToIconConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value, which should be of type <see cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatus"/>,
            to an <see cref="T:System.Windows.Media.ImageSource"/>.
            </summary>
            <param name="value">
            The value provided by the binding source.
            Should be of type <see cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatus"/>.
            </param>
            <param name="targetType">
            The type of the binding target property (currently ignored).
            </param>
            <param name="parameter">
            The converter parameter to use. The converter parameter represents the
            <see cref="T:Philips.Platform.Presentation.PresentationTheme"/> for which this converter must produce an icon.
            If this parameter is not specified, by default this converter will produce an Experience
            Identity icon. If this parameter is set to one of the sDLS presentation themes, this
            converter will produce an sDLS icon.
            </param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            The converted value, which is an <see cref="T:System.Windows.Media.ImageSource"/> if the conversion can be done;
            or <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the conversion cannot be done.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PictorialExportStatusToIconConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PictorialMediaStatusToIconConverter">
            <summary>
            A value converter that converts a <see cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatus"/> to an icon that
            represents this value in the user interface.
            </summary>
            <remarks>
            This converter can be used in combination with its markup extension, which makes it easy
            to create an instance of this converter in XAML code.
            </remarks>
            <example>
            The following example shows how to use the <b>PictorialMediaStatusToIconConverter</b> with
            the <b>PictorialMediaStatusToIconConverterExtension</b> inside a binding:
            <code lang="xaml">
            <![CDATA[
            <Image
                Source="{Binding
                    SomePictorialMediaStatusValue,
                    Converter={pt:PictorialMediaStatusToIconConverter}
                }"/>
            ]]>
            </code>
            </example>
            <example>
            The following example shows how to use the <b>PictorialMediaStatusToIconConverter</b> with
            the <b>PictorialMediaStatusToIconConverterExtension</b> inside a binding to produce an icon
            for the sDLS Very Dark Gray theme.
            <code lang="xaml">
            <![CDATA[
            <Image
                Source="{Binding
                    SomePictorialMediaStatusValue,
                    Converter={pt:PictorialExportStatusToIconConverter},
                    ConverterParameter={x:Static pt:PresentationTheme.DesignLanguageSystemVeryDarkGray}
                }"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatus">PictorialMediaStatus Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatusToIconConverter">PictorialExportStatusToIconConverter Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatusToIconConverter">PictorialPrintStatusToIconConverter Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatusToIconConverterExtension">PictorialMediaStatusToIconConverterExtension Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PictorialMediaStatusToIconConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value, which should be of type <see cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatus"/>,
            to an <see cref="T:System.Windows.Media.ImageSource"/>.
            </summary>
            <param name="value">
            The value provided by the binding source.
            Should be of type <see cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatus"/>.
            </param>
            <param name="targetType">
            The type of the binding target property (currently ignored).
            </param>
            <param name="parameter">
            The converter parameter to use. The converter parameter represents the
            <see cref="T:Philips.Platform.Presentation.PresentationTheme"/> for which this converter must produce an icon.
            If this parameter is not specified, by default this converter will produce an Experience
            Identity icon. If this parameter is set to one of the sDLS presentation themes, this
            converter will produce an sDLS icon.
            </param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            The converted value, which is an <see cref="T:System.Windows.Media.ImageSource"/> if the conversion can be done;
            or <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the conversion cannot be done.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PictorialMediaStatusToIconConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PictorialPrintStatusToIconConverter">
            <summary>
            A value converter that converts a <see cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatus"/> to an icon that
            represents this value in the user interface.
            </summary>
            <remarks>
            This converter can be used in combination with its markup extension, which makes it easy
            to create an instance of this converter in XAML code.
            </remarks>
            <example>
            The following example shows how to use the <b>PictorialPrintStatusToIconConverter</b> with
            the <b>PictorialPrintStatusToIconConverterExtension</b> inside a binding:
            <code lang="xaml">
            <![CDATA[
            <Image
                Source="{Binding
                    SomePictorialPrintStatusValue,
                    Converter={pt:PictorialPrintStatusToIconConverter}
                }"/>
            ]]>
            </code>
            </example>
            <example>
            The following example shows how to use the <b>PictorialPrintStatusToIconConverter</b> with
            the <b>PictorialPrintStatusToIconConverterExtension</b> inside a binding to produce an icon
            for the sDLS Very Dark Gray theme.
            <code lang="xaml">
            <![CDATA[
            <Image
                Source="{Binding
                    SomePictorialMediaStatusValue,
                    Converter={pt:PictorialPrintStatusToIconConverter},
                    ConverterParameter={x:Static pt:PresentationTheme.DesignLanguageSystemVeryDarkGray}
                }"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatus">PictorialPrintStatus Enumeration</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatusToIconConverter">PictorialExportStatusToIconConverter Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatusToIconConverter">PictorialMediaStatusToIconConverter Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatusToIconConverterExtension">PictorialPrintStatusToIconConverterExtension Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PictorialPrintStatusToIconConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value, which should be of type <see cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatus"/>,
            to an <see cref="T:System.Windows.Media.ImageSource"/>.
            </summary>
            <param name="value">
            The value provided by the binding source.
            Should be of type <see cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatus"/>.
            </param>
            <param name="targetType">
            The type of the binding target property (currently ignored).
            </param>
            <param name="parameter">
            The converter parameter to use. The converter parameter represents the
            <see cref="T:Philips.Platform.Presentation.PresentationTheme"/> for which this converter must produce an icon.
            If this parameter is not specified, by default this converter will produce an Experience
            Identity icon. If this parameter is set to one of the sDLS presentation themes, this
            converter will produce an sDLS icon.
            </param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            The converted value, which is an <see cref="T:System.Windows.Media.ImageSource"/> if the conversion can be done;
            or <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the conversion cannot be done.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PictorialPrintStatusToIconConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.RadiansToDegreesConverter">
            <summary>
            Converts radians to degrees (and vice versa).
            </summary>
            <remarks>
            This converter converts radians to degrees, and vice versa. The converter parameter can be
            used to specify whether the conversion must be performed modulo 360° (2π). If so, the
            converted value lies in the range [0..360) or [0..2π). If not, converted values larger
            than 360° (2π) are possible.
            </remarks>
            <example>
            The following example shows how a <c>RadiansToDegreesConverter</c> can be used to convert
            radians to degrees. This example uses the more convenient way of addressing
            the converter in XAML by making use of the <see cref="T:Philips.Platform.Presentation.Controls.RadiansToDegreesConverterExtension"/>.
            <code lang="xaml">
            <![CDATA[
            <Label Content="{Binding AngleInRadians, Converter={ptc:RadiansToDegreesConverter}}"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:Philips.Platform.Presentation.Controls.RadiansToDegreesConverterExtension">RadiansToDegreesConverterExtension Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.RadiansToDegreesConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from radians to degrees.
            </summary>
            <param name="value">The value (in radians) to convert. Should be a double.</param>
            <param name="targetType">The type of the conversion result.</param>
            <param name="parameter">
            Flag indicating whether the conversion should be performed modulo 360 (degrees).
            If this parameter is <see langword="true"/>, the converted value
            lies in the range [0, 360), i.e., from 0 degrees up to, but not including, 360 degrees.
            If this parameter is <see langword="false"/>, the converted value
            lies in the range [0, ...), i.e., from 0 degrees upward.
            </param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            The value in degrees, converted from the value in radians;
            or <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the value is not a double.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.RadiansToDegreesConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from degrees to radians.
            </summary>
            <param name="value">The value (in degrees) to convert. Should be a double.</param>
            <param name="targetType">The type of the conversion result.</param>
            <param name="parameter">
            Flag indicating whether the conversion should be performed modulo 360 (degrees).
            If this parameter is <see langword="true"/>, the converted value
            lies in the range [0, 2π), i.e., from 0 up to, but not including, 2π.
            If this parameter is <see langword="false"/>, the converted value
            lies in the range [0, ...), i.e., from 0 upward.
            </param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            The value in radians, converted from the value in degrees.
            or <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the value is not a double.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Converters.SmallerThanConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Converters.SmallerThanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts a value. </summary>
            <returns>Visible when the parameter is smaller than the value. 
            Else Collapsed</returns>
            <param name="value">The value produced by the binding source. 
            It expects a whole number.</param>
            <param name="targetType">Not used in this converter.</param>
            <param name="parameter">The converter parameter to use. 
            The converter parameter is used for the threshold.</param>
            <param name="culture">Not used in this converter</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Converters.SmallerThanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not possible).
            </exception>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ThicknessConverter">
            <summary>
            A custom converter that can be used to convert a <see cref="T:System.Windows.Thickness"/> by specifying a
            string parameter that indicates how the thickness should be modified.
            </summary>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ThicknessConverterExtension">ThicknessConverterExtension Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value to a <see cref="T:System.Windows.Thickness"/> value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">A <see cref="T:System.String"/> specifying how the source thickness
            should be modified.</param>
            <param name="culture">The culture to use in the converter. Currently ignored.</param>
            <returns>
            The converted value, or <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the specified
            value is not a <see cref="T:System.Windows.Thickness"/>; or the original thickness if the specified parameter
            is not a <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ThicknessConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Attempts to convert the specified value back.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ThicknessConverter.TryGetPaddingValue(System.String[],System.Int32,System.Int16@)">
            <summary>
            Attempts to get the padding value for the specified index out of the array of
            padding values.
            </summary>
            <param name="paddingValues">The array of padding values, represented as strings.</param>
            <param name="index">The index.</param>
            <param name="paddingValue">The padding value. This parameter is uninitialized.</param>
            <returns>
            <see langword="true"/>, if the padding value could be retrieved;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.TimeConverter">
            <summary>
            Converts <see cref="T:System.DateTime"/> or <see cref="T:System.DateTimeOffset"/> values to strings that
            can be presented in the user interface.
            </summary>
            <remarks>
            This converter is only concerned with converting times. If you want to convert dates,
            you should use its sibling, the <see cref="T:Philips.Platform.Presentation.Controls.DateConverter"/>.
            </remarks>
            <example>
            The following example shows how a <c>TimeConverter</c> to convert the <c>DateTime</c> of
            the custom <see cref="T:Philips.Platform.Presentation.Controls.Clock"/> control. The converter uses the harmonized culture, and
            passes "False" to the <c>ConverterParameter</c> property in order to have the time displayed
            in hours and minutes only (no seconds).
            <code lang="xaml">
            <![CDATA[
            <TextBlock.Text>
                <Binding
                    Path="DateTime"
                    RelativeSource="{RelativeSource AncestorType={x:Type ptc:Clock}}"
                    Converter="{StaticResource TimeConverter}"
                    ConverterParameter="False" 
                    ConverterCulture="{x:Static ptc:TimeConverter.HarmonizedCulture}">
                </Binding>
            </TextBlock.Text>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:System.DateTime">DateTime Struct</seealso>
            <seealso cref="T:System.DateTimeOffset">DateTimeOffset Struct</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.DateConverter">DateConverter Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TimeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value, which should represent a <see cref="T:System.DateTime"/> or a
            <see cref="T:System.DateTimeOffset"/>, to a string representation which is suitable for display.
            </summary>
            <remarks>
            The specified value should be converted to a string representation using the
            "International Settings" time format as defined by UI Harmonization. The
            <paramref name="targetType"/> and the <paramref name="parameter"/> are ignored.<br/>
            Applications must explicitly set the <see cref="P:System.Windows.Data.Binding.ConverterCulture"/>
            property to the culture to be used. This must be <see cref="P:Philips.Platform.Presentation.Controls.TimeConverter.HarmonizedCulture"/> or
            an alternative format if deviation from the Standard is legitimized.
            </remarks>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter. This is used to determine whether the
            conversion should use the "HH:mm:ss" format, or the "HH:mm" format. The format including
            seconds is used if this converter parameter can be parsed as a Boolean with the value
            <see langword="true"/>. The format without seconds is used if this converter parameter
            can be parsed as a Boolean with the value <see langword="false"/>.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            The converted value, if the value is indeed a <see cref="T:System.DateTime"/> or a
            <see cref="T:System.DateTimeOffset"/>; or the (localized) string "Unknown", otherwise,
            to indicate that the specified value does not represent a valid date/time.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TimeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TimeConverter.StaticConvert(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Static version of <seealso cref="M:Philips.Platform.Presentation.Controls.TimeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/>.
            </summary>
            <param name="value">The value to convert. Must be a <see cref="T:System.DateTime"/>
            or a <see cref="T:System.DateTimeOffset"/>.</param>
            <param name="culture">The culture to use for the conversion.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TimeConverter.StaticConvert(System.Object,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Static version of <seealso cref="M:Philips.Platform.Presentation.Controls.TimeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/>.
            </summary>
            <param name="value">The value to convert. Must be a <see cref="T:System.DateTime"/>
            or a <see cref="T:System.DateTimeOffset"/>.</param>
            <param name="culture">The culture to use for the conversion.</param>
            <param name="showSeconds">Flag indicating whether the converted value must
            show seconds.</param>
            <returns>
            The converted value, if the value is indeed a <see cref="T:System.DateTime"/> or a
            <see cref="T:System.DateTimeOffset"/>; or the (localized) string "Unknown", otherwise,
            to indicate that the specified value does not represent a valid date/time.
            </returns>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.TimeConverter.HarmonizedCulture">
            <summary>
            Gets the culture corresponding to the Harmonized Time format.
            </summary>
            <remarks>
            This property can be used as the <see cref="P:System.Windows.Data.Binding.ConverterCulture"/> for bindings
            using this converter, causing times to be formatted correctly according to the
            "HH:mm:ss" format.<br/>
            <see href="http://wiki.best.ms.philips.com/wiki/index.php?title=PresentationToolkit/Design/Date_and_Time"/>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.TimeConverter.DefaultCulture">
            <summary>
            Gets or sets the default culture to be used in presentation toolkit components and other
            users of this converter which abides by the user specified default.
            </summary>
            <remarks>
            By default, <see cref="P:Philips.Platform.Presentation.Controls.TimeConverter.HarmonizedCulture"/> is used for formatting times; however, to
            provide a way to change the default in the presentation toolkit components and other
            users of this converter, this property can be used to explicitly override the default.
            <br/>Unless there is a good reason to do so, this should not be changed from its default
            value.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.TreeViewIndentationConverter">
            <summary>
            Represents an <see cref="T:System.Windows.Data.IValueConverter"/> that calculates the indentation
            of a tree view item.
            </summary>
            <remarks>
            In a <see cref="T:System.Windows.Controls.TreeView"/>, each <see cref="T:System.Windows.Controls.TreeViewItem"/> has an indentation depending
            on its nesting level in the tree view. This converter can be used to calculate the
            indentation of a tree view item in device-independent units [px]. The assumption is that
            all nesting levels use the same unit of indentation - for example, each nesting level adds
            an indentation of 12px with respect to the previous nesting level. This "unit of 
            indentation" can be communicated to the converter via the <see cref="P:Philips.Platform.Presentation.Controls.TreeViewIndentationConverter.Indentation"/>
            property.
            </remarks>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:System.Windows.Controls.TreeView">TreeView Class</seealso>
            <seealso cref="T:System.Windows.Controls.TreeViewItem">TreeViewItem Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TreeViewIndentationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value, which should be of type <see cref="T:System.Windows.Controls.TreeViewItem"/>,
            to a <see cref="T:System.Windows.Thickness"/> value where <see cref="P:System.Windows.Thickness.Left"/> expresses
            the indentation of the tree view item in device-independent units [px].
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use (currently ignored).</param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            A <see cref="T:System.Windows.Thickness"/> value expressing the indentation of the tree view item.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.TreeViewIndentationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts back the specified value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert back.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.TreeViewIndentationConverter.Indentation">
            <summary>
            Gets or sets the indentation [in px] of a tree view item with respect to
            tree view items of the previous nesting level.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ValueConverterGroup">
            <summary>
            A custom value converter that takes a list of converter and applies them one after the other
            in the order specified by the list.
            </summary>
            <remarks>
            <para>
            Sometimes, the need arises to apply multiple value converters after one another. This is
            called "chaining", "piping", or "cascading" of converters. This custom
            <b>ValueConverterGroup</b> takes care of this need. It accepts an ordered list of value
            converters, where the output of any particular value converter serves as the input for the
            next value converter in the list. It then applies these value converters in the order that
            is specified by the list.
            </para>
            <para>
            This converter does not follow the common pattern of having a
            <see cref="T:Philips.Platform.Presentation.Controls.ConverterMarkupExtension`1"/> associated with it. The reason is that a markup
            extension is introduced such that it is not necessary to define a converter as a static
            resource in a XAML file every time we need it. However, defining this particular converter
            as a static resource is inevitable because we need to specify the list of child converters.
            So, there is no way around defining the converter as a static resource (see the example
            below), and therefore a markup extension does not make much sense.
            </para>
            <para>
            This converter was inspired by the work of Gareth Evans and others which you can find in
            this StackOverflow article on
            <see href="http://stackoverflow.com/questions/2607490/is-there-a-way-to-chain-multiple-value-converters-in-xaml">chaining value converters</see>.
            </para>
            </remarks>
            <example>
            The following example illustrates how to convert a (fictional) property value of type
            <b>FooEnum</b> to a <see cref="T:System.Windows.Visibility"/> value using the <b>ValueConverterGroup</b>
            to define a cascade of <see cref="T:Philips.Platform.Presentation.Controls.EnumToBooleanConverter"/> and
            <see cref="T:System.Windows.Controls.BooleanToVisibilityConverter"/>. First, we need to set up the cascading value
            converter group as a static resource. As you can see, the <b>ValueConverterGroup</b> takes
            an ordered list of child converters. Second, we use the resulting cascading converter to
            accept a property value of type <b>FooEnum</b>. This value is first converted to a Boolean
            by the <b>EnumToBooleanConverter</b>, which returns <see langword="true"/> if and only if
            the property value matches the expected enum value defined as the converter parameter.
            The Boolean that is produced in this way is picked up by the second converter, which
            converts it to a <b>Visibility</b> value.
            </example>
            <code lang="xml">
            <![CDATA[
              <pt:ValueConverterGroup x:Key="EnumToVisibilityConverter">
                  <pt:EnumToBooleanConverter/>
                  <BooleanToVisibilityConverter/>
              </pt:ValueConverterGroup>
              ...
              <Button x:Name="button"
                  Visibility="{Binding FooEnumProperty,
                      Converter={StaticResource EnumToVisibilityConverter},
                      ConverterParameter={x:Static FooEnum.BarValue}
                  }"/>
            ]]>
            </code>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:System.Collections.Generic.List`1">List&lt;T&gt; Class</seealso>
            <seealso href="http://stackoverflow.com/questions/2607490/is-there-a-way-to-chain-multiple-value-converters-in-xaml">Is there a way to chain multiple value converters in XAML?</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ValueConverterGroup.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>
            It is assumed that the list of child converters is valid, in the sense that the output
            value of any child converter matches the expected input value of the next converter in
            the list. The validity of the chain of child converters is not checked or enforced by
            this method, as it is considered to be a programming error if this condition is not met.
            </remarks>
            <param name="value">
            The value produced by the binding source. This value should match the expected type
            of the value of the first converter in the list of child converters.
            </param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            The value that is the result of applying the list of child converters of this value
            converter group one after the other in the order that is specified by the list.
            The return value matches the return type of the last converter in the list of
            child converters.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ValueConverterGroup.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ValueToBracketedValueConverter">
            <summary>
            Converts a value to a value between brackets, and prefixed with a space, so that it
            can be appended to a string.
            </summary>
            <remarks>
            <para>
            The Experience Identity defines that, if the row details of a list are expanded,
            the operations (i.e., applications) shown on the buttons in the row details are appended
            with the number of selected rows on which they act. For example, if two rows are selected,
            and a "View" operation is defined, then the row details should show "View (2)", to
            indicate that two items can be viewed. If only one item is selected, the display of the
            operation is kept simple, and instead of "View (1)" we simply show "View".
            </para>
            <para>
            This converter addresses this display problem in a generic way. It assumes that the string
            representing the operation ("View", "Print", "Report", etc.) is available and needs to be
            appended with the number of selected items, between brackets. This converter accepts the
            value to put between brackets as the value parameter of the <see cref="M:Philips.Platform.Presentation.Controls.ValueToBracketedValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> method.
            It accepts the opening bracket to use as the converter parameter of the <b>Convert</b>
            method. This converter finds the matching closing bracket, provided that the opening
            bracket is one of { "(", "[", "{", "&lt;", "«", "‹", "〈", "《", "「", "『", "【",
            "〔", "〖", "〘", "〚", "（", "［", "｛". The set of accepted opening brackets
            includes brackets used in East-Asian languages, including full-width versions of
            the normal (round) bracket, the square bracket, and the curly bracket. 
            </para>
            <para>
            This converter works by passing the selected items count as value to the 
            <see cref="M:Philips.Platform.Presentation.Controls.ValueToBracketedValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> method, and the opening bracket as parameter.
            </para>
            </remarks>
            <example>
            The following example shows how a <c>ValueToBracketedValueConverter</c> can be used to
            convert a value to a bracketed value. This example uses the more convenient way of
            addressing the converter in XAML by making use of the
            <see cref="T:Philips.Platform.Presentation.Controls.ValueToBracketedValueConverterExtension"/>.
            <code lang="xaml">
            <![CDATA[
            <Label Content="{
                Binding SomeStringProperty,
                Converter={ptc:ValueToBracketedValueConverter},
                ConverterParameter='('
            }"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ValueToBracketedValueConverterExtension">ValueToBracketedValueConverterExtension Class</seealso>
            <seealso href="http://en.wikipedia.org/wiki/Bracket">Bracket (Wikipedia)</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Controls.ValueToBracketedValueConverter.brackets">
            <summary>
            Defines the recognized bracket pairs.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ValueToBracketedValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value, which represents the selected items count, and the
            parameter, which represents the opening bracket to use, and combines them into one
            user interface text.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            The converted value, or <see cref="F:System.String.Empty"/> if the specified value is
            <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ValueToBracketedValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            The data binding engine calls this method when it propagates a value from the binding 
            target to the binding source. This method is not implemented.
            </summary>
            <remarks>Not implemented as it is not required.</remarks>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <exception cref="T:System.NotImplementedException">
            Thrown because converting back is currently not implemented (it is not required).
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ValueToBracketedValueConverter.ConvertToBracketedValue(System.Object,System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value to a bracketed value, using the specified opening bracket
            and matching closing bracket, if any.
            </summary>
            <param name="value">The value to put between brackets.</param>
            <param name="openingBracket">The opening bracket to use.</param>
            <param name="culture">The culture.</param>
            <returns>
            The specified value between brackets, prefixed with a space; or the specified value
            (as a string) if the specified opening bracket is <see langword="null"/> or
            <see cref="F:System.String.Empty"/>. It no matching closing bracket can be found, the opening
            bracket is used as closing bracket.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ValueToBooleanConverter">
             <summary>
             Tries to convert a generic value to a Boolean. The value is compared with a parameter
             to determine wheter true or false should returned.
             value if false.
             </summary>
             <remarks>
             <para>
             For more information, see:
             @shoscarOff S2@101   Allow line length for URL to be longer than 100 characters.
            
             http://geekswithblogs.net/codingbloke/archive/2010/05/28/a-generic-boolean-value-converter.aspx
            
             @shoscarOn S2@101
             </para>
             <para>
             This <b>ValueToBooleanConverter</b> can be used to compare a generic value with set values
             to determine whether true or false should be returned.
             For example, this can be used to determine whether a control is visible, by setting
             the Visibility of a control and setting the true value to Visibility.Visible and the
             false value to Visibility.Hidden.
             </para>
             <para>
             This <b>ValueToBooleanConverter</b> uses the <b>BooleanToValueConverter</b>, so it behaves
             in the exact same way, but in reverse.
             </para>
             </remarks>
             <example>
             The following example shows how an <c>ValueToBooleanConverter</c> can be used to
             disable a control based on whether or not a different control is visible.
             <code lang="xaml">
             <![CDATA[
                 <Grid.Resources>
                     <pt:ValueToBooleanConverter x:Key="VisibilityToBooleanConverter"
                         TrueValue="{x:Static Visibility.Visible}"
                         FalseValue="{x:Static Visibility.Hidden}"/>
                </Grid.Resources>
                <Button x:Name="button1"
                    IsEnabled="{Binding=Visibility,
                        ElementName="button2",
                        Converter={StaticResource VisibilityToBooleanConverter}}"/>
                <Button x:Name="button2"
                    Visibility="Visible"/>
             ]]>
             </code>
             </example>
             <example>
             The following shows how to use the <c>ValueToBooleanConverterExtension</c> inside a binding
             to hide a button when a togglebutton is checked:
             <code lang="xaml">
             <![CDATA[
             <Button
                 Visibility="{Binding
                     IsChecked,
                     ElementName=toggleButton,
                     Converter={pt:ValueToBooleanConverter
                         TrueValue={x:Static Visibility.Hidden},
                         FalseValue ={x:Static Visibility.Visible}}}"/>
             <ToggleButton x:Name="toggleButton"/>
             ]]>
             </code>
             </example>
             <seealso cref="T:Philips.Platform.Presentation.Controls.ValueToBooleanConverterExtension">ValueToBooleanConverterExtension class</seealso>
             <seealso cref="T:Philips.Platform.Presentation.Controls.BooleanToValueConverter">BooleanToValueConverter class</seealso>
             <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ValueToBooleanConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Philips.Platform.Presentation.Controls.ValueToBooleanConverter"/> class.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ValueToBooleanConverter.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Philips.Platform.Presentation.Controls.ValueToBooleanConverter"/>
            class with the specified TrueValue and FalseValue.
            </summary>
            <param name="trueValue">
            The value that will cause the converter to return a <see cref="T:System.Boolean"/>
            true (see <see cref="P:Philips.Platform.Presentation.Controls.ValueToBooleanConverter.TrueValue"/>).
            </param>
            <param name="falseValue">
            The value that will cause the converter to return a <see cref="T:System.Boolean"/>
            false (see <see cref="P:Philips.Platform.Presentation.Controls.ValueToBooleanConverter.FalseValue"/>).
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ValueToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Tries to compare the input to predetermined value, and returns the result.
            </summary>
            <param name="value">
            The specified element value in the expression. This can be any object.
            </param>
            <param name="targetType">The type of the binding target property (currently
            ignored).</param>
            <param name="parameter">The converter parameter to use (currently ignored).</param>
            <param name="culture">The culture to use in the converter (currently ignored).</param>
            <returns>
            <see langword="true"/> if the input is equal to <see cref="P:Philips.Platform.Presentation.Controls.ValueToBooleanConverter.TrueValue"/>,
            <see langword="false"/> if the input is equal to <see cref="P:Philips.Platform.Presentation.Controls.ValueToBooleanConverter.FalseValue"/>.
            Otherwise, <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> is returned.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ValueToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Tries to set a value if true, and a different value if false.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            The <see cref="P:Philips.Platform.Presentation.Controls.ValueToBooleanConverter.TrueValue"/> or <see cref="P:Philips.Platform.Presentation.Controls.ValueToBooleanConverter.FalseValue"/>, depending on whether the input
            <see cref="T:System.Boolean"/> was true or false. If the input value was <see langword="null"/> or
            not a <see cref="T:System.Boolean"/>, <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> is returned.
            </returns>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ValueToBooleanConverter.FalseValue">
            <summary>
            Gets or sets the value to return when the input Boolean is set to
            <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ValueToBooleanConverter.TrueValue">
            <summary>
            Gets or sets the value to return when the input Boolean is set to
            <see langword="true"/>.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Dls.ButtonBehavior">
            <summary>
            Exposes attached behavior to apply a custom style to a <see cref="T:System.Windows.UIElement"/>.
            By setting this property it is possible to instruct a
            button to apply a custom style to itself.
            </summary>
            <remarks>
            This behavior can be used to instruct a <see cref="T:System.Windows.UIElement"/> to apply a
            <see cref="T:System.Windows.Style"/> to its itself. This can be used,
            for example, to indicate that a button should be quiet.
            In order for this behavior to have any effect, there must be a style that
            has a trigger that responds to changes of the
            <see cref="F:Philips.Platform.Presentation.Dls.ButtonBehavior.ButtonTypeProperty"/> exposed by this behavior;
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.ButtonBehavior.GetButtonType(System.Windows.DependencyObject)">
            <summary>
            Gets the <b>ButtonType</b> property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the <see cref="F:Philips.Platform.Presentation.Dls.ButtonBehavior.ButtonTypeProperty"/> from.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="dependencyObject"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.ButtonBehavior.SetButtonType(System.Windows.DependencyObject,Philips.Platform.Presentation.Dls.ButtonType)">
            <summary>
            Sets the <b>ButtonType</b> property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the <see cref="F:Philips.Platform.Presentation.Dls.ButtonBehavior.ButtonTypeProperty"/> on.
            </param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="dependencyObject"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.ButtonBehavior.ButtonTypeProperty">
            <summary>
            Identifies the <b>ButtonTypes</b> dependency property.
            </summary>
            <remarks>
            <para>
            This property can be used to determine what type of button style should be loaded.
            </para>
            <para>
            The default value of this property is <see cref="F:Philips.Platform.Presentation.Dls.ButtonType.Secondary"/>
            </para>
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.ButtonBehavior.GetButtonListPositionType(System.Windows.DependencyObject)">
            <summary>
            Gets the <b>ButtonListPositionType</b> property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the <see cref="F:Philips.Platform.Presentation.Dls.ButtonBehavior.ButtonListPositionTypeProperty"/> from.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="dependencyObject"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.ButtonBehavior.SetButtonListPositionType(System.Windows.DependencyObject,Philips.Platform.Presentation.Dls.ButtonListPositionType)">
            <summary>
            Sets the <b>ButtonListPositionType</b> property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the <see cref="F:Philips.Platform.Presentation.Dls.ButtonBehavior.ButtonListPositionTypeProperty"/> on.
            </param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="dependencyObject"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.ButtonBehavior.ButtonListPositionTypeProperty">
            <summary>
            Identifies the <b>ButtonListPositionType</b> dependency property.
            </summary>
            <remarks>
            <para>
            This property can be used to define the position of a button within a list of buttons.
            The default value of this property is <see langword="Single"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Dls.DimLayerBehavior">
            <summary>
            Exposes attached behavior to apply background blurring to a <see cref="T:System.Windows.UIElement"/>.
            </summary>
            <remarks>
            This behavior can be used to instruct a <see cref="T:System.Windows.UIElement"/> to apply a 
            <see langword="Dim Layer"/> to its background (or, rather, to itself). This can be used,
            for example, to temporarily increase the darkness of the background window while
            a modal dialog is open,  in order to draw the user's attention to the dialog. 
            In order for this behavior to have any effect, there must be a style that has a trigger 
            that responds to changes of the  <see cref="F:Philips.Platform.Presentation.Dls.DimLayerBehavior.DimLayerTypeProperty"/> exposed by this behavior; 
            in response to this property  becoming one of the <see cref="T:Philips.Platform.Presentation.Dls.DimLayerType"/> types, 
            the style must then apply the appropriate dim-effect to the <see cref="T:System.Windows.UIElement"/>. 
            </remarks>
            <example>
            The following example shows how a root <see cref="T:System.Windows.Window"/> can be instructed to temporarily
            apply a <see cref="T:Philips.Platform.Presentation.Dls.DimLayerType"/> to its background, while a dialog is being shown on top of
            the blurred background.
            <code lang="csharp">
            <![CDATA[
            var owner = Window.GetWindow(this);
            var root = owner.GetRoot();
            DimLayerBehavior.SetDimLayerType(root, DimLayerType.Subtle);
            var dialog = new Dialog { Owner = owner };
            dialog.ShowDialog();
            DimLayerBehavior.SetDimLayerType(root, DimLayerType.None);
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.UIElement">UIElement Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Dls.DimLayerType">Modal Types</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.DimLayerBehavior.GetDimLayerType(System.Windows.DependencyObject)">
            <summary>
            Gets the value of <see cref="T:Philips.Platform.Presentation.Dls.DimLayerType"/>
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.DimLayerBehavior.SetDimLayerType(System.Windows.DependencyObject,Philips.Platform.Presentation.Dls.DimLayerType)">
            <summary>
            Sets the ModalDialog Type
            </summary>
            <param name="dependencyObject"></param>
            <param name="type"></param>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.DimLayerBehavior.DimLayerTypeProperty">
            <summary>
            Identifies the <see cref="T:Philips.Platform.Presentation.Dls.DimLayerType"/> dependency property.
            </summary>
            <remarks>
            <para>
            This property can be used to determine whether a dialog displays a 
            subtle or strong background layer. 
            </para>
            <para>
            The default value of this property is
            <see cref="T:Philips.Platform.Presentation.Dls.DimLayerType">None</see>.
            </para>
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Dls.DlsBehavior">
            <summary>
            Exposes attached behavior that is relevant for multiple sDLS controls, but is not
            relevant for Experience Identity controls.
            </summary>
            <remarks>
            <para>
            sDLS offers a richer user experience than Experience Identity. This means that some
            behaviors or visual aspects are relevant for sDLS controls, but not for their Experience
            Identity counterparts. This attached behavior class captures that.
            </para>
            <para>
            First of all, this class provides an attached property <b>BackgroundType</b>, which can be
            used to instruct a <see cref="T:System.Windows.UIElement"/> according to what <see cref="T:Philips.Platform.Presentation.Dls.BackgroundType"/>
            it should visualize itself. Dependending on the value of this property, the UI element may
            need to visualize itself differently, in conformance with the sDLS visual specifications.
            In particular, this attached property dictates what background the UI element should use.
            This is typically implemented by defining a <see cref="T:System.Windows.Trigger"/> in the UI element's style
            which responds to the value of this attached property.
            </para>
            <para>
            sDLS also dictates that, sometimes, adjacent controls should be separated by a
            <see cref="T:System.Windows.Controls.Separator"/>. For example, two adjacent <see cref="T:System.Windows.Controls.Primitives.ToggleButton"/> controls on
            a <see cref="T:System.Windows.Controls.ToolBar"/> may need to be separated by a separator under certain circumstances.
            This behavior can be governed by the <b>ShowSeparator</b> attached property provided by this
            class.
            </para>
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Dls.BackgroundType">BackgroundType Enumeration</seealso>
            <seealso cref="T:System.Windows.Controls.Separator">Separator Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.DlsBehavior.GetBackgroundType(System.Windows.DependencyObject)">
            <summary>
            Gets the <b>BackgroundType</b> property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the <see cref="F:Philips.Platform.Presentation.Dls.DlsBehavior.BackgroundTypeProperty"/> from.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="dependencyObject"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.DlsBehavior.SetBackgroundType(System.Windows.DependencyObject,Philips.Platform.Presentation.Dls.BackgroundType)">
            <summary>
            Sets the <b>BackgroundType</b> property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the <see cref="F:Philips.Platform.Presentation.Dls.DlsBehavior.BackgroundTypeProperty"/> on.
            </param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="dependencyObject"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.DlsBehavior.BackgroundTypeProperty">
            <summary>
            Identifies the <b>BackgroundType</b> dependency property.
            </summary>
            <remarks>
            <para>
            This property can be used to define the background color of a control.
            The default value of this property is <see cref="F:Philips.Platform.Presentation.Dls.BackgroundType.Default"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.DlsBehavior.GetShowSeparator(System.Windows.DependencyObject)">
            <summary>
            Gets the <b>ShowSeparator</b> property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the <see cref="F:Philips.Platform.Presentation.Dls.DlsBehavior.ShowSeparatorProperty"/> from.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="dependencyObject"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.DlsBehavior.SetShowSeparator(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the <b>ShowSeparator</b> property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the
            <see cref="F:Philips.Platform.Presentation.Dls.DlsBehavior.ShowSeparatorProperty"/> on.
            </param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="dependencyObject"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.DlsBehavior.ShowSeparatorProperty">
            <summary>
            Identifies the <b>ShowSeparator</b> dependency property.
            </summary>
            <remarks>
            <para>
            This property can be used to instruct a control to show a separator.
            A typical use case for this property is to instruct a toggle button
            to show a separator when both it and its neighbour are checked.
            </para>
            <para>
            The default value of this property is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.DlsBehavior.GetTrackAncestors(System.Windows.DependencyObject)">
            <summary>
            Gets the <b>TrackAncestors</b> property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the <see cref="F:Philips.Platform.Presentation.Dls.DlsBehavior.TrackAncestorsProperty"/> from.
            </param>
            <returns>The value of <b>TrackAncestors</b></returns>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.DlsBehavior.SetTrackAncestors(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the <b>TrackAncestors</b> property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the <see cref="F:Philips.Platform.Presentation.Dls.DlsBehavior.TrackAncestorsProperty"/> on.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.DlsBehavior.TrackAncestorsProperty">
            <summary>
            Identifies the <b>TrackAncestors</b> dependency property.
            </summary>
            <remarks>
            <para>
            This property can be used to instruct a control to track its
            ancestors every time the layout of the application is updated.
            </para>
            <para>
            The default value of this property is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.DlsBehavior.OnTrackAncestorsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in the <see cref="F:Philips.Platform.Presentation.Dls.DlsBehavior.TrackAncestorsProperty"/>.
            </summary>
            <param name="dependencyObject">
            The dependency object for which the value of this property has changed.
            </param>
            <param name="eventArgs">The event arguments.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.DlsBehavior.GetIsInOverflowPanel(System.Windows.DependencyObject)">
            <summary>
            Gets the <b>IsInOverflowPanel</b> property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="target">The object of interest.</param>
            <returns>The value of <b>IsInOverflowPanel</b></returns>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.DlsBehavior.IsInOverflowPanelKey">
             <summary>
             Identifies the <b>IsInOverflowPanel</b> dependency property.
             </summary>
             <remarks>
             <para>
             This property can be used to find out if a control is hosted
             in a toolbar overflow panel.
             </para>
             <para>
             The default value of this property is <see langword="false"/>.
             </para>
             <para>
             For more information, see:
             @shoscarOff S2@101   Allow line length for URL to be longer than 100 characters.
            
             https://stackoverflow.com/questions/36328280/wpf-toolbar-detect-when-item-is-set-into-toolbaroverflowpanel
            
             @shoscarOn S2@101
             </para>
             </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.DlsBehavior.IsInOverflowPanelProperty">
            <summary>
            Read-only attached property for the <c>IsInOverflowPanel</c> property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.DlsBehavior.OnTrackParentControlLayoutUpdated(System.Windows.UIElement)">
            <summary>
            Handles changes in the <see cref="F:Philips.Platform.Presentation.Dls.DlsBehavior.TrackAncestorsProperty"/>.
            </summary>
            <param name="element">
            The UI element that should react to a change of the layout.
            </param>
        </member>
        <member name="T:Philips.Platform.Presentation.Dls.KeyboardInteractionBehavior">
            <summary>
            Exposes attached behavior to make a <see cref="T:System.Windows.Window"/> or a <see cref="T:Philips.Platform.Presentation.Controls.Dialog"/> closable
            by pressing the <see cref="F:System.Windows.Input.Key.Escape">Escape</see> key.
            </summary>
            <seealso cref="T:System.Windows.Window">Window Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.Dialog">Dialog Class</seealso>
            <seealso cref="T:System.Windows.Input.Key">Key Enumeration</seealso>
            <seealso cref="T:System.Windows.Input.KeyEventArgs">KeyEventArgs Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.KeyboardInteractionBehavior.GetEscapeClosesWindow(System.Windows.DependencyObject)">
            <summary>
            Gets the <b>EscapeClosesWindow</b> property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <remarks>
            The value of this dependency property determines whether the user can press the
            <see cref="F:System.Windows.Input.Key.Escape">Escape</see> key to close the window.
            </remarks>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the <see cref="F:Philips.Platform.Presentation.Dls.KeyboardInteractionBehavior.EscapeClosesWindowProperty"/>
            from.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.KeyboardInteractionBehavior.SetEscapeClosesWindow(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the <b>EscapeClosesWindow</b> property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <remarks>
            The value of this dependency property determines whether the user can press the
            <see cref="F:System.Windows.Input.Key.Escape">Escape</see> key to close the window.
            </remarks>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the <see cref="F:Philips.Platform.Presentation.Dls.KeyboardInteractionBehavior.EscapeClosesWindowProperty"/> on.
            </param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.KeyboardInteractionBehavior.EscapeClosesWindowProperty">
            <summary>
            Identifies the <b>EscapeClosesWindow</b> dependency property.
            </summary>
            <remarks>
            The default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.KeyboardInteractionBehavior.OnEscapeClosesWindowChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <b>EscapeClosesWindow</b> attached property.
            </summary>
            <param name="dependencyObject">The <see cref="T:System.Windows.DependencyObject"/> that fired the event.</param>
            <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.KeyboardInteractionBehavior.OnWindowPreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.UIElement.PreviewKeyDown"/> event on the specified sender.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Philips.Platform.Presentation.Dls.PixelShaderBehavior">
            <summary>
            Exposes behavior to enable or disable the pixel shader for sDLS icons.
            </summary>
            <remarks>
            <para>
            Most sDLS icons of the first generation are single color icons that do not have an intrinsic
            color. Rather, the color of the sDLS icon is determined by its context - the control it is
            used in, the state of the control, whether the mouse hovers over the control, etc. All of
            these different color varieties are achieved by hooking up a pixel shader that recolors the
            icon according to its context of use.
            </para>
            <para>
            It is not always desirable to pass an icon image through the pixel shader to have it
            recolored. Some sDLS icons, for example, are true multicolor icons instead of single color
            icons without a "real" color. Passing these multicolor icons through the pixel shader might
            cause unwanted recoloring (depending on how smart the pixel shader implementation is). In
            order to prevent the pixel shader from doing its work, this attached behavior class provides
            a dependency property to enable or disable the pixel shader.
            </para>
            <para>
            Typically, the <b>IsPixelShaderEnabled</b> property is set on a UI element that knows
            how to handle it. This can be a <see cref="T:System.Windows.Controls.Button"/>, a <see cref="T:System.Windows.Controls.ComboBox"/>, or a
            <see cref="T:System.Windows.Controls.MenuItem"/>. When set to <see langword="false"/>, the sDLS style for the UI
            element should make sure that the pixel shader is not applied.
            </para>
            </remarks>
            <example>
            The following example shows how to disable the pixel shader for a <see cref="T:System.Windows.Controls.MenuItem"/>
            that shows a multicolor icon which does not need to be recolored by the pixel shader.
            <code lang="xaml">
              <![CDATA[
                <MenuItem x:Name="unshadedMenuItem"
                    Header="Menu item with disabled pixel shader"
                    dls:PixelShaderBehavior.IsPixelShaderEnabled="False">
                    <MenuItem.Icon>
                        <Image Source="{StaticResource DLS_SomeMulticolor_RefIcon}"/>
                    </MenuItem.Icon>
                </MenuItem>
              ]]>
            </code>
            </example>
            <seealso cref="T:Philips.Platform.Presentation.Dls.BlendEffect">BlendEffect Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.PixelShaderBehavior.GetIsPixelShaderEnabled(System.Windows.DependencyObject)">
            <summary>
            Gets the <b>IsPixelShaderEnabled</b> property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the <see cref="F:Philips.Platform.Presentation.Dls.PixelShaderBehavior.IsPixelShaderEnabledProperty"/> from.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="dependencyObject"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.PixelShaderBehavior.SetIsPixelShaderEnabled(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the <b>IsPixelShaderEnabled</b> property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the
            <see cref="F:Philips.Platform.Presentation.Dls.PixelShaderBehavior.IsPixelShaderEnabledProperty"/> on.
            </param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="dependencyObject"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.PixelShaderBehavior.IsPixelShaderEnabledProperty">
            <summary>
            Identifies the <b>IsPixelShaderEnabled</b> dependency property.
            </summary>
            <remarks>
            <para>
            This property can be used to instruct a control to apply the pixel shader to icons
            that are displayed by that control.
            </para>
            <para>
            The default value of this property is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Dls.ToggleButtonBehavior">
            <summary>
            Exposes attached behavior to apply a custom style to a <see cref="T:System.Windows.UIElement"/>.
            By setting this property it is possible to instruct a
            toggle button to apply a custom style to itself.
            </summary>
            <remarks>
            This behavior can be used to instruct a <see cref="T:System.Windows.UIElement"/> to apply a
            <see cref="T:System.Windows.Style"/> to its itself. This can be used,
            for example, to indicate that a toggle button should show a LED indicator.
            In order for this behavior to have any effect, there must be a style that
            has a trigger that responds to changes of the
            <see cref="F:Philips.Platform.Presentation.Dls.ToggleButtonBehavior.ShowLedProperty"/> exposed by this behavior;
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.ToggleButtonBehavior.GetShowLed(System.Windows.DependencyObject)">
            <summary>
            Gets the <b>ShowLed</b> property value of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to get the <see cref="F:Philips.Platform.Presentation.Dls.ToggleButtonBehavior.ShowLedProperty"/> from.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="dependencyObject"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.ToggleButtonBehavior.SetShowLed(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the <b>ShowLed</b> property of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> to set the
            <see cref="F:Philips.Platform.Presentation.Dls.ToggleButtonBehavior.ShowLedProperty"/> on.
            </param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="dependencyObject"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.ToggleButtonBehavior.ShowLedProperty">
            <summary>
            Identifies the <b>ShowLed</b> dependency property.
            </summary>
            <remarks>
            <para>
            This property can be used to instruct a toggle button to show a led
            which indicates whether the toggle button is checked or not.
            </para>
            <para>
            The default value of this property is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Dls.BackgroundType">
            <summary>
            Enumeration defining the different colors for the background of a control.
            </summary>
            <remarks>
            The background of a control depends on the zone the control is in. This zone
            can be a navigation zone or a content zone. Within a zone, different levels
            can be used to show contrast between different controls within a zone. Note
            that not every control can exist within every zone, so not all of these
            options may apply.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.BackgroundType.Default">
            <summary>
            Default: Represents the default background of a control.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.BackgroundType.NavigationPrimary">
            <summary>
            NavigationPrimary: Represents the background color for a control in a navigation zone
            at a primary (high) level.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.BackgroundType.NavigationSecondary">
            <summary>
            NavigationSecondary: Represents the background color for a control in a navigation zone
            at a secondary (low) level.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.BackgroundType.ContentPrimary">
            <summary>
            ContentPrimary: Represents the background color for a control in a content zone
            at a primary (high) level.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.BackgroundType.ContentSecondary">
            <summary>
            ContentSecondary: Represents the background color for a control in a content zone
            at a secondary (medium) level.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.BackgroundType.ContentTertiary">
            <summary>
            ContentTertiary: Represents the background color for a control in a content zone
            at a tertiary (low) level.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.BackgroundType.Transparent">
            <summary>
            Transparent: Represents the background of a control that should use the color of the
            control below it.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Dls.ButtonType">
            <summary>
            Enumeration defining the style types of buttons
            </summary>
            <seealso cref="T:System.Windows.Controls.Button">Button Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Dls.ButtonListPositionType">ButtonListPositionType Enumeration</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.ButtonType.Secondary">
            <summary>
            Secondary Button.
            </summary>
            <remarks>
            The secondary button is a rectangular button with lower visual recognition.
            Use a secondary button for actions that require less attention. More than one
            secondary button can be used within each layout area of the user interface.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.ButtonType.Accent">
            <summary>
            Accent Button. 
            </summary>
            <remarks>
            The accent button is a button with the highest visual recognition.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.ButtonType.Primary">
            <summary>
            Primary Button.
            </summary>
            <remarks>
            The primary button is a rectangular button with high visual recognition.
            It stands out and can be used to direct attention to an important action.
            For example, saving a document. We recommend using one primary button per
            layout area of the user interface.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.ButtonType.Quiet">
            <summary>
            Quiet Button.
            </summary>
            <remarks>
            The quiet button is a button without a visible background. This button
            demands the lowest visual recognition. It can be used in-line and in contexts
            where rectangular buttons  require too much visual attention. Quiet buttons
            can also be combined with primary and secondary buttons.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Dls.ButtonListPositionType">
            <summary>
            Enumeration defining the different position options for buttons in a button list.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.ButtonListPositionType.Single">
            <summary>
            Single: Represents a button in a list with only one single button.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.ButtonListPositionType.First">
            <summary>
            First: Represents the first button in a button list.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.ButtonListPositionType.InBetween">
            <summary>
            InBetween: Represents the buttons between the first and the last button
            in a button list.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.ButtonListPositionType.Last">
            <summary>
            First: Represents the last button in a button list.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Dls.DimLayerType">
            <summary>
            Enumeration defining the dim layers that emphasises the modal effect
            </summary>
            <remarks>
            The <see cref="T:Philips.Platform.Presentation.Controls.Dialog"/> control can be configured to display either a light or dark background modal effect.
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.Controls.Dialog"/>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.DimLayerType.None">
            <summary>
            Modal Dialog with a transparent background.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.DimLayerType.Subtle">
            <summary>
            Modal Dialog with a light-dark background.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.DimLayerType.Strong">
            <summary>
            Modal Dialog with a dark background
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Dls.ListViewResourceDictionary">
             <summary>
             Resources for the Design Language System <see cref="T:System.Windows.Controls.ListView"/> style.
             </summary>
             <remarks>
             This class provides resources that go with the default Design Language System style
             for the <see cref="T:System.Windows.Controls.ListView"/> control. This class defines a method to handle the
             event that the column header gripper is dragged. This way, a minumum width can be set
             on the column header, which is otherwise not possible. Also see:
            
             @shoscarOff S2@101   Allow line length for URL to be longer than 100 characters.
            
             https://stackoverflow.com/questions/10097574/how-apply-minwidth-for-listview-columns-in-wpf-in-control-template
            
             @shoscarOn S2@101
            
             </remarks>
             <seealso cref="T:System.Windows.ResourceDictionary">ResourceDictionary Class</seealso>
             <seealso cref="T:System.Windows.Controls.ListView">ListView Class</seealso>
            <summary>
            ListViewResourceDictionary
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.ListViewResourceDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Dls.BlendEffect">
            <summary>
            A shader that sets a color to a icon
            </summary>
            <seealso cref="T:System.Windows.Media.Effects.ShaderEffect">ShaderEffect Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Dls.PixelShaderBehavior">PixelShaderBehavior Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.BlendEffect.#ctor">
            <summary>
            Initializes a new <see cref="T:Philips.Platform.Presentation.Dls.BlendEffect"/> instance.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.BlendEffect.InputProperty">
            <summary>
            Identifies the <b>InputProperty</b> dependency property.
            associates the input sample with the register s1 in the shader.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.BlendEffect.ColorProperty">
            <summary>
            Identifies the <b>ColorProperty</b> dependency property. 
            The <see cref="M:System.Windows.Media.Effects.ShaderEffect.PixelShaderConstantCallback(System.Int32)"/>
            associates the color with the register <b>C0</b> in the shader.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.BlendEffect.OpacityProperty">
            <summary>
            Identifies the <b>OpacityProperty</b> dependency property. 
            The <see cref="M:System.Windows.Media.Effects.ShaderEffect.PixelShaderConstantCallback(System.Int32)"/> 
            associates the opacity with the register <b>C1</b> in the shader.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.Dls.BlendEffect.BrushProperty">
            <summary>
            Identifies the <see cref="F:Philips.Platform.Presentation.Dls.BlendEffect.BrushProperty"/> dependency property.
            This property is the only <see cref="T:System.Windows.DependencyProperty"/> 
            exposed to the user.
            A <see cref="T:System.Windows.Media.SolidColorBrush"/> is used as input. 
            By changing the brush it will assign the Color to 
            <b>ColorProperty</b> and the Opacity to 
            <b>OpacityProperty</b>. 
            </summary>
            <remarks>
            The default Color of the Brush is: "#FFFFFFFF".
            The default Opacity of the Brush is: 1 (255).
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.BlendEffect.OnBrushChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="F:Philips.Platform.Presentation.Dls.BlendEffect.BrushProperty"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Dls.BlendEffect.UpdatePixelShaderProperties(System.Windows.Media.SolidColorBrush)">
            <summary>
            Updates the properties used by the pixel shader.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.BlendEffect.Input">
            <summary>
            Gets or sets a Sample that is used by the shader.
            <remarks> 
            The Input is the 'Texture' or 'Sample' that is used by the shader.
            The Color and Opacity from the <see cref="F:Philips.Platform.Presentation.Dls.BlendEffect.BrushProperty"/> is used to apply
            the blend effect.
            </remarks>
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.BlendEffect.Color">
            <summary>
            Gets or sets a Color that is used by the shader.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.BlendEffect.Opacity">
            <summary>
            Gets or sets the Opacity that will be used in the shader.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.BlendEffect.Brush">
            <summary>
            Gets or sets the Brush. 
            </summary>
            <remarks>
            The default value of this property is "#FFFFFFFF".
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Dls.DlsCursors">
            <summary>
            Provides strongly-typed access to all the Design Language System (sDLS) cursors.
            </summary>
            <remarks>
            <para>
            This static class provides a number of static properties, one for each of the
            predefined Design Language System (sDLS) cursors. This class is based on the
            standard WPF <see cref="T:System.Windows.Input.Cursors"/> class, which provides access to the set of
            predefined WPF cursors.
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Input.Cursor">Cursor Class</seealso>
            <seealso cref="T:System.Windows.Input.Cursors">Cursors Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.ExperienceIdentityCursors">ExperienceIdentityCursors Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.PresentationTheme">PresentationTheme Enumeration</seealso>
            <seealso href="http://nlybstqvp1lx031.best.ms.philips.com/icopedia/index.php?title=Main_Page">Icopedia</seealso>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.BrightnessCursor">
            <summary>
            Gets the sDLS brightness <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.BrushCursor">
            <summary>
            Gets the sDLS brush <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.ContrastBrightnessCursor">
            <summary>
            Gets the sDLS contrast/brightness <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.ContrastBrightnessPressedCursor">
            <summary>
            Gets the sDLS pressed contrast/brightess <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.ContrastBrightnessPressedBrightnessCursor">
            <summary>
            Gets the sDLS pressed contrast/brightness brightness <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.ContrastBrightnessPressedContrastCursor">
            <summary>
            Gets the sDLS pressed contrast/brightness contrast <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.CrosshairCursor">
            <summary>
            Gets the sDLS crosshair <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.DefaultCursor">
            <summary>
            Gets the default sDLS <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.DragCursor">
            <summary>
            Gets the sDLS drag <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.DragCopyCursor">
            <summary>
            Gets the sDLS drag copy <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.DragForbiddenCursor">
            <summary>
            Gets the sDLS drag forbidden <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.DragGrabCursor">
            <summary>
            Gets the sDLS drag grab <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.EdgeEnhancementCursor">
            <summary>
            Gets the sDLS edge enhancement <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.EditCursor">
            <summary>
            Gets the sDLS edit <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.HyperlinkCursor">
            <summary>
            Gets the sDLS hyperlink <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.IBeamCursor">
            <summary>
            Gets the sDLS I-beam <see cref="T:System.Windows.Input.Cursor"/>, which is used to show where the text cursor
            appears when the mouse is clicked.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.InjectDyeCursor">
            <summary>
            Gets the sDLS inject dye <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.InjectDyeRemoveCursor">
            <summary>
            Gets the sDLS inject dye remove <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.LinkCursor">
            <summary>
            Gets the sDLS link cursor <see cref="T:System.Windows.Input.Cursor"/>, for linking data.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.LinkPressedCursor">
            <summary>
            Gets the sDLS pressed link <see cref="T:System.Windows.Input.Cursor"/> for linking data.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.MoveCursor">
            <summary>
            Gets the sDLS move <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
            <remarks>
            See also the alternative rendering <see cref="P:Philips.Platform.Presentation.Dls.DlsCursors.MoveAltCursor"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.MovePressedCursor">
            <summary>
            Gets the sDLS pressed move <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
            <remarks>
            See also the alternative rendering <see cref="P:Philips.Platform.Presentation.Dls.DlsCursors.MoveAltPressedCursor"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.MovePressedHorizontalCursor">
            <summary>
            Gets the sDLS pressed move horizontal <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.MovePressedVerticalCursor">
            <summary>
            Gets the sDLS pressed move vertical <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.MoveAltCursor">
            <summary>
            Gets the sDLS move alt <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
            <remarks>
            This is an alternative rendering of the <see cref="P:Philips.Platform.Presentation.Dls.DlsCursors.MoveCursor"/>.
            The difference is that the "alt" version has the hotspot in the center of
            the cursor instead of the top-left corner.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.MoveAltPressedCursor">
            <summary>
            Gets the sDLS move alt pressed <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
            <remarks>
            This is an alternative rendering of the <see cref="P:Philips.Platform.Presentation.Dls.DlsCursors.MovePressedCursor"/>.
            The difference is that the "alt" version has the hotspot in the center of
            the cursor instead of the top-left corner.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.MovePlaneCursor">
            <summary>
            Gets the sDLS move plane <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.MovePlanePressedCursor">
            <summary>
            Gets the sDLS move plane pressed <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.MovePlaneInPressedCursor">
            <summary>
            Gets the sDLS move plane in pressed <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.MovePlaneOutPressedCursor">
            <summary>
            Gets the sDLS move plane out pressed <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.NumberCursor">
            <summary>
            Gets the sDLS number <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.NumberPressedCursor">
            <summary>
            Gets the sDLS pressed number <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.OpacityCursor">
            <summary>
            Gets the sDLS opacity <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.OpacityPressedCursor">
            <summary>
            Gets the sDLS opacity pressed <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.OpacityAllPlanesCursor">
            <summary>
            Gets the sDLS opacity all planes <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.OpacityAllPlanesPressedCursor">
            <summary>
            Gets the sDLS opacity all planes pressed <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.OpacitySinglePlaneCursor">
            <summary>
            Gets the sDLS opacity single plane <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.OpacitySinglePlanePressedCursor">
            <summary>
            Gets the sDLS opacity single plane pressed <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.PanCursor">
            <summary>
            Gets the sDLS pan <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.PanPressedCursor">
            <summary>
            Gets the sDLS pan pressed <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.PanHorizontalPressedCursor">
            <summary>
            Gets the sDLS pan horizontal pressed <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.PanVerticalPressedCursor">
            <summary>
            Gets the sDLS pan vertical pressed <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.PointCursor">
            <summary>
            Gets the sDLS point <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.PointAddCursor">
            <summary>
            Gets the sDLS point add <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.ResizeLeftRightCursor">
            <summary>
            Gets the sDLS resize left/right <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.ResizeTopBottomCursor">
            <summary>
            Gets the sDLS resize top/bottom <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.ResizeTopLeftBottomRightCursor">
            <summary>
            Gets the sDLS resize top left/bottom right <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.ResizeTopRightBottomLeftCursor">
            <summary>
            Gets the sDLS resize top right/bottom left <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.RollHorizontalCursor">
            <summary>
            Gets the sDLS roll horizontal <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.RollVerticalCursor">
            <summary>
            Gets the sDLS roll vertical <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.RollRotateCursor">
            <summary>
            Gets the sDLS roll/rotate <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.RollRotatePressedCursor">
            <summary>
            Gets the sDLS pressed roll/rotate <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.RotatePressedClockwiseCursor">
            <summary>
            Gets the sDLS pressed rotate clockwise <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.RotatePressedCounterclockwiseCursor">
            <summary>
            Gets the sDLS pressed rotate counterclockwise <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.RotateCursor">
            <summary>
            Gets the sDLS rotate <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.RotatePressedCursor">
            <summary>
            Gets the sDLS rotate <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.RotateCornersPressedClockwiseCursor">
            <summary>
            Gets the sDLS pressed clockwise rotate corners <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.RotateCornersPressedCounterclockwiseCursor">
            <summary>
            Gets the sDLS pressed counterclockwise rotate corners <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.RotateCornersCursor">
            <summary>
            Gets the sDLS rotate corners <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.ScrollCursor">
            <summary>
            Gets the sDLS scroll <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.ScrollPressedCursor">
            <summary>
            Gets the sDLS pressed scroll <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.ScrollContinuousCursor">
            <summary>
            Gets the sDLS scroll continuous <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.ScrollContinuousPressedCursor">
            <summary>
            Gets the sDLS scroll continuous pressed <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.ScrollHorizontalCursor">
            <summary>
            Gets the sDLS scroll horizontal <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.ScrollHorizontalPressedCursor">
            <summary>
            Gets the sDLS scroll horizontal pressed <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.ScrollVerticalCursor">
            <summary>
            Gets the sDLS scroll vertical <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.ScrollVerticalPressedCursor">
            <summary>
            Gets the sDLS scroll vertical pressed <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.SizeAllCursor">
            <summary>
            Gets the four-headed sDLS sizing <see cref="T:System.Windows.Input.Cursor"/>, which consists of four joined
            arrows that point north, south, east, and west.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.SizeEWCursor">
            <summary>
            Gets sDLS size EW <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.SizeNESWCursor">
            <summary>
            Gets sDLS size NESW <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.SizeNSCursor">
            <summary>
            Gets sDLS size NS <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.SizeNWSECursor">
            <summary>
            Gets sDLS size NWSE <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.SlabThicknessPressedCursor">
            <summary>
            Gets the sDLS pressed slab thickness <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.SlabThicknessCursor">
            <summary>
            Gets the sDLS slab thickness <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.SplitHorizontalCursor">
            <summary>
            Gets the sDLS split horizontal <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.TextMoveCursor">
            <summary>
            Gets the sDLS text move <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.SplitVerticalCursor">
            <summary>
            Gets the sDLS split vertical <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.ZoomPressedInCursor">
            <summary>
            Gets the sDLS pressed zoom in <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.ZoomPressedOutCursor">
            <summary>
            Gets the sDLS pressed zoom out <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Dls.DlsCursors.ZoomCursor">
            <summary>
            Gets the sDLS zoom <see cref="T:System.Windows.Input.Cursor"/>.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.NamespaceDoc">
            <summary>
            <para>
            The WPF Presentation Toolkit is a collection of WPF controls, components, utilities,
            and styles for creating WPF applications that conform to the Experience Identity as
            defined by the <see href="https://share.philips.com/sites/STS20150717093007/SitePages/UICC/Welcome%20to%20the%20User%20Interface%20Competence%20Center.aspx">User Interface Competence Center (UICC)</see>.
            </para>
            <para>
            The WPF Presentation Toolkit provides Experience Identity styles for many out-of-the-box
            WPF controls. Additionally, it also provides a comprehensive collection of custom controls
            that are catered to the medical domain. The WPF Presentation Toolkit is highly suited to
            build clinical applications that reside on the traditional Microsoft desktop.
            </para>
            <para>
            The WPF Presentation Toolkit is part of UADE, but it does not require any other UADE
            components. This means that you can build WPF applications that meet the Experience Identity
            guidelines using only the WPF Presentation Toolkit. Of course, using the WPF Presentation
            Toolkit alongside other UADE components is also possible.
            </para>
            <para>
            The WPF Presentation Toolkit supports the <see href="https://share.philips.com/sites/STS20150717093007/SitePages/Visual%20Guide/Visual%20Guide%20Display_all.aspx?Version=V1.1">Experience Identity 1.1 (EI 1.1)</see>.
            </para>
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.BooleanToValueConverterExtension">
            <summary>
            Implements a markup extension that allows instances of <see cref="T:Philips.Platform.Presentation.Controls.BooleanToValueConverter"/>
            to be easily created.
            </summary>
            <remarks>
            <para>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.BooleanToValueConverter"/> to be easily
            created inline in a XAML binding. See the example below.
            </para>
            </remarks>
            <example>
            The following shows how to use the <c>BooleanToValueConverter</c> inside a binding
            to hide a button when a togglebutton is checked:
            <code lang="xaml">
            <![CDATA[
            <Button
                Visibility="{Binding
                    IsChecked,
                    ElementName=toggleButton,
                    Converter={pt:BooleanToValueConverter
                        TrueValue={x:Static Visibility.Hidden},
                        FalseValue ={x:Static Visibility.Visible}}}"/>
            <ToggleButton x:Name="toggleButton"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.BooleanToValueConverter">CaseConverter Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.BooleanToValueConverterExtension.#ctor">
            <summary>
            Initializes a new instance of the CaseConverterExtension class.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.BooleanToValueConverterExtension.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the BooleanToValueConverterExtension class with
            the specified <see cref="P:Philips.Platform.Presentation.Controls.BooleanToValueConverterExtension.TrueValue"/> and <see cref="P:Philips.Platform.Presentation.Controls.BooleanToValueConverterExtension.FalseValue"/>.
            </summary>
            <param name="trueValue">
            The TrueValue for the <see cref="T:Philips.Platform.Presentation.Controls.BooleanToValueConverter"/>.
            </param>
            <param name="falseValue">
            The FalseValue for the <see cref="T:Philips.Platform.Presentation.Controls.BooleanToValueConverter"/>.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.BooleanToValueConverterExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Provides an instance of <see cref="T:Philips.Platform.Presentation.Controls.BooleanToValueConverter"/> based on
            <see cref="P:Philips.Platform.Presentation.Controls.BooleanToValueConverterExtension.TrueValue"/> and <see cref="P:Philips.Platform.Presentation.Controls.BooleanToValueConverterExtension.FalseValue"/>.
            </summary>
            <param name="serviceProvider">
            An object that can provide services. Currently ignored.
            </param>
            <returns>
            The instance of <see cref="T:Philips.Platform.Presentation.Controls.BooleanToValueConverter"/>.
            </returns>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BooleanToValueConverterExtension.TrueValue">
            <summary>
            Gets or sets the trueValue <see cref="T:System.Object"/> for
            the <see cref="T:Philips.Platform.Presentation.Controls.BooleanToValueConverter"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.BooleanToValueConverterExtension.FalseValue">
            <summary>
            Gets or sets the falseValue <see cref="T:System.Object"/> for
            the <see cref="T:Philips.Platform.Presentation.Controls.BooleanToValueConverter"/>.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.BooleanToVisibilityConverterExtension">
            <summary>
            Implements a markup extension that allows instances of WPF's
            <see cref="T:System.Windows.Controls.BooleanToVisibilityConverter"/> to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of WPF's <see cref="T:System.Windows.Controls.BooleanToVisibilityConverter"/>
            to be easily created inline in a XAML binding. See the example below.
            </remarks>
            <example>
            The following shows how to use the <c>BooleanToVisibilityConverterExtension</c>
            inside a binding to convert a Boolean value to a <see cref="T:System.Windows.Visibility"/> value.
            <code lang="xaml">
            <![CDATA[
            <uiElement Visibility="{Binding
                SomeBooleanProperty,
                Converter={ptc:BooleanToVisibilityConverter}}"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:System.Windows.Controls.BooleanToVisibilityConverter">BooleanToVisibilityConverter Class</seealso>
            <seealso cref="T:System.Windows.Visibility">Visibility Enumeration</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ConverterMarkupExtension`1">
            <summary>
            A generic markup extension for converters.
            </summary>
            <remarks>
            <para>
            This class provides a generic way to construct markup extensions for converters.
            This is only relevant if your converter does not define any additional properties.
            If your converter does define additional properties, you are probably better off
            constructing your extension by deriving directly from <see cref="T:System.Windows.Markup.MarkupExtension"/>.
            </para>
            <para>
            To use this generic class, make sure that your converter is a class that has a
            default constructor, and that it implements the <see cref="T:System.Windows.Data.IValueConverter"/> interface.
            </para>
            <para>
            There is also a version of this class for single-value converters,
            see <see cref="T:Philips.Platform.Presentation.Controls.MultiValueConverterMarkupExtension`1"/>.
            </para>
            </remarks>
            <example>
            The following shows how to use this class to create a markup extension for the
            (fictional) <c>FooConverter</c>. Strictly speaking, it is not necessary to define
            the <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute"/>, but it does make the purpose
            of the extension more clear.
            <code lang="xaml">
            <![CDATA[
            [MarkupExtensionReturnType(typeof(FooConverter))]
            public sealed class FooConverterExtension :
                ConverterMarkupExtension<FooConverter>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:System.Windows.Data.IValueConverter">IValueConverter Interface</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ConverterMarkupExtension`1.ProvideValue(System.IServiceProvider)">
            <summary>
            Provides an instance of the converter that this class is an extension for.
            </summary>
            <param name="serviceProvider">
            An object that can provide services. Currently ignored.
            </param>
            <returns>
            The singleton instance of the converter that this class is an extension for.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.BooleanToVisibilityMultiValueConverterExtension">
            <summary>
            Implements a markup extension that allows instances of 
            <see cref="T:Philips.Platform.Presentation.Controls.BooleanToVisibilityMultiValueConverter"/> to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of 
            <see cref="T:Philips.Platform.Presentation.Controls.BooleanToVisibilityMultiValueConverter"/> to be easily
            created inline in a XAML binding. See the example below.
            </remarks>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.BooleanToVisibilityMultiValueConverter">
            BooleanToVisibilityMultiValueConverter Class
            </seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.MultiValueConverterMarkupExtension`1">
            <summary>
            A generic markup extension for multi-value converters.
            </summary>
            <remarks>
            <para>
            This class provides a generic way to construct markup extensions for multi-value converters.
            This is only relevant if your multi-value converter does not define any additional
            properties. If your multi-value converter does define additional properties, you are
            probably better off constructing your extension by deriving directly from
            <see cref="T:System.Windows.Markup.MarkupExtension"/>.
            </para>
            <para>
            To use this generic class, make sure that your multi-value converter is a class that has a
            default constructor, and that it implements the <see cref="T:System.Windows.Data.IValueConverter"/> interface.
            </para>
            <para>
            There is also a version of this class for single-value converters,
            see <see cref="T:Philips.Platform.Presentation.Controls.ConverterMarkupExtension`1"/>.
            </para>
            </remarks>
            <example>
            The following shows how to use this class to create a markup extension for the
            (fictional) <c>FooMultiValueConverter</c>. Strictly speaking, it is not necessary to define
            the <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute"/>, but it does make the purpose
            of the extension more clear.
            <code lang="xaml">
            <![CDATA[
            [MarkupExtensionReturnType(typeof(FooMultiValueConverter))]
            public sealed class FooMultiValueConverterExtension :
                MultiValueConverterMarkupExtension<FooMultiValueConverter>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:System.Windows.Data.IMultiValueConverter">IMultiValueConverter Interface</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ConverterMarkupExtension`1">ConverterMarkupExtension Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.MultiValueConverterMarkupExtension`1.ProvideValue(System.IServiceProvider)">
            <summary>
            Provides an instance of the multi-value converter that this class is an extension for.
            </summary>
            <param name="serviceProvider">
            An object that can provide services. Currently ignored.
            </param>
            <returns>
            The singleton instance of the multi-value converter that this class is an extension for.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.CaseConverterExtension">
            <summary>
            Implements a markup extension that allows instances of <see cref="T:Philips.Platform.Presentation.Controls.CaseConverter"/>
            to be easily created.
            </summary>
            <remarks>
            <para>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.CaseConverter"/> to be easily
            created inline in a XAML binding. See the example below.
            </para>
            <para>
            The code is based on Kent Boogaart's WPF Converters, V1.3.0.0.
            See <see href="https://github.com/kentcb/WPFConverters"/>.
            </para>
            </remarks>
            <example>
            The following shows how to use the <c>CaseConverterExtension</c> inside a binding
            to convert values to upper-case:
            <code lang="xaml">
            <![CDATA[
            <Label Content="{Binding Name, Converter={ptc:CaseConverter Upper}}"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.CaseConverter">CaseConverter Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CaseConverterExtension.#ctor">
            <summary>
            Initializes a new instance of the CaseConverterExtension class.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CaseConverterExtension.#ctor(System.Windows.Controls.CharacterCasing)">
            <summary>
            Initializes a new instance of the CaseConverterExtension class with
            the specified <see cref="P:Philips.Platform.Presentation.Controls.CaseConverterExtension.Casing"/>.
            </summary>
            <param name="casing">
            The casing for the <see cref="T:Philips.Platform.Presentation.Controls.CaseConverter"/>.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CaseConverterExtension.#ctor(System.Windows.Controls.CharacterCasing,System.Windows.Controls.CharacterCasing)">
            <summary>
            Initializes a new instance of the CaseConverterExtension class with
            the specified source and target <see cref="P:Philips.Platform.Presentation.Controls.CaseConverterExtension.Casing"/>.
            </summary>
            <param name="sourceCasing">
            The source casing for the <see cref="T:Philips.Platform.Presentation.Controls.CaseConverter"/>.
            </param>
            <param name="targetCasing">
            The target casing for the <see cref="T:Philips.Platform.Presentation.Controls.CaseConverter"/>.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.CaseConverterExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Provides an instance of <see cref="T:Philips.Platform.Presentation.Controls.CaseConverter"/> based on
            <see cref="P:Philips.Platform.Presentation.Controls.CaseConverterExtension.SourceCasing"/> and <see cref="P:Philips.Platform.Presentation.Controls.CaseConverterExtension.TargetCasing"/>.
            </summary>
            <param name="serviceProvider">
            An object that can provide services. Currently ignored.
            </param>
            <returns>
            The instance of <see cref="T:Philips.Platform.Presentation.Controls.CaseConverter"/>.
            </returns>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.CaseConverterExtension.SourceCasing">
            <summary>
            Gets or sets the source <see cref="T:System.Windows.Controls.CharacterCasing"/> for
            the <see cref="T:Philips.Platform.Presentation.Controls.CaseConverter"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.CaseConverterExtension.TargetCasing">
            <summary>
            Gets or sets the target <see cref="T:System.Windows.Controls.CharacterCasing"/> for
            the <see cref="T:Philips.Platform.Presentation.Controls.CaseConverter"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.CaseConverterExtension.Casing">
            <summary>
            Sets both the source and target <see cref="T:System.Windows.Controls.CharacterCasing"/> for
            the <see cref="T:Philips.Platform.Presentation.Controls.CaseConverter"/>.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ColorToSolidColorBrushConverterExtension">
            <summary>
            Implements a markup extension that allows instances of the
            <see cref="T:Philips.Platform.Presentation.Controls.ColorToSolidColorBrushConverter"/> class to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.ColorToSolidColorBrushConverter"/>
            to be easily created inline in a XAML binding. See the example below.
            </remarks>
            <example>
            The following shows how to use the <c>ColorToSolidColorBrushConverter</c>.
            <code lang="xaml">
            <![CDATA[
            <Rectangle x:Name="coloredRectangle"
                Fill="{Binding
                    SelectedColor,
                    RelativeSource={RelativeSource
                        Mode=FindAncestor,
                        AncestorType={x:Type ptc:ColorPicker}
                    },
                    Converter={StaticResource ColorToSolidColorBrushConverter}
                }"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ColorToSolidColorBrushConverter">ColorToSolidColorBrushConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.CompareMultiValueConverterExtension">
            <summary>
            Implements a markup extension that allows instances of <see cref="T:Philips.Platform.Presentation.Controls.CompareMultiValueConverter"/>
            to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.CompareMultiValueConverter"/> to be easily
            created inline in a XAML binding. See the example below.
            </remarks>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.CompareMultiValueConverter">CompareMultiValueConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.CompareConverterExtension">
            <summary>
            Implements a markup extension that allows instances of <see cref="T:Philips.Platform.Presentation.Controls.CompareConverter"/>
            to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.CompareConverter"/> to be easily
            created inline in a XAML binding. See the example below.
            </remarks>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.CompareConverter">CompareConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.DivideConverterExtension">
            <summary>
            Implements a markup extension that allows instances of <see cref="T:Philips.Platform.Presentation.Controls.DivideConverter"/>
            to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.DivideConverter"/> to be easily
            created inline in a XAML binding. See the example below.
            </remarks>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.DivideConverter">DivideConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.DockToSideConverterExtension">
            <summary>
            Implements a markup extension that allows instances of <see cref="T:Philips.Platform.Presentation.Controls.DockToSideConverter"/>
            to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.DockToSideConverter"/> to be easily
            created inline in a XAML binding. See the example below.
            </remarks>
            <example>
            The following shows how to use the <c>DockToSideConverterExtension</c> inside a binding:
            <code lang="xaml">
            <![CDATA[
            <Style x:Key="ToolBarContainerStyle" TargetType="{x:Type ptc:ToolBarContainer}">
                <Setter Property="LocationHintSide"
                    Value="{Binding
                        Path=(DockPanel.Dock),
                        RelativeSource={RelativeSource Self},
                        Converter={ptc:DockToSideConverter}}"/>
            </Style>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.DockToSideConverter">DockToSideConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.DoubleToDurationConverterExtension">
            <summary>
            Implements a markup extension that allows instances of
            <see cref="T:Philips.Platform.Presentation.Controls.DoubleToDurationConverter"/> to be easily created.
            </summary>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.DoubleToDurationConverter">DoubleToDurationConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.EnumDescriptionConverterExtension">
            <summary>
            Implements a markup extension that allows instances of
            <see cref="T:Philips.Platform.Presentation.Controls.EnumDescriptionConverter"/> to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.EnumDescriptionConverter"/>
            to be easily created inline in a XAML binding. See the example below.
            </remarks>
            <example>
            The following shows how to use the <c>EnumDescriptionConverterExtension</c>
            inside a binding:
            <code lang="xaml">
            <![CDATA[
            <Label Content="{Binding SomeEnumProperty, Converter={pt:EnumDescriptionConverter}}"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.EnumDescriptionConverter">EnumDescriptionConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.EnumToBooleanConverterExtension">
            <summary>
            Implements a markup extension that allows instances of <see cref="T:Philips.Platform.Presentation.Controls.EnumToBooleanConverter"/>
            to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.EnumToBooleanConverter"/> to be easily
            created inline in a XAML binding. See the example below.
            </remarks>
            <example>
            The following shows how to use the <c>EnumToBooleanConverterExtension</c> inside a binding:
            <code lang="xaml">
            <![CDATA[
            <Label Content="{Binding SomeEnumProperty, Converter={ptc:EnumToBooleanConverter}}"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.EnumToBooleanConverter">EnumToBooleanConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ExpressionConverterExtension">
            <summary>
            Implements a markup extension that allows instances of
            <see cref="T:Philips.Platform.Presentation.Controls.ExpressionConverter"/> to be easily created.
            </summary>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ExpressionConverter">ExpressionConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.HasAncestorConverterExtension">
            <summary>
            Implements a markup extension that allows instances of the
            <see cref="T:Philips.Platform.Presentation.Controls.HasAncestorConverter"/> class to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.HasAncestorConverter"/>
            to be easily created inline in a XAML binding. See the example below.
            </remarks>
            <example>
            The following shows how to use the <c>HasAncestorConverter</c>.
            <code lang="xaml">
            <![CDATA[
               <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},
                       Converter={ptc:HasAncestorConverter},
                       ConverterParameter={x:Type ToolBar}}"
                       Value="True">
                   <Setter Property = "Foreground" Value="Red"/>
               </DataTrigger>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.HasAncestorConverter">HasAncestorConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.IconIdConverterExtension">
            <summary>
            Implements a markup extension that allows instances of <see cref="T:Philips.Platform.Presentation.Controls.IconIdConverter"/>
            to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.IconIdConverter"/> to be easily
            created inline in a XAML binding. See the example below.
            </remarks>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.IconIdConverter">IconIdConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.IconIdToIsMulticolorConverterExtension">
            <summary>
            Implements a markup extension that allows instances of
            <see cref="T:Philips.Platform.Presentation.Controls.IconIdToIsMulticolorConverter"/> to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.IconIdToIsMulticolorConverter"/>
            to be easily created inline in a XAML binding.
            </remarks>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.IconIdToIsMulticolorConverter">IconIdToIsMulticolorConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.InverseBooleanConverterExtension">
            <summary>
            Implements a markup extension that allows instances of <see cref="T:Philips.Platform.Presentation.Controls.InverseBooleanConverter"/>
            to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.InverseBooleanConverter"/> to be easily
            created inline in a XAML binding. See the example below.
            </remarks>
            <example>
            The following shows how to use the <c>InverseBooleanConverterExtension</c> inside a binding:
            <code lang="xaml">
            <![CDATA[
            <Label Content="{Binding SomeBooleanProperty, Converter={ptc:InverseBooleanConverter}}"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.InverseBooleanConverter">InverseBooleanConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.InverseBooleanToVisibilityConverterExtension">
            <summary>
            Implements a markup extension that allows instances of <see cref="T:Philips.Platform.Presentation.Controls.InverseBooleanToVisibilityConverter"/>
            to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of
            <see cref="T:Philips.Platform.Presentation.Controls.InverseBooleanToVisibilityConverter"/> to be easily
            created inline in a XAML binding. See the example below.
            </remarks>
            <example>
            The following shows how to use the <c>InverseBooleanToVisibilityConverterExtension</c>
            inside a binding:
            <code lang="xaml">
            <![CDATA[
            <Label Content="{Binding
                SomeBooleanProperty,
                Converter={ptc:InverseBooleanToVisibilityConverter}}"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.InverseBooleanToVisibilityConverter">InverseBooleanToVisibilityConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.InverseNullToBooleanConverterExtension">
            <summary>
            Implements a markup extension that allows instances of <see cref="T:Philips.Platform.Presentation.Controls.InverseNullToBooleanConverter"/>
            to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.InverseNullToBooleanConverter"/>
            to be easily created inline in a XAML binding. See the example below.
            </remarks>
            <example>
            The following shows how to use the <c>InverseNullToBooleanConverterExtension</c>
            inside a binding:
            <code lang="xaml">
            <![CDATA[
            <Label
                Content="{
                    Binding SomePropertyThatCanBeNull,
                    Converter={ptc:InverseNullToBooleanConverter}
                }"
            />
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.InverseNullToBooleanConverter">InverseNullToBooleanConverter Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.NullToBooleanConverter">NullToBooleanConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.LogicalAndConverterExtension">
            <summary>
            Implements a markup extension that allows instances of <see cref="T:Philips.Platform.Presentation.Controls.LogicalAndConverter"/>
            to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.LogicalAndConverter"/> to be easily
            created inline in a XAML binding.
            </remarks>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.LogicalAndConverter">LogicalAndConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.MinMaxStepToDashConverterExtension">
            <summary>
            Implements a markup extension that allows instances of <see cref="T:Philips.Platform.Presentation.Controls.MinMaxStepToDashConverter"/>
            to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.MinMaxStepToDashConverter"/> to be easily
            created inline in a XAML binding.
            </remarks>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.LogicalOrConverter">LogicalOrConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.LogicalOrConverterExtension">
            <summary>
            Implements a markup extension that allows instances of <see cref="T:Philips.Platform.Presentation.Controls.LogicalOrConverter"/>
            to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.LogicalOrConverter"/> to be easily
            created inline in a XAML binding.
            </remarks>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.LogicalOrConverter">LogicalOrConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.NullToBooleanConverterExtension">
            <summary>
            Implements a markup extension that allows instances of <see cref="T:Philips.Platform.Presentation.Controls.NullToBooleanConverter"/>
            to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.NullToBooleanConverter"/> to be easily
            created inline in a XAML binding. See the example below.
            </remarks>
            <example>
            The following shows how to use the <c>NullToBooleanConverterExtension</c> inside a binding:
            <code lang="xaml">
            <![CDATA[
            <Label
                Content="{
                    Binding SomePropertyThatCanBeNull,
                    Converter={ptc:NullToBooleanConverter}
                }"
            />
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.NullToBooleanConverter">NullToBooleanConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.OffsetConverterExtension">
            <summary>
            Implements a markup extension that allows instances of
            <see cref="T:Philips.Platform.Presentation.Controls.OffsetConverter"/> to be easily created.
            </summary>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.OffsetConverter">OffsetConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PairwiseOrConverterExtension">
            <summary>
            Implements a markup extension that allows instances of <see cref="T:Philips.Platform.Presentation.Controls.PairwiseOrConverter"/>
            to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.PairwiseOrConverter"/> to be easily
            created inline in a XAML binding.
            </remarks>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PairwiseOrConverter">PairwiseOrConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PictorialDataTypeToIconConverterExtension">
            <summary>
            Implements a markup extension that allows instances of
            <see cref="T:Philips.Platform.Presentation.Controls.PictorialDataTypeToIconConverter"/> to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of
            <see cref="T:Philips.Platform.Presentation.Controls.PictorialDataTypeToIconConverter"/> to be easily created inline
            in a XAML binding. See the example below.
            </remarks>
            <example>
            The following example shows how to use the <b>PictorialDataTypeToIconConverter</b> with the
            <b>PictorialDataTypeToIconConverterExtension</b> inside a binding:
            <code lang="xaml">
            <![CDATA[
            <Image
                Source="{Binding
                    SomePictorialDataTypeValue,
                    Converter={pt:PictorialDataTypeToIconConverter}
                }"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ConverterMarkupExtension`1">ConverterMarkupExtension&lt;T&gt; Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialDataTypeToIconConverter">PictorialDataTypeToIconConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PictorialExportStatusToIconConverterExtension">
            <summary>
            Implements a markup extension that allows instances of
            <see cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatusToIconConverter"/> to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of
            <see cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatusToIconConverter"/> to be easily created inline
            in a XAML binding. See the example below.
            </remarks>
            <example>
            The following example shows how to use the <b>PictorialExportStatusToIconConverter</b> with
            the <b>PictorialExportStatusToIconConverterExtension</b> inside a binding:
            <code lang="xaml">
            <![CDATA[
            <Image
                Source="{Binding
                    SomePictorialExportStatusValue,
                    Converter={pt:PictorialExportStatusToIconConverter}
                }"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ConverterMarkupExtension`1">ConverterMarkupExtension&lt;T&gt; Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatusToIconConverter">PictorialExportStatusToIconConverter Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialExportStatus">PictorialExportStatus Enumeration</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PictorialMediaStatusToIconConverterExtension">
            <summary>
            Implements a markup extension that allows instances of
            <see cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatusToIconConverter"/> to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of
            <see cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatusToIconConverter"/> to be easily created inline
            in a XAML binding. See the example below.
            </remarks>
            <example>
            The following example shows how to use the <b>PictorialMediaStatusToIconConverter</b> with
            the <b>PictorialMediaStatusToIconConverterExtension</b> inside a binding:
            <code lang="xaml">
            <![CDATA[
            <Image
                Source="{Binding
                    SomePictorialMediaStatusValue,
                    Converter={pt:PictorialMediaStatusToIconConverter}
                }"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ConverterMarkupExtension`1">ConverterMarkupExtension&lt;T&gt; Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatusToIconConverter">PictorialMediaStatusToIconConverter Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialMediaStatus">PictorialMediaStatus Enumeration</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PictorialPrintStatusToIconConverterExtension">
            <summary>
            Implements a markup extension that allows instances of
            <see cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatusToIconConverter"/> to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of
            <see cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatusToIconConverter"/> to be easily created inline
            in a XAML binding. See the example below.
            </remarks>
            <example>
            The following example shows how to use the <b>PictorialMediaStatusToIconConverter</b> with
            the <b>PictorialMediaStatusToIconConverterExtension</b> inside a binding:
            <code lang="xaml">
            <![CDATA[
            <Image
                Source="{Binding
                    SomePictorialPrintStatusValue,
                    Converter={pt:PictorialPrintStatusToIconConverter}
                }"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ConverterMarkupExtension`1">ConverterMarkupExtension&lt;T&gt; Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatusToIconConverter">PictorialPrintStatusToIconConverter Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PictorialPrintStatus">PictorialPrintStatus Enumeration</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.RadiansToDegreesConverterExtension">
            <summary>
            Implements a markup extension that allows instances of <see cref="T:Philips.Platform.Presentation.Controls.RadiansToDegreesConverter"/>
            to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.RadiansToDegreesConverter"/> to be easily
            created inline in a XAML binding. See the example below.
            </remarks>
            <example>
            The following shows how to use the <c>RadiansToDegreesConverterExtension</c> inside
            a binding:
            <code lang="xaml">
            <![CDATA[
            <Label Content="{Binding AngleInRadians, Converter={ptc:RadiansToDegreesConverter}}"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.RadiansToDegreesConverter">RadiansToDegreesConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ScalableIconExtension">
            <summary>
            Markup extension which allows for selecting the image (bitmap) at the requested size from
            a Windows icon (a .ico file).
            </summary>
            <remarks>
            <para>
            WPF does not properly support the different sizes stored in a Windows icon out-of-the-box.
            This <see cref="T:System.Windows.Markup.MarkupExtension"/> makes it possible to specify the required width and
            height (in pixels) at which an icon needs to be rendered. The <see cref="M:Philips.Platform.Presentation.Controls.ScalableIconExtension.ProvideValue(System.IServiceProvider)"/>
            implementation of this markup extension extracts the bitmap image which best matches the
            required width and height from the icon. The resulting bitmap image is returned as an
            <see cref="T:System.Windows.Media.ImageSource"/>.
            </para>
            <para>
            A limitation of this markup extension is that WPF specifies pixels in device-independent
            units, whereas a Windows icon specifies pixels in device-dependent units. Please keep in
            mind that the one device-independent pixel in WPF corresponds to 1/96th of an inch - in
            other words, device-independent pixels exactly correspond to Windows icon pixels only on
            a 96 dpi screen. The requested size is specified on this markup extension in
            device-dependent pixels, because this corresponds to the pixel units in the Windows icon
            (.ico) file. It only corresponds to WPF device-independent pixels on a 96 dpi screen.
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:System.Windows.Media.ImageSource">ImageSource Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ScalableIconExtension.#ctor">
            <overloads>
            Creates a new <see cref="T:Philips.Platform.Presentation.Controls.ScalableIconExtension"/> instance.
            </overloads>
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ScalableIconExtension.#ctor(System.Uri)">
            <summary>
            Creates a new <see cref="T:Philips.Platform.Presentation.Controls.ScalableIconExtension"/> instance for the specified icon.
            </summary>
            <param name="iconUri">
            An URI specifying the icon that is scaled by this markup extension.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ScalableIconExtension.#ctor(System.Uri,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Philips.Platform.Presentation.Controls.ScalableIconExtension"/> instance for the specified icon.
            </summary>
            <param name="iconUri">
            An URI specifying the icon that is scaled by this markup extension.
            </param>
            <param name="requestedWidthInPixels">
            The requested width (in pixels) for the specified icon.
            </param>
            <param name="requestedHeightInPixels">
            The requested height (in pixels) for the specified icon.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ScalableIconExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Provides an <see cref="T:System.Windows.Media.ImageSource"/> which best matches the
            <see cref="P:Philips.Platform.Presentation.Controls.ScalableIconExtension.RequestedWidthInPixels"/> and <see cref="P:Philips.Platform.Presentation.Controls.ScalableIconExtension.RequestedHeightInPixels"/> for
            the specified <see cref="P:Philips.Platform.Presentation.Controls.ScalableIconExtension.IconUri"/>.
            </summary>
            <remarks>
            This method selects the (bitmap) image which best matches the requested size from
            an icon which possibly holds images at different sizes. If an exact match exists,
            the corresponding image is returned. If no exact match exists, the best matching
            image is returned, where "best matching" is defined as the smallest image that is
            larger than the requested size. This allows for downscaling of the returned image
            to the requested size, which generally gives better results than upscaling.
            </remarks>
            <param name="serviceProvider">The service provider.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the <paramref name="serviceProvider"/> is <see langword="null"/>.
            Also thrown if the <see cref="P:Philips.Platform.Presentation.Controls.ScalableIconExtension.IconUri"/> that needs to be scaled is not defined,
            or cannot be resolved, or if the requested height cannot be determined, or if the target
            of this markup extension is not an <see cref="T:System.Windows.Media.ImageSource"/>. Exceptions that are raised
            by streaming the specified icon are rethrown as <see cref="T:System.InvalidOperationException"/>
            with the inner exception set to the original exception.
            </exception>
            <returns>
            An <see cref="T:System.Windows.Media.ImageSource"/> which is scaled to the requested width and height (in
            device-dependent pixels).
            </returns>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ScalableIconExtension.IconUri">
            <summary>
            Gets or sets the URI specifying the icon that is scaled by this markup extension.
            </summary>
            <remarks>
            Failure to provide a value for this property will raise an
            <see cref="T:System.InvalidOperationException"/> when the <see cref="M:Philips.Platform.Presentation.Controls.ScalableIconExtension.ProvideValue(System.IServiceProvider)"/> method is
            called.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ScalableIconExtension.RequestedWidthInPixels">
            <summary>
            Gets or sets the requested width (in pixels) for the icon that is scaled by
            this markup extension.
            </summary>
            <remarks>Providing a value for this property is optional.</remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ScalableIconExtension.RequestedHeightInPixels">
            <summary>
            Gets or sets the requested height (in pixels) for the icon that is scaled by
            this markup extension.
            </summary>
            <remarks>
            Failure to provide a value for this property will raise an
            <see cref="T:System.InvalidOperationException"/> when the <see cref="M:Philips.Platform.Presentation.Controls.ScalableIconExtension.ProvideValue(System.IServiceProvider)"/> method is
            called.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ThicknessConverterExtension">
            <summary>
            Implements a markup extension that allows instances of
            <see cref="T:Philips.Platform.Presentation.Controls.ThicknessConverter"/> to be easily created.
            </summary>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ThicknessConverter">ThicknessConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ValueToBracketedValueConverterExtension">
            <summary>
            Implements a markup extension that allows instances of
            <see cref="T:Philips.Platform.Presentation.Controls.ValueToBracketedValueConverter"/> to be easily created.
            </summary>
            <remarks>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.ValueToBracketedValueConverter"/>
            to be easily created inline in a XAML binding. See the example below.
            </remarks>
            <example>
            The following shows how to use the <c>ValueToBracketedValueConverterExtension</c>
            inside a binding:
            <code lang="xaml">
            <![CDATA[
            <Label Content="{
                Binding SomeStringProperty,
                Converter={ptc:ValueToBracketedValueConverter},
                ConverterParameter='('
            }"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ValueToBracketedValueConverter">ValueToBracketedValueConverter Class</seealso>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.ValueToBooleanConverterExtension">
            <summary>
            Implements a markup extension that allows instances of <see cref="T:Philips.Platform.Presentation.Controls.ValueToBooleanConverter"/>
            to be easily created.
            </summary>
            <remarks>
            <para>
            This markup extension allows an instance of <see cref="T:Philips.Platform.Presentation.Controls.ValueToBooleanConverter"/> to be easily
            created inline in a XAML binding. See the example below.
            </para>
            </remarks>
            <example>
            The following shows how to use the <c>ValueToBooleanConverter</c> inside a binding
            to hide a button when a togglebutton is checked:
            <code lang="xaml">
            <![CDATA[
            <Button
                Visibility="{Binding
                    IsChecked,
                    ElementName=toggleButton,
                    Converter={pt:ValueToBooleanConverter
                        TrueValue={x:Static Visibility.Hidden},
                        FalseValue ={x:Static Visibility.Visible}}}"/>
            <ToggleButton x:Name="toggleButton"/>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Markup.MarkupExtension">MarkupExtension Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.ValueToBooleanConverter">CaseConverter Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ValueToBooleanConverterExtension.#ctor">
            <summary>
            Initializes a new instance of the CaseConverterExtension class.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ValueToBooleanConverterExtension.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the ValueToBooleanConverterExtension class with
            the specified <see cref="P:Philips.Platform.Presentation.Controls.ValueToBooleanConverterExtension.TrueValue"/> and <see cref="P:Philips.Platform.Presentation.Controls.ValueToBooleanConverterExtension.FalseValue"/>.
            </summary>
            <param name="trueValue">
            The TrueValue for the <see cref="T:Philips.Platform.Presentation.Controls.ValueToBooleanConverter"/>.
            </param>
            <param name="falseValue">
            The FalseValue for the <see cref="T:Philips.Platform.Presentation.Controls.ValueToBooleanConverter"/>.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.ValueToBooleanConverterExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Provides an instance of <see cref="T:Philips.Platform.Presentation.Controls.ValueToBooleanConverter"/> based on
            <see cref="P:Philips.Platform.Presentation.Controls.ValueToBooleanConverterExtension.TrueValue"/> and <see cref="P:Philips.Platform.Presentation.Controls.ValueToBooleanConverterExtension.FalseValue"/>.
            </summary>
            <param name="serviceProvider">
            An object that can provide services. Currently ignored.
            </param>
            <returns>
            The instance of <see cref="T:Philips.Platform.Presentation.Controls.ValueToBooleanConverter"/>.
            </returns>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ValueToBooleanConverterExtension.TrueValue">
            <summary>
            Gets or sets the trueValue <see cref="T:System.Object"/> for
            the <see cref="T:Philips.Platform.Presentation.Controls.ValueToBooleanConverter"/>.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.ValueToBooleanConverterExtension.FalseValue">
            <summary>
            Gets or sets the falseValue <see cref="T:System.Object"/> for
            the <see cref="T:Philips.Platform.Presentation.Controls.ValueToBooleanConverter"/>.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.AnnotationColors">
            <summary>
            Provides the set of predefined annotation colors.
            </summary>
            <remarks>
            This static class provides a number of static properties, one for each of the predefined
            Experience Identity annotation colors. This class is modeled after the standard WPF
            <see cref="T:System.Windows.Media.Colors"/> class, which provides access to the set of predefined WPF colors.
            </remarks>
            <seealso cref="T:System.Windows.Media.Colors">Colors Class</seealso>
            <seealso cref="T:System.Windows.Media.Color">Color Structure</seealso>
            <seealso cref="T:Philips.Platform.Presentation.HsvColor">HsvColor Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.ColorUtility">ColorUtility Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.ExperienceIdentityColors">ExperienceIdentityColors Class</seealso>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationYellow">
            <summary>
            Gets the predefined color "AnnotationYellow",
            which has ARGB value (255, 255, 255, 0).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationOrange">
            <summary>
            Gets the predefined color "AnnotationOrange",
            which has ARGB value (255, 255, 190, 0).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationDarkOrange">
            <summary>
            Gets the predefined color "AnnotationDarkOrange",
            which has ARGB value (255, 255, 127, 0).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationBrown">
            <summary>
            Gets the predefined color "AnnotationBrown",
            which has ARGB value (255, 191, 132, 48).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationBurgundy">
            <summary>
            Gets the predefined color "AnnotationBurgundy",
            which has ARGB value (255, 153, 0, 0).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationRed">
            <summary>
            Gets the predefined color "AnnotationRed",
            which has ARGB value (255, 255, 0, 0).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationPink">
            <summary>
            Gets the predefined color "AnnotationPink",
            which has ARGB value (255, 255, 187, 255).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationMagenta">
            <summary>
            Gets the predefined color "AnnotationMagenta",
            which has ARGB value (255, 255, 134, 255).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationDarkMagenta">
            <summary>
            Gets the predefined color "AnnotationDarkMagenta",
            which has ARGB value (255, 255, 0, 255).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationDarkLilac">
            <summary>
            Gets the predefined color "AnnotationDarkLilac",
            which has ARGB value (255, 192, 0, 255).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationLilac">
            <summary>
            Gets the predefined color "AnnotationLilac",
            which has ARGB value (255, 183, 119, 255).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationPurple">
            <summary>
            Gets the predefined color "AnnotationPurple",
            which has ARGB value (255, 128, 0, 255).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationVeryDarkBlue">
            <summary>
            Gets the predefined color "AnnotationVeryDarkBlue",
            which has ARGB value (255, 63, 0, 255).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationDarkBlue">
            <summary>
            Gets the predefined color "AnnotationDarkBlue",
            which has ARGB value (255, 87, 106, 254).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationBlue">
            <summary>
            Gets the predefined color "AnnotationBlue",
            which has ARGB value (255, 0, 191, 255).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationLightBlue">
            <summary>
            Gets the predefined color "AnnotationLightBlue",
            which has ARGB value (255, 153, 230, 255).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationTurquoise">
            <summary>
            Gets the predefined color "AnnotationTurquoise",
            which has ARGB value (255, 0, 255, 191).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationDarkGreen">
            <summary>
            Gets the predefined color "AnnotationDarkGreen",
            which has ARGB value (255, 78, 166, 58).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationGreen">
            <summary>
            Gets the predefined color "AnnotationGreen",
            which has ARGB value (255, 89, 248, 89).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.AnnotationColors.AnnotationLightGreen">
            <summary>
            Gets the predefined color "AnnotationLightGreen",
            which has ARGB value (255, 192, 255, 0).
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.CursorFactory">
            <summary>
            Factory that can be used to convert Experience Identity Cursor IDs to sDLS Cursor IDs.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.CursorFactory.DlsCursorIdDictionary">
            <summary>
            Dictionary mapping Experience Identity Cursor IDs to sDLS Cursor IDs.
            </summary>
            <remarks>
            <para>
            This dictionary maps EI cursor IDs to their corresponding sDLS cursor IDs.
            Please note that not every EI cursor has an sDLS equivalent (yet). Also,
            some sDLS cursor never existed in EI. This latter category includes at least:
            <list type="bullet">
              <item><see cref="P:Philips.Platform.Presentation.Dls.DlsCursors.LinkCursor"/></item>
              <item><see cref="P:Philips.Platform.Presentation.Dls.DlsCursors.LinkPressedCursor"/></item>
              <item><see cref="P:Philips.Platform.Presentation.Dls.DlsCursors.NumberCursor"/></item>
              <item><see cref="P:Philips.Platform.Presentation.Dls.DlsCursors.NumberPressedCursor"/></item>
              <item><see cref="P:Philips.Platform.Presentation.Dls.DlsCursors.RotateCornersCursor"/></item>
              <item><see cref="P:Philips.Platform.Presentation.Dls.DlsCursors.RotateCornersPressedClockwiseCursor"/></item>
              <item><see cref="P:Philips.Platform.Presentation.Dls.DlsCursors.RotateCornersPressedCounterclockwiseCursor"/></item>
            </list>
            </para>
            <para>
            For the sake of completeness, this dictionary contains an entry for each sDLS cursor
            that has an EI equivalent. Even if the names of the sDLS and EI cursors are exactly
            the same.
            </para>
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.CursorFactory.ConvertExperienceIdentityCursorIdToDlsCursorId(System.String)">
            <summary>
            Converts an Experience Identity Cursor ID to an sDLS Cursor ID.
            </summary>
            <param name="experienceIdentityCursorId">
            The Experience Identity Cursor ID to convert.
            </param>
            <returns>
            The sDLS Cursor ID that corresponds to the specified Experience Identity Cursor ID,
            or the Experience Identity Cursor ID if no matching sDLS Cursor ID is found.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.ExperienceIdentityColors">
            <summary>
            Provides the set of predefined Experience Identity colors.
            </summary>
            <remarks>
            <para>
            This static class provides a number of static properties, one for each of the predefined
            Experience Identity colors. This class is based on the standard WPF <see cref="T:System.Windows.Media.Colors"/>
            class, which provides access to the set of predefined WPF colors.
            </para>
            <para>
            This class provides access to the Blue, Brown, Gray, Red, and Yellow color palettes of the
            Experience Identity. The semantic colors, such as the Annotation colors and the Notification
            colors, are not provided by this class. You can access these using the similar classes that
            are dedicated to this purpose, such as <see cref="T:Philips.Platform.Presentation.AnnotationColors"/>.
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Media.Colors">Colors Class</seealso>
            <seealso cref="T:System.Windows.Media.Color">Color Structure</seealso>
            <seealso cref="T:Philips.Platform.Presentation.HsvColor">HsvColor Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.ColorUtility">ColorUtility Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.AnnotationColors">AnnotationColors Class</seealso>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Blue010Color">
            <summary>
            Gets the Experience Identity color "Blue010",
            which has the ARGB value (255, 198, 242, 253).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Blue015Color">
            <summary>
            Gets the Experience Identity color "Blue015",
            which has the ARGB value (255, 175, 234, 250).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Blue020Color">
            <summary>
            Gets the Experience Identity color "Blue020",
            which has the ARGB value (255, 122, 221, 249).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Blue030Color">
            <summary>
            Gets the Experience Identity color "Blue030",
            which has the ARGB value (255, 82, 195, 241).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Blue040Color">
            <summary>
            Gets the Experience Identity color "Blue040",
            which has the ARGB value (255, 42, 146, 196).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Blue050Color">
            <summary>
            Gets the Experience Identity color "Blue040",
            which has the ARGB value (255, 0, 167, 255).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Brown010Color">
            <summary>
            Gets the Experience Identity color "Brown010",
            which has the ARGB value (255, 53, 46, 38).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Brown020Color">
            <summary>
            Gets the Experience Identity color "Brown020",
            which has the ARGB value (255, 133, 113, 77).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.BlackColor">
            <summary>
            Gets the Experience Identity color "Black",
            which has the ARGB value (255, 0, 0, 0).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.WhiteColor">
            <summary>
            Gets the Experience Identity color "White",
            which has the ARGB value (255, 255, 255, 255).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray000Color">
            <summary>
            Gets the Experience Identity color "Gray000",
            which has the ARGB value (255, 248, 246, 243).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray010Color">
            <summary>
            Gets the Experience Identity color "Gray010",
            which has the ARGB value (255, 238, 233, 226).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray020Color">
            <summary>
            Gets the Experience Identity color "Gray020",
            which has the ARGB value (255, 233, 227, 218).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray030Color">
            <summary>
            Gets the Experience Identity color "Gray030",
            which has the ARGB value (255, 227, 221, 209).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray040Color">
            <summary>
            Gets the Experience Identity color "Gray040",
            which has the ARGB value (255, 213, 207, 196).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray050Color">
            <summary>
            Gets the Experience Identity color "Gray050",
            which has the ARGB value (255, 197, 191, 181).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray060Color">
            <summary>
            Gets the Experience Identity color "Gray060",
            which has the ARGB value (255, 183, 178, 168).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray070Color">
            <summary>
            Gets the Experience Identity color "Gray070",
            which has the ARGB value (255, 168, 164, 155).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray080Color">
            <summary>
            Gets the Experience Identity color "Gray080",
            which has the ARGB value (255, 155, 151, 142).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray090Color">
            <summary>
            Gets the Experience Identity color "Gray090",
            which has the ARGB value (255, 140, 136, 129).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray100Color">
            <summary>
            Gets the Experience Identity color "Gray100",
            which has the ARGB value (255, 130, 126, 120).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray110Color">
            <summary>
            Gets the Experience Identity color "Gray110",
            which has the ARGB value (255, 120, 116, 110).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray120Color">
            <summary>
            Gets the Experience Identity color "Gray120",
            which has the ARGB value (255, 107, 103, 97).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray130Color">
            <summary>
            Gets the Experience Identity color "Gray130",
            which has the ARGB value (255, 92, 90, 84).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray140Color">
            <summary>
            Gets the Experience Identity color "Gray140",
            which has the ARGB value (255, 79, 77, 72).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray150Color">
            <summary>
            Gets the Experience Identity color "Gray150",
            which has the ARGB value (255, 64, 62, 59).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray160Color">
            <summary>
            Gets the Experience Identity color "Gray160",
            which has the ARGB value (255, 54, 52, 49).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray170Color">
            <summary>
            Gets the Experience Identity color "Gray170",
            which has the ARGB value (255, 43, 42, 39).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray180Color">
            <summary>
            Gets the Experience Identity color "Gray180",
            which has the ARGB value (255, 31, 30, 27).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray190Color">
            <summary>
            Gets the Experience Identity color "Gray190",
            which has the ARGB value (255, 18, 17, 15).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray200Color">
            <summary>
            Gets the Experience Identity color "Gray200",
            which has the ARGB value (255, 9, 9, 8).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Gray210Color">
            <summary>
            Gets the Experience Identity color "Gray210",
            which has the ARGB value (127, 255, 255, 255).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Red010Color">
            <summary>
            Gets the Experience Identity color "Red010",
            which has the ARGB value (255, 214, 110, 5).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Red020Color">
            <summary>
            Gets the Experience Identity color "Red020",
            which has the ARGB value (255, 164, 63, 0).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Red030Color">
            <summary>
            Gets the Experience Identity color "Red030",
            which has the ARGB value (255, 255, 159, 62).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Red040Color">
            <summary>
            Gets the Experience Identity color "Red040",
            which has the ARGB value (255, 190, 73, 0).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Red050Color">
            <summary>
            Gets the Experience Identity color "Red050",
            which has the ARGB value (255, 255, 0, 0).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Red060Color">
            <summary>
            Gets the Experience Identity color "Red060",
            which has the ARGB value (255, 147, 0, 0).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Red070Color">
            <summary>
            Gets the Experience Identity color "Red070",
            which has the ARGB value (255, 255, 96, 96).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Red080Color">
            <summary>
            Gets the Experience Identity color "Red080",
            which has the ARGB value (255, 248, 0, 0).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Red090Color">
            <summary>
            Gets the Experience Identity color "Red090",
            which has the ARGB value (255, 51, 14, 14).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Red100Color">
            <summary>
            Gets the Experience Identity color "Red100",
            which has the ARGB value (255, 184, 10, 10).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow010Color">
            <summary>
            Gets the Experience Identity color "Yellow010",
            which has the ARGB value (255, 252, 244, 221).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow020Color">
            <summary>
            Gets the Experience Identity color "Yellow020",
            which has the ARGB value (255, 248, 235, 198).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow030Color">
            <summary>
            Gets the Experience Identity color "Yellow030",
            which has the ARGB value (255, 248, 226, 166).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow040Color">
            <summary>
            Gets the Experience Identity color "Yellow040",
            which has the ARGB value (255, 255, 226, 146).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow050Color">
            <summary>
            Gets the Experience Identity color "Yellow050",
            which has the ARGB value (255, 250, 219, 144).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow060Color">
            <summary>
            Gets the Experience Identity color "Yellow060",
            which has the ARGB value (255, 255, 214, 122).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow070Color">
            <summary>
            Gets the Experience Identity color "Yellow070",
            which has the ARGB value (255, 250, 194, 87).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow080Color">
            <summary>
            Gets the Experience Identity color "Yellow080",
            which has the ARGB value (255, 255, 187, 56).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow090Color">
            <summary>
            Gets the Experience Identity color "Yellow090",
            which has the ARGB value (255, 226, 190, 132).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow100Color">
            <summary>
            Gets the Experience Identity color "Yellow100",
            which has the ARGB value (255, 210, 163, 86).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow110Color">
            <summary>
            Gets the Experience Identity color "Yellow110",
            which has the ARGB value (255, 165, 137, 92).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow120Color">
            <summary>
            Gets the Experience Identity color "Yellow120",
            which has the ARGB value (255, 132, 113, 81).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow130Color">
            <summary>
            Gets the Experience Identity color "Yellow130",
            which has the ARGB value (255, 247, 236, 213).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow140Color">
            <summary>
            Gets the Experience Identity color "Yellow140",
            which has the ARGB value (255, 244, 231, 202).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow150Color">
            <summary>
            Gets the Experience Identity color "Yellow150",
            which has the ARGB value (255, 232, 224, 209).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow160Color">
            <summary>
            Gets the Experience Identity color "Yellow160",
            which has the ARGB value (255, 220, 213, 195).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow170Color">
            <summary>
            Gets the Experience Identity color "Yellow170",
            which has the ARGB value (255, 240, 224, 186).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow180Color">
            <summary>
            Gets the Experience Identity color "Yellow180",
            which has the ARGB value (255, 229, 206, 157).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow190Color">
            <summary>
            Gets the Experience Identity color "Yellow190",
            which has the ARGB value (255, 202, 188, 160).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow200Color">
            <summary>
            Gets the Experience Identity color "Yellow200",
            which has the ARGB value (255, 187, 177, 154).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow210Color">
            <summary>
            Gets the Experience Identity color "Yellow210",
            which has the ARGB value (255, 159, 150, 131).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow220Color">
            <summary>
            Gets the Experience Identity color "Yellow220",
            which has the ARGB value (255, 120, 110, 93).
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityColors.Yellow230Color">
            <summary>
            Gets the Experience Identity color "Yellow230",
            which has the ARGB value (255, 95, 86, 69).
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.ExperienceIdentityCursors">
            <summary>
            Provides strongly-typed access to all the Experience Identity cursors.
            </summary>
            <remarks>
            <para>
            This static class provides a number of static properties, one for each of the predefined
            Experience Identity cursors. This class is based on the standard WPF <see cref="T:System.Windows.Input.Cursors"/>
            class, which provides access to the set of predefined WPF cursors.
            </para>
            <para>
            You can find all the Experience Identity cursors in Icons, Cursors and Symbols online
            database, otherwise known as
            <see href="http://nlybstqvp1lx031.best.ms.philips.com/icopedia/index.php?title=Main_Page">Icopedia</see>.
            </para>
            </remarks>
            <seealso cref="T:System.Windows.Input.Cursor">Cursor Class</seealso>
            <seealso cref="T:System.Windows.Input.Cursors">Cursors Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Dls.DlsCursors">DlsCursors Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.PresentationTheme">PresentationTheme Enumeration</seealso>
            <seealso href="http://nlybstqvp1lx031.best.ms.philips.com/icopedia/index.php?title=Main_Page">Icopedia</seealso>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ArrowLengthCursor">
            <summary>
            Gets the arrow length cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ArrowLengthDecreaseReducedCursor">
            <summary>
            Gets the arrow length decrease reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ArrowLengthIncreaseReducedCursor">
            <summary>
            Gets the arrow length increase reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.AttentionCursor">
            <summary>
            Gets the attention cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.BrightnessCursor">
            <summary>
            Gets the brightness cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.BrightnessContrastCursor">
            <summary>
            Gets the brightness/contrast cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.BrightnessContrastReducedCursor">
            <summary>
            Gets the brightness/contrast reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.BrightnessReducedCursor">
            <summary>
            Gets the brightness reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.CaliperSelectAnteriorCursor">
            <summary>
            Gets the caliper select anterior cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.CaliperSelectAnteriorVCursor">
            <summary>
            Gets the caliper select anterior "V" cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.CaliperSelectApexCursor">
            <summary>
            Gets the caliper select apex cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.CaliperSelectCCursor">
            <summary>
            Gets the caliper select C cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.CaliperSelectInferiorCursor">
            <summary>
            Gets the caliper select inferior cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.CaliperSelectLateralCursor">
            <summary>
            Gets the caliper select lateral cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.CaliperSelectSeptalCursor">
            <summary>
            Gets the caliper select septal cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ColorMapHeightLevelReducedCursor">
            <summary>
            Gets the color map height level reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ColorMapWidthHeightLevelCursor">
            <summary>
            Gets the color map width height level cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ColorMapWidthHeightLevelReducedCursor">
            <summary>
            Gets the color map width height level reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ColorMapWidthLevelReducedCursor">
            <summary>
            Gets the color map width level reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ContrastBrightnessCursor">
            <summary>
            Gets the contrast brightness cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ContrastBrightnessReducedCursor">
            <summary>
            Gets the contrast brightness reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ContrastCursor">
            <summary>
            Gets the contrast cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ContrastReducedCursor">
            <summary>
            Gets the contrast reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.CrosshairCursor">
            <summary>
            Gets the crosshair cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.CrosshairForbiddenCursor">
            <summary>
            Gets the crosshair forbidden cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.CrosshairNoDotCursor">
            <summary>
            Gets the crosshair no dot cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.CrosshairOpenCursor">
            <summary>
            Gets the crosshair open cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.CrosshairOpenNoDotCursor">
            <summary>
            Gets the crosshair open no dot cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.CutCursor">
            <summary>
            Gets the cut cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.CutReducedCursor">
            <summary>
            Gets the cut reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.DeviceOpacityCursor">
            <summary>
            Gets the device opacity cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.DevicePanCursor">
            <summary>
            Gets the device pan cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.DeviceRollRotateCursor">
            <summary>
            Gets the device roll/rotate cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.DeviceRotateCursor">
            <summary>
            Gets the device rotate cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.DefaultCursor">
            <summary>
            Gets the default cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.DragAllowCursor">
            <summary>
            Gets the drag allow cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.DragCopyCursor">
            <summary>
            Gets the drag copy cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.DragGrabCursor">
            <summary>
            Gets the drag grab cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.DragGrabNotAllowedCursor">
            <summary>
            Gets the drag grab not allowed cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.DragSwapCursor">
            <summary>
            Gets the drag swap cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.DragWithPointerCursor">
            <summary>
            Gets the drag with pointer cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.DrawingCursor">
            <summary>
            Gets the drawing cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.EdgeEnhancementGainCursor">
            <summary>
            Gets the edge enhancement gain cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.EdgeEnhancementGainIncreaseReducedCursor">
            <summary>
            Gets the edge enhancement gain increase reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.EdgeEnhancementGainDecreaseReducedCursor">
            <summary>
            Gets the edge enhancement gain decrease reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.EditCursor">
            <summary>
            Gets the edit cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.EditForbiddenCursor">
            <summary>
            Gets the edit forbidden cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.EnhanceEdgesCursor">
            <summary>
            Gets the enhance edges cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.EnhanceEdgesDecreaseCursor">
            <summary>
            Gets the enhance edges decrease cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.EnhanceEdgesIncreaseCursor">
            <summary>
            Gets the enhance edges increase cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.EnhanceEdgesReducedCursor">
            <summary>
            Gets the enhance edges reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.EnhanceImageCursor">
            <summary>
            Gets the enhance image cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.EnhanceImageReducedCursor">
            <summary>
            Gets the enhance image reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.EraseCursor">
            <summary>
            Gets the erase cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.EraseReducedCursor">
            <summary>
            Gets the erase reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ErrorCursor">
            <summary>
            Gets the error cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ForbiddenCursor">
            <summary>
            Gets the forbidden cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.GraphicsMoveCursor">
            <summary>
            Gets the graphics move cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.GraphicsMoveLeftRightCursor">
            <summary>
            Gets the graphics move left right cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.GraphicsMoveLeftRightReducedCursor">
            <summary>
            Gets the graphics move left right reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.GraphicsMoveReducedAltCursor">
            <summary>
            Gets the graphics move reduced alt cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.GraphicsMoveReducedCursor">
            <summary>
            Gets the graphics move reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.GraphicsMoveUpDownCursor">
            <summary>
            Gets the graphics move up down cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.GraphicsMoveUpDownReducedCursor">
            <summary>
            Gets the graphics move up down reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.GraphicsPointAddCursor">
            <summary>
            Gets the graphics point add cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.GraphicsPointDeleteCursor">
            <summary>
            Gets the graphics point delete cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.GraphicsPointMoveCursor">
            <summary>
            Gets the graphics point move cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.HeartBrightnessContrastCursor">
            <summary>
            Gets the heart brightness/contrast cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.HeartOpacityCursor">
            <summary>
            Gets the heart opacity cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.HeartPanCursor">
            <summary>
            Gets the heart pan cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.HeartRollRotateCursor">
            <summary>
            Gets the heart roll/rotate cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.HeartRotateCursor">
            <summary>
            Gets the heart rotate cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.HelpCursor">
            <summary>
            Gets the help cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.HistogramCursor">
            <summary>
            Gets the histogram cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.IBeamCursor">
            <summary>
            Gets an I-beam <see cref="T:System.Windows.Input.Cursor"/>, which is used to show where the text cursor
            appears when the mouse is clicked.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.InjectDyeCursor">
            <summary>
            Gets the inject dye cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.InjectDyeRemoveCursor">
            <summary>
            Gets the inject dye remove cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.IntersectionCursor">
            <summary>
            Gets the intersection cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.IntersectionReducedCursor">
            <summary>
            Gets the intersection reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.LandmarkCursor">
            <summary>
            Gets the landmark cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.LandmarkingCursor">
            <summary>
            Gets the landmarking cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.LandmarkingReducedCursor">
            <summary>
            Gets the landmarking reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.LinkCursor">
            <summary>
            Gets the link cursor.
            </summary>
            <remarks>
            Use this cursor when the mouse hovers over a hyperlink.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.MoveAlternateCursor">
            <summary>
            Gets the move alternate cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.MoveAlternateReducedCursor">
            <summary>
            Gets the move alternate reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.MoveForbiddenCursor">
            <summary>
            Gets the move forbidden cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.MoveRotateCursor">
            <summary>
            Gets the move rotate cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.MoveRotateReducedCursor">
            <summary>
            Gets the move rotate reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.MovieFrameRateCursor">
            <summary>
            Gets the movie frame rate cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.MovieFrameRateReducedCursor">
            <summary>
            Gets the movie frame rate reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.OpacityAllPlanesCursor">
            <summary>
            Gets the opacity all planes cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.OpacityAllPlanesReducedCursor">
            <summary>
            Gets the opacity all planes reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.OpacityCursor">
            <summary>
            Gets the opacity cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.OpacityLevelReducedCursor">
            <summary>
            Gets the opacity level reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.OpacityModulationCursor">
            <summary>
            Gets the opacity modulation cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.OpacityModulationReducedCursor">
            <summary>
            Gets the opacity modulation reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.OpacityReducedCursor">
            <summary>
            Gets the opacity reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.OpacitySinglePlaneCursor">
            <summary>
            Gets the opacity single plane cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.OpacitySinglePlaneReducedCursor">
            <summary>
            Gets the opacity single plane reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.OpacityWidthLevelCursor">
            <summary>
            Gets the opacity width level cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.OpacityWidthLevelReducedCursor">
            <summary>
            Gets the opacity width level reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.OpacityWidthReducedCursor">
            <summary>
            Gets the opacity width reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.PaintBrushCursor">
            <summary>
            Gets the paintbrush cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.PanCursor">
            <summary>
            Gets the pan cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.PanHorizontalReducedCursor">
            <summary>
            Gets the pan horizontal reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.PanReducedCursor">
            <summary>
            Gets the pan reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.PanVerticalReducedCursor">
            <summary>
            Gets the pan vertical reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.PanVesselsCursor">
            <summary>
            Gets the pan vessels cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.PanVesselsReducedCursor">
            <summary>
            Gets the pan vessels reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.PitchDownCursor">
            <summary>
            Gets the pitch down cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.PitchDownReducedCursor">
            <summary>
            Gets the pitch down reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.PitchLeftCursor">
            <summary>
            Gets the pitch left cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.PitchLeftReducedCursor">
            <summary>
            Gets the pitch left reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.PitchRightCursor">
            <summary>
            Gets the pitch right cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.PitchRightReducedCursor">
            <summary>
            Gets the pitch right reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.PitchUpCursor">
            <summary>
            Gets the pitch up cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.PitchUpReducedCursor">
            <summary>
            Gets the pitch up reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.PixelShiftCursor">
            <summary>
            Gets the pixel shift cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.PixelShiftReducedCursor">
            <summary>
            Gets the pixel shift reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RefineRegionOfInterestCursor">
            <summary>
            Gets the refine region of interest (ROI) cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RingPlacementCursor">
            <summary>
            Gets the ring placement cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RingPlacementReducedCursor">
            <summary>
            Gets the ring placement reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RollHorizontalCursor">
            <summary>
            Gets the roll horizontal cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RollRotateCursor">
            <summary>
            Gets the roll rotate cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RollRotateReducedCursor">
            <summary>
            Gets the roll rotate reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RollVerticalCursor">
            <summary>
            Gets the roll vertical cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RotateAlternateCursor">
            <summary>
            Gets the rotate alternate cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RotateAlternateReducedCursor">
            <summary>
            Gets the rotate alternate reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RotateBottomCursor">
            <summary>
            Gets the rotate bottom cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RotateBottomReducedCursor">
            <summary>
            Gets the rotate bottom reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RotateClockwiseReducedCursor">
            <summary>
            Gets the rotate clockwise reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RotateCounterclockwiseReducedCursor">
            <summary>
            Gets the rotate counterclockwise reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RotateCursor">
            <summary>
            Gets the rotate cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RotateLeftCursor">
            <summary>
            Gets the rotate left cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RotateLeftReducedCursor">
            <summary>
            Gets the rotate left reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RotateReducedCursor">
            <summary>
            Gets the rotate reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RotateRightCursor">
            <summary>
            Gets the rotate right cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RotateRightReducedCursor">
            <summary>
            Gets the rotate right reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RotateTopCursor">
            <summary>
            Gets the rotate top cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RotateTopReducedCursor">
            <summary>
            Gets the rotate top reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RotateVolumeClockwiseYAxisCursor">
            <summary>
            Gets the rotate volume clockwise Y-axis cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RotateVolumeClockwiseYAxisReducedCursor">
            <summary>
            Gets the rotate volume clockwise Y-axis reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RotateVolumeCounterclockwiseYAxisCursor">
            <summary>
            Gets the rotate volume counterclockwise Y-axis cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.RotateVolumeCounterclockwiseYAxisReducedCursor">
            <summary>
            Gets the rotate volume counterclockwise Y-axis reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.Scroll2DCursor">
            <summary>
            Gets the scroll 2D cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.Scroll2DReducedCursor">
            <summary>
            Gets the scroll 2D reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ScrollContinuousCursor">
            <summary>
            Gets the scroll continuous cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ScrollContinuousReducedCursor">
            <summary>
            Gets the scroll continuous reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ScrollDiagonalCursor">
            <summary>
            Gets the scroll diagonal cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ScrollDiagonalReducedCursor">
            <summary>
            Gets the scroll diagonal reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ScrollHorizontalCursor">
            <summary>
            Gets the scroll horizontal cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ScrollHorizontalReducedCursor">
            <summary>
            Gets the scroll horizontal reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ScrollVerticalCursor">
            <summary>
            Gets the scroll vertical cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ScrollVerticalReducedCursor">
            <summary>
            Gets the scroll vertical reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SelectPointOfInterestCursor">
            <summary>
            Gets the select point of interest (POI) cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SelectRegionOfInterestCursor">
            <summary>
            Gets the select region of interest (ROI) cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ShutterCircularBottomLeftCursor">
            <summary>
            Gets the shutter circular bottom left cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ShutterCircularBottomRightCursor">
            <summary>
            Gets the shutter circular bottom right cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ShutterCircularTopLeftCursor">
            <summary>
            Gets the shutter circular top left cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ShutterCircularTopRightCursor">
            <summary>
            Gets the shutter circular top right cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ShutterRectangularBottomCursor">
            <summary>
            Gets the shutter rectangular bottom cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ShutterRectangularLeftCursor">
            <summary>
            Gets the shutter rectangular left cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ShutterRectangularRightCursor">
            <summary>
            Gets the shutter rectangular right cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ShutterRectangularTopCursor">
            <summary>
            Gets the shutter rectangular right cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SizeAllCursor">
            <summary>
            Gets a four-headed sizing <see cref="T:System.Windows.Input.Cursor"/>, which consists of four joined arrows
            that point north, south, east, and west.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SizeAllReducedCursor">
            <summary>
            Gets the size all reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SizeNESWCursor">
            <summary>
            Gets the size NESW cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SizeNESWReducedCursor">
            <summary>
            Gets the size NESW reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SizeNSCursor">
            <summary>
            Gets the size NS cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SizeNSReducedCursor">
            <summary>
            Gets the size NS reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SizeNWSECursor">
            <summary>
            Gets the size NWSE cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SizeNWSEReducedCursor">
            <summary>
            Gets the size NWSE reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SizeWECursor">
            <summary>
            Gets the size WE cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SizeWEReducedCursor">
            <summary>
            Gets the size WE reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SlabPositionCursor">
            <summary>
            Gets the slab position cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SlabPositionReducedCursor">
            <summary>
            Gets the slab position reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SlabPositionInReducedCursor">
            <summary>
            Gets the slab position in reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SlabPositionOutReducedCursor">
            <summary>
            Gets the slab position out reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SlabThicknessAltCursor">
            <summary>
            Gets the slab thickness alt cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SlabThicknessCursor">
            <summary>
            Gets the slab thickness cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SlabThicknessDecreaseHorizontalReducedCursor">
            <summary>
            Gets the slab thickness decrease horizontal reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SlabThicknessDecreaseReducedCursor">
            <summary>
            Gets the slab thickness decrease reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SlabThicknessIncreaseHorizontalReducedCursor">
            <summary>
            Gets the slab thickness increase horizontal reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SlabThicknessIncreaseReducedCursor">
            <summary>
            Gets the slab thickness increase reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SlabThicknessPositionCursor">
            <summary>
            Gets the slab thickness position cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SlabThicknessPositionReducedCursor">
            <summary>
            Gets the slab thickness position reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SlabThicknessReducedCursor">
            <summary>
            Gets the slab thickness reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SplitHorizontalCursor">
            <summary>
            Gets the split horizontal cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.SplitVerticalCursor">
            <summary>
            Gets the split vertical cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.TagsAddCursor">
            <summary>
            Gets the tags add cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.TagsAddUnableCursor">
            <summary>
            Gets the tags add unable cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.TagsDeleteCursor">
            <summary>
            Gets the tags delete cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.TagsSelectCursor">
            <summary>
            Gets the tags select cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.TextMoveCursor">
            <summary>
            Gets the text move cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.VesselBrightnessContrastCursor">
            <summary>
            Gets the vessel brightness/contrast cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.VesselOpacityCursor">
            <summary>
            Gets the vessel opacity cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.VesselPanCursor">
            <summary>
            Gets the vessel pan cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.VesselRegistrationPanCursor">
            <summary>
            Gets the vessel registration pan cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.VesselRegistrationPanReducedCursor">
            <summary>
            Gets the vessel registration pan reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.VesselRegistrationRollRotateCursor">
            <summary>
            Gets the vessel registration roll rotate cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.VesselRegistrationRollRotateReducedCursor">
            <summary>
            Gets the vessel registration roll rotate reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.VesselRegistrationRotateClockwiseReducedCursor">
            <summary>
            Gets the vessel registration rotate clockwise reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.VesselRegistrationRotateCounterclockwiseReducedCursor">
            <summary>
            Gets the vessel registration rotate counterclockwise reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.VesselRegistrationRotateCursor">
            <summary>
            Gets the vessel registration rotate cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.VesselRollRotateCursor">
            <summary>
            Gets the vessel roll/rotate cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.VesselRotateCursor">
            <summary>
            Gets the vessel rotate cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.VesselSeedCursor">
            <summary>
            Gets the vessel seed cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.VesselSegmentationAddCursor">
            <summary>
            Gets the vessel segmentation add cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.VesselSegmentationAddReducedCursor">
            <summary>
            Gets the vessel segmentation add reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.VesselSegmentationCursor">
            <summary>
            Gets the vessel segmentation cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.VolumeFreeCutCursor">
            <summary>
            Gets the volume free cut cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.VolumeFreeCutReducedCursor">
            <summary>
            Gets the volume free cut reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.WallFullSegmentSelectCursor">
            <summary>
            Gets the wall full segment select cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.WallRingSelectCursor">
            <summary>
            Gets the wall ring select cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.WallSegmentSelectCursor">
            <summary>
            Gets the wall segment select cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.WallSegmentSelectReducedCursor">
            <summary>
            Gets the wall segment select reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.XrayBrightnessContrastCursor">
            <summary>
            Gets the X-ray brightness/contrast cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.XrayOpacityCursor">
            <summary>
            Gets the X-ray opacity cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.XrayPanCursor">
            <summary>
            Gets the X-ray pan cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.XrayRollRotateCursor">
            <summary>
            Gets the X-ray roll/rotate cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.XrayRotateCursor">
            <summary>
            Gets the X-ray rotate cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ZoomCursor">
            <summary>
            Gets the zoom cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ZoomInReducedCursor">
            <summary>
            Gets the zoom in reduced cursor.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ExperienceIdentityCursors.ZoomOutReducedCursor">
            <summary>
            Gets the zoom out reduced cursor.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.ColorUtility">
            <summary>
            Utility class that contains helper methods related to the manipulation of colors.
            </summary>
            <seealso cref="T:System.Windows.Media.Color">Color Structure</seealso>
            <seealso cref="T:Philips.Platform.Presentation.HsvColor">HsvColor Class</seealso>
            <seealso cref="T:System.Windows.Media.Colors">Colors Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.AnnotationColors">AnnotationColors Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.ExperienceIdentityColors">ExperienceIdentityColors Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.ColorUtility.KnownWpfColors">
            <summary>
            The collection of known (WPF) colors.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.ColorUtility.KnownExperienceIdentityColors">
            <summary>
            The collection of known Experience Identity colors.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.ColorUtility.KnownAnnotationColors">
            <summary>
            The collection of Experience Identity Annotation Colors.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.ColorUtility.KnownSafeAnnotationColors">
            <summary>
            The collection of Experience Identity Safe Annotation Colors.
            </summary>
            <remarks>
            The Safe Annotation Colors are a subset of the <see cref="T:Philips.Platform.Presentation.AnnotationColors"/> that are
            safe to use in a context where color sensitivity or color blindness needs to be taken
            into account. The complete collection of Annotation Colors consists of colors that may
            not be distinguishable by color-sensitive users. The Safe Annotation Colors have been
            carefully selected, and tested, to be distinguishable by color-sensitive users.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.ColorUtility.GetColorName(System.Windows.Media.Color)">
            <summary>
            Gets the color name for the specified color.
            </summary>
            <param name="color">The color for which to get the color name.</param>
            <returns>
            The human-readable color name for the specified color, if it is defined;
            otherwise, the hexadecimal color name.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ColorUtility.GetColorNameForAnnotationColor(System.Windows.Media.Color)">
            <summary>
            Gets the human readable name for the specified annotation color.
            </summary>
            <param name="color">The annotation color.</param>
            <returns>
            The human readable, localizable name for the specified annotation color;
            or <see cref="F:System.String.Empty"/> if the human readable name cannot be determined.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ColorUtility.GetColorNameForExperienceIdentityColor(System.Windows.Media.Color)">
            <summary>
            Gets the human readable name for the specified annotation color.
            </summary>
            <param name="color">The annotation color.</param>
            <returns>
            The human readable, in some cases localizable name for the specified annotation color;
            or <see cref="F:System.String.Empty"/> if the human readable name cannot be determined.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ColorUtility.FormatColorString(System.String,System.Boolean)">
            <summary>
            Formats the (hexadecimal) color name taking into account whether the alpha channel
            is used or not.
            </summary>
            <param name="colorName">The (hexadecimal) color name.</param>
            <param name="isUsingAlphaChannel">Flag indicating whether the alpha channel is used
            or not.</param>
            <returns>The formatted color name. For example, if the color name is "#FF00BF8430",
            then the formatted color name is the same if the alpha channel is used, and "#00BF8430"
            if the alpha channel is not used.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ColorUtility.ConvertRgbToHsv(System.Windows.Media.Color)">
            <summary>
            Converts an RGB color to an HSV color.
            </summary>
            <param name="color">The RGB color.</param>
            <returns>
            The <see cref="T:Philips.Platform.Presentation.HsvColor"/> corresponding to the specified RGB color.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ColorUtility.ConvertRgbToHsv(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts an RGB color to an HSV color.
            </summary>
            <param name="red">The red component of the RGB color.</param>
            <param name="blue">The blue component of the RGB color.</param>
            <param name="green">The green component of the RGB color.</param>
            <returns>
            The <see cref="T:Philips.Platform.Presentation.HsvColor"/> corresponding to the specified RGB color.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ColorUtility.ConvertHsvToRgb(Philips.Platform.Presentation.HsvColor)">
            <summary>
             Converts an HSV color to an RGB color.
            </summary>
            <param name="hsvColor">The HSV color to convert.</param>
            <returns>
            The RGB <see cref="T:System.Windows.Media.Color"/> corresponding to the specified HSV color.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ColorUtility.ConvertHsvToRgb(System.Double,System.Double,System.Double)">
            <summary>
             Converts an HSV color to an RGB color.
            </summary>
            <param name="hue">The hue.</param>
            <param name="saturation">The saturation.</param>
            <param name="value">The value.</param>
            <returns>
            The RGB <see cref="T:System.Windows.Media.Color"/> corresponding to the specified HSV color.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ColorUtility.GenerateHsvSpectrum">
            <summary>
            Generates a list of colors with hues ranging from [0..360] and
            a saturation and value of 1.
            </summary>
            <returns>A collection of colors representing the HSV color spectrum.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ColorUtility.GetKnownWpfColors">
            <summary>
            Gets the known WPF colors.
            </summary>
            <returns>The known WPF colors, as defined by the <see cref="T:System.Windows.Media.Colors"/> class.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ColorUtility.GetKnownExperienceIdentityColors">
            <summary>
            Gets the known Experience Identity colors.
            </summary>
            <returns>The known Experience Identity colors.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ColorUtility.GetKnownAnnotationColors">
            <summary>
            Gets the known annotation colors.
            </summary>
            <returns>The known annotation colors.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ColorUtility.GetKnownSafeAnnotationColors">
            <summary>
            Gets the known safe annotation colors.
            </summary>
            <returns>The known safe annotation colors.</returns>
        </member>
        <member name="T:Philips.Platform.Presentation.DoubleUtility">
            <summary>
            Utility class that contains helper methods to compare doubles.
            </summary>
            <remarks>
            TODO: This file is copied from Microsoft code and has to be checked regarding the license.
            The source code can be found in:
            <list type="bullet">
              <item>
                <term>Type:</term>
                <description>MS.Internal.DoubleUtil</description>
              </item>
              <item>
                <term>Assembly:</term>
                <description>WindowsBase, Version=4.0.0.0, Culture=neutral,
                PublicKeyToken=31bf3856ad364e35</description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.DoubleUtility.DoubleEpsilon">
            <summary>
            The smallest number by which two doubles may differ and still be considered close enough
            to be equal; in other words, a measure for the precision of double calculus provided by
            this utility class.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.DoubleUtility.MinimalFloat">
            <summary>
            The minimum value for a floating point.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.DoubleUtility.AreClose(System.Double,System.Double)">
            <summary>
            Determines whether two doubles are close to each other.
            </summary>
            <param name="value1">The first double value to compare.</param>
            <param name="value2">The second double value to compare.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.DoubleUtility.LessThan(System.Double,System.Double)">
            <summary>
            Determines whether the first double is less than the second double.
            </summary>
            <param name="value1">The first double value to compare.</param>
            <param name="value2">The second double value to compare.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.DoubleUtility.GreaterThan(System.Double,System.Double)">
            <summary>
            Determines whether the first double is greater than the second double.
            </summary>
            <param name="value1">The first double value to compare.</param>
            <param name="value2">The second double value to compare.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.DoubleUtility.LessThanOrClose(System.Double,System.Double)">
            <summary>
            Determines whether the first double is less than the second double or close to it.
            </summary>
            <param name="value1">The first double value to compare.</param>
            <param name="value2">The second double value to compare.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.DoubleUtility.GreaterThanOrClose(System.Double,System.Double)">
            <summary>
            Determines whether the first double is greater than the second double or close to it.
            </summary>
            <param name="value1">The first double value to compare.</param>
            <param name="value2">The second double value to compare.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.DoubleUtility.IsOne(System.Double)">
            <summary>
            Determines whether the double is close to one.
            </summary>
            <param name="value">
            The double value for which we want to determine whether it is close to one.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.DoubleUtility.IsZero(System.Double)">
            <summary>
            Determines whether the double is close to zero.
            </summary>
            <param name="value">
            The double value for which we want to determine whether it is close to zero.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.DoubleUtility.AreClose(System.Windows.Point,System.Windows.Point)">
            <summary>
            Determines whether two points are close to each other.
            </summary>
            <param name="point1">The first point to compare.</param>
            <param name="point2">The second point to compare.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.DoubleUtility.AreClose(System.Windows.Size,System.Windows.Size)">
            <summary>
            Determines whether two sizes are close to each other.
            </summary>
            <param name="size1">The first size to compare.</param>
            <param name="size2">The second size to compare.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.DoubleUtility.AreClose(System.Windows.Vector,System.Windows.Vector)">
            <summary>
            Determines whether two vectors are close to each other.
            </summary>
            <param name="vector1">The first vector to compare.</param>
            <param name="vector2">The second vector to compare.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.DoubleUtility.AreClose(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Determines whether two rectangles are close to each other.
            </summary>
            <param name="rectangle1">The first rectangle to compare.</param>
            <param name="rectangle2">The second rectangle to compare.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.DoubleUtility.IsBetweenZeroAndOne(System.Double)">
            <summary>
            Determines whether a double is between zero and one.
            </summary>
            <param name="value">
            The double value for which we want to determine whether it is between zero and one.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.DoubleUtility.DoubleToInt(System.Double)">
            <summary>
            Converts a double into an integer.
            </summary>
            <param name="value">The double value to convert into an integer.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.DoubleUtility.RectHasNaN(System.Windows.Rect)">
            <summary>
            Determines whether a rectangle contains a position or size that is not a number.
            </summary>
            <param name="rectangle">
            The rectangle for which to determine whether it has a X-axis value, a Y-axis value,
            a height, or a width that is not a number.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.DoubleUtility.IsNaN(System.Double)">
            <summary>
            Determines whether a double is not a number.
            </summary>
            <param name="value">
            The double value for which we want to determine whether it is not a number.
            </param>
        </member>
        <member name="T:Philips.Platform.Presentation.HsvColor">
            <summary>
            Represents a color according to the Hue-Saturation-Value color model.
            </summary>
            <remarks>
            The  Hue-Saturation-Value model was created by A. R. Smith in 1978. It is based on such
            intuitive color characteristics as tint, shade and tone (or family, purity and intensity).
            The coordinate system is cylindrical, and the colors are defined inside a hexcone.
            The hue value H runs from 0° to 360°. The saturation S is the degree of strength or purity
            and is from 0 to 1. Purity is how much white is added to the color, so S=1 makes the purest
            color (no white). The brightness V also ranges from 0 to 1, where 0 is black. Both the
            saturation and the brightness value can be thought of as percentages, ranging from 0% (0)
            to 100% (1).
            </remarks>
            <seealso cref="T:System.Windows.Media.Color">Color Structure</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.HsvColor.Hue">
            <summary>
            Gets the hue.
            </summary>
            <remarks>
            The hue lies in the range [0°..360°]. The default value is 360°.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.HsvColor.Saturation">
            <summary>
            Gets the saturation.
            </summary>
            <remarks>
            The saturation lies in the range [0..1]. The default value is 1.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.HsvColor.Value">
            <summary>
            Gets the value.
            </summary>
            <remarks>
            The value lies in the range [0..1]. The default value is 1.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.HsvColor.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="hue">The hue.</param>
            <param name="saturation">The saturation.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.HsvColor.Equals(Philips.Platform.Presentation.HsvColor)">
            <summary>
            Determines whether the specified <c>HsvColor</c> is equal to the current one.
            </summary>
            <param name="other">The <c>HsvColor</c> to compare with the current one.</param>
            <returns>
            <see langword="true"/>, if the specified <c>HsvColor</c> is equal to the current one;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.HsvColor.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <remarks>
            The specified object is equal to the current object if it is an <see cref="T:Philips.Platform.Presentation.HsvColor"/>,
            and it its <see cref="F:Philips.Platform.Presentation.HsvColor.Hue"/>, <see cref="F:Philips.Platform.Presentation.HsvColor.Saturation"/>, and <see cref="F:Philips.Platform.Presentation.HsvColor.Value"/> values
            are equal (or sufficiently close) to those of the current object.
            </remarks>
            <param name="obj">The object to compare with the current object. </param>
            <returns>
            <see langword="true"/>, if the specified object is equal to the current object;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.HsvColor.GetHashCode">
            <summary>
            Serves as a hash function for <see cref="T:Philips.Platform.Presentation.HsvColor"/>.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.HsvColor.op_Equality(Philips.Platform.Presentation.HsvColor,Philips.Platform.Presentation.HsvColor)">
            <summary>
            Overloaded equality operator.
            </summary>
            <param name="hsvColor1">The first <c>HsvColor</c> to compare.</param>
            <param name="hsvColor2">The second <c>HsvColor</c> to compare.</param>
            <returns>
            <see langword="true"/>, if the specified <c>HsvColor</c> values are equal;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.HsvColor.op_Inequality(Philips.Platform.Presentation.HsvColor,Philips.Platform.Presentation.HsvColor)">
            <summary>
            Overloaded inequality operator.
            </summary>
            <param name="hsvColor1">The first <c>HsvColor</c> to compare.</param>
            <param name="hsvColor2">The second <c>HsvColor</c> to compare.</param>
            <returns>
            <see langword="true"/>, if the specified <c>HsvColor</c> values are not equal;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.HsvColor.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <remarks>
            This method is intended ONLY for development, debugging, and testing purposes.
            It returns a string in the format "Hue: {0:F2}, Saturation: {1:F2}, Value: {2:F2}",
            using a precision of two decimals for each of the three values.
            It uses the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> to prevent issues with
            decimal symbols and other locale dependencies. Do not use the result of this
            method in the user interface.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.KeyboardUtility">
            <summary>
            Utility class that contains helper methods for keyboard related functionality.
            </summary>
            <remarks>
            TODO: Investigate whether some methods from <c>MessageBox.cs</c> can be moved to this
            utility class.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.KeyboardUtility.IsEscOrAltF4(System.Windows.Input.KeyEventArgs)">
            <summary>
            Gets whether the key that is specified in the <see cref="T:System.Windows.Input.KeyEventArgs"/> is
            the ESC or the Alt+F4 key.
            </summary>
            <param name="e">The key event arguments to inspect. It is assumed that the key
            event arguments are not <see langword="null"/>.</param>
            <returns>
            <see langword="true"/>, if the specified key is the ESC or the Alt+F4 key;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.KeyboardUtility.IsKeyModifyingPopupState(System.Windows.Input.KeyEventArgs)">
            <summary>
            Gets whether the specified key modifies the state of a popup.
            </summary>
            <remarks>
            This method is currently only used by the <see cref="T:Philips.Platform.Presentation.Controls.ColorPicker"/>. We need to
            investigate whether we can give a better name to this method.
            </remarks>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Philips.Platform.Presentation.PresentationTheme">
            <summary>
            Enumeration defining the available presentation themes.
            </summary>
            <remarks>
            The WPF Toolkit supports a number of presentation themes. These include the dark and
            the light variant of the Experience Identity, as well as the various Design Language
            System (sDLS) themes. This enumeration defines all the supported presentation themes.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.PresentationTheme.DesignLanguageSystemVeryDarkGray">
            <summary>
            Presentation Theme: Design Language System (sDLS) Very Dark Gray.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.PresentationTheme.ExperienceIdentityDark">
            <summary>
            Presentation Theme: Experience Identity (Dark).
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.PresentationTheme.ExperienceIdentityLight">
            <summary>
            Presentation Theme: Experience Identity (Light).
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.ResourceUtility">
            <summary>
            Utility class that contains helper methods for handling resources.
            </summary>
            <remarks>
            <para>
            This utility class provides some helper methods to perform frequently used operations,
            such as loading a XAML icon (an <see cref="T:System.Windows.Media.ImageSource"/>) from a resource dictionary.
            </para>
            <para>
            This utility class also provides a convenience layer on top of the
            <see cref="T:Philips.Platform.Presentation.AssemblyProperties"/> class, making it easier to access the URI's for the
            resource dictionaries that are associated with the various <see cref="T:Philips.Platform.Presentation.PresentationTheme"/>
            values.
            </para>
            </remarks>
            <example>
            The code below shows how to retrieve the URI's for the resource dictionaries associated
            with some of the presentation themes that we support.
            <code lang="csharp">
            <![CDATA[
            var eiDarkUri = ResourceUtility.ExperienceIdentityDarkUri;
            var dlsUri = ResourceUtility.DlsVeryDarkGrayUri;
            ]]>
            </code>
            </example>
            <seealso cref="T:Philips.Platform.Presentation.AssemblyProperties">AssemblyProperties Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.PresentationTheme">PresentationTheme Enumeration</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.ResourceUtility.BaseUriPrefix">
            <summary>
            Gets the base URI prefix.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.ResourceUtility.IconUriPrefix">
            <summary>
            Gets the URI prefix that points to the location of the Experience Identity icons.
            </summary>
            <remarks>
            This constant string can be used to prefix the URI of Experience Identity icons that
            are embedded in the WPF Toolkit assembly. Please be aware that this is only a subset
            of the complete set of Experience Identity icons - only those icons that are actually
            used by the controls and the custom controls of the WPF Toolkit itself are embedded
            in the assembly; all other icons are not, they are deployed independent of the WPF
            Toolkit assembly. This means that you have to be very careful when you use this prefix,
            as you need to be sure that the icon is actually embedded in the assembly. Therefore,
            we advice to not use this constant, unless you are implementing a control or a custom
            control in the WPF Toolkit itself.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.ResourceUtility.DlsIconUriPrefix">
            <summary>
            Gets the URI prefix that points to the location of the sDLS icons.
            </summary>
            <remarks>
            This constant string can be used to prefix the URI of sDLS icons that are embedded in
            the WPF Toolkit assembly. Please be aware that this is only a subset of the complete
            set of sDLS icons - only those icons that are actually used by the controls and the
            custom controls of the WPF Toolkit itself are embedded in the assembly; all other icons
            are not, they are deployed independent of the WPF Toolkit assembly. This means that you
            have to be very careful when you use this prefix, as you need to be sure that the icon
            is actually embedded in the assembly. Therefore, we advice to not use this constant,
            unless you are implementing a control or a custom control in the WPF Toolkit itself.
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.ResourceUtility.CursorFolderInfix">
            <summary>
            Gets the cursor folder infix that is used to compose an <see cref="T:System.Uri"/> string
            to represent a cursor resource that needs to be loaded.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.ResourceUtility.DlsCursorFolderInfix">
            <summary>
            Gets the sDLS cursor folder infix that is used to compose an <see cref="T:System.Uri"/> string
            to represent a sDLS cursor resource that needs to be loaded.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.ResourceUtility.CursorUriPrefix">
            <summary>
            Gets the URI prefix that points to the location of the Experience Identity cursors.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.ResourceUtility.DlsCursorUriPrefix">
            <summary>
            Gets the URI prefix that points to the location of the sDLS cursors.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.ResourceUtility.CursorFilePostfix">
            <summary>
            Gets the postfix for Microsoft Windows cursor (.cur) files.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.ResourceUtility.syncRoot">
            <summary>
            Synchronization root that is used to lock the loading of cursors from cursor files.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.ResourceUtility.resourceDictionaries">
            <summary>
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> used to cache already loaded resources. Lookup is
            done via the <see cref="T:System.Uri"/> to the resource and the values are a of type
            <see langword="bool"/> indicating whether to return a
            <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.ResourceUtility.DlsIconIdDictionary">
            <summary>
            Dictionary mapping EI icon IDs to their DLS counterparts.
            </summary>
            <remarks>
            This dictionary contains a mapping only for those icons that have different IDs
            in EI and in DLS. With EI entering into maintenance mode, and DLS serving many
            different platforms and customers, we cannot always guarantee that the icon IDs
            for DLS will be the same as they were for EI...
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.ResourceUtility.dlsMulticolorIcons">
            <summary>
            A list of sDLS multicolor icons.
            </summary>
            <remarks>
            This is a list of sDLS multicolor icons that cannot be identified because they follow
            some general name scheme. Most of the icons in this list are only here because they
            are erroneously designed as multicolor icons. These icons need to be removed again
            once properly designed monochrome variants become available.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.ResourceUtility.DetermineToolkitTheme">
            <summary>
            Gets the value of the <see cref="T:Philips.Platform.Presentation.Controls.ToolkitTheme"/> enum, treating it as a
            dynamic resource.
            </summary>
            <returns>The value of <see cref="T:Philips.Platform.Presentation.Controls.ToolkitTheme"/>.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if the resource setting the <see cref="T:Philips.Platform.Presentation.Controls.ToolkitTheme"/> was not found.
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.ResourceUtility.LoadIconFromResourceDictionary(System.String)">
            <summary>
            Loads an icon from an icon resource dictionary.
            </summary>
            <remarks>
            This method loads an icon from a specified icon resource dictionary. The resource
            dictionary is located by means of the specified URI. This method can be used to
            load an icon from its XAML resource dictionary, such as "Print.xaml".
            </remarks>
            <param name="iconPath">The URI pointing to the icon resource dictionary.</param>
            <returns>
            The (first) icon that is found in the specified resource dictionary;
            or <see langword="null"/> if no such icon can be found.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ResourceUtility.LoadIconFromResourceDictionary(System.String,System.String)">
            <summary>
            Loads an icon from an icon resource dictionary.
            </summary>
            <remarks>
            This method loads an icon from a specified icon resource dictionary, for example,
            "Print.xaml". A URI pointing to the resource dictionary is constructed using
            the URI prefix and the name of the icon resource dictionary.
            </remarks>
            <param name="iconPrefix">The URI prefix.</param>
            <param name="iconDictionary">The icon resource dictionary.</param>
            <returns>
            The (first) icon that is found in the specified resource dictionary;
            or <see langword="null"/> if no such icon can be found.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ResourceUtility.LoadCursor(System.String)">
            <overloads>
            Loads the <see cref="T:System.Windows.Input.Cursor"/> specified by the cursor name.
            </overloads>
            <summary>
            Loads the Experience Identity <see cref="T:System.Windows.Input.Cursor"/> specified by the cursor name.
            </summary>
            <remarks>
            <para>
            The cursor name is taken to represent the name of the cursor file, minus the usual
            cursor file extension ".cur". This method assumes that the cursor is present as a
            resource within the WPF Toolkit assembly. So, for example, if you want to load the
            cursor called "ZoomCursor.cur", you call this method with "ZoomCursor" for the
            <paramref name="cursorName"/> parameter.
            </para>
            <para>
            The creation of a new <see cref="T:System.Windows.Input.Cursor"/> instance is locked,
            so that multi-threading issues are avoided.
            </para>
            </remarks>
            <param name="cursorName">The name of the cursor file to load.</param>
            <returns>
            The loaded <see cref="T:System.Windows.Input.Cursor"/>, or <see langword="null"/> if no cursor corresponding
            to the <paramref name="cursorName"/> could be loaded.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ResourceUtility.LoadCursor(System.String,Philips.Platform.Presentation.PresentationTheme)">
            <summary>
            Loads the <see cref="T:System.Windows.Input.Cursor"/> specified by the cursor name for the specified
            presentation theme (Experience Identity, sDLS).
            </summary>
            <remarks>
            <para>
            The cursor name is taken to represent the name of the cursor file, minus the usual
            cursor file extension ".cur". This method assumes that the cursor is present as a
            resource within the WPF Toolkit assembly. So, for example, if you want to load the
            cursor called "ZoomCursor.cur", you call this method with "ZoomCursor" for the
            <paramref name="cursorName"/> parameter.
            </para>
            <para>
            The creation of a new <see cref="T:System.Windows.Input.Cursor"/> instance is locked,
            so that multi-threading issues are avoided.
            </para>
            </remarks>
            <param name="cursorName">The name of the cursor file to load.</param>
            <param name="presentationTheme">
            The <see cref="T:Philips.Platform.Presentation.PresentationTheme"/> for which to load the cursor.</param>
            <returns>
            The loaded <see cref="T:System.Windows.Input.Cursor"/>, or <see langword="null"/> if no cursor corresponding
            to the <paramref name="cursorName"/> could be loaded.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ResourceUtility.RetrieveCursorDirectory">
            <summary>
            Gets the directory that contains the Experience Identity cursors.
            </summary>
            <remarks>
            This method retrieves the directory for the Experience Identity cursors for reasons
            of backward compatibility. If you want to retrieve the directory for the sDLS cursors,
            you should call the parameterized overload of this method with the parameter "DLS".
            </remarks>
            <returns>
            The directory that contains the Experience Identity cursors,
            or <see cref="F:System.String.Empty"/> if no such directory can be found.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ResourceUtility.RetrieveCursorDirectory(System.String)">
            <summary>
            Gets the directory that contains the Experience Identity or sDLS cursors, depending
            on the specified theme directory.
            </summary>
            <param name="theme">
            "DLS" for the DLS theme; "Experience Identity" for the Experience Identity theme.
            </param>
            <returns>
            The directory that contains the cursors for the specified theme,
            or <see cref="F:System.String.Empty"/> if no such directory can be found.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ResourceUtility.RetrieveIconDirectory">
            <summary>
            Gets the directory that contains the Experience Identity icons.
            </summary>
            <remarks>
            This method retrieves the directory for the Experience Identity icons for reasons
            of backward compatibility. If you want to retrieve the directory for the sDLS icons,
            you should call the parameterized overload of this method with the parameter "DLS".
            </remarks>
            <returns>
            The directory that contains the Experience Identity icons,
            or <see cref="F:System.String.Empty"/> if no such directory can be found.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ResourceUtility.RetrieveIconDirectory(System.String)">
            <summary>
            Gets the directory that contains the Experience Identity icons.
            </summary>
            <param name="theme">
            "DLS" for the sDLS theme; "Experience Identity" for the Experience Identity theme.
            </param>
            <returns>
            The directory that contains the icons for the specified theme,
            or <see cref="F:System.String.Empty"/> if no such directory can be found.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ResourceUtility.GetImageSource(System.String,System.String)">
            <summary>
            Gets an image source for the specified image source file name and image key.
            </summary>
            <param name="imageSourceFileName">The image source file name.</param>
            <param name="imageKey">The image key.</param>
            <returns>
            The image source for the specified image source file name and image key, if it exists;
            or <see langword="null"/>, otherwise.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ResourceUtility.GetDlsImageSource(System.String)">
            <summary>
            Gets an image source for the specified image source file name.
            The source is retrieved from the sDLS icons directory.
            </summary>
            <param name="imageSourceFileName">The image source file name.</param>
            <returns>
            The image source for the specified image source file name and image key, if it exists;
            or <see langword="null"/>, otherwise.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ResourceUtility.EnsureResources(System.Uri)">
            <summary>
            Ensures that the WPF Presentation Toolkit resources for the resource dictionary with
            the specified <see cref="T:System.Uri"/> are loaded.
            </summary>
            <param name="uri">
            A <see cref="T:System.Uri"/> specifying the resource dictionary.
            </param>
            <returns>
            This function may return a <see cref="T:System.Windows.ResourceDictionary"/> with the resources, in case
            another version of the WPF Presentation Toolkit or a different theme is already loaded.
            May return <see langword="null"/> if this is not a WPF application, or when the
            dictionary is already loaded.
            </returns>
            <remarks>
            This method must be called on the main UI thread.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.ResourceUtility.ConvertExperienceIdentityIconIdToDlsIconId(System.String)">
            <summary>
            Converts an Experience Identity icon ID to the corresponding DLS icon ID.
            </summary>
            <param name="experienceIdentityIconId">The Experience Identity icon ID.</param>
            <remarks>
            Most of the DLS icon IDs match their Experience Identity counterparts. There are,
            however, a number of DLS icon IDs that are different from the corresponding
            Experience Identity icon IDs. This method allows the caller to resolve these
            mismatches by always returning the DLS icon ID that matches the specified
            Experience Identity icon ID.
            </remarks>
            <returns>
            The DLS icon ID that corresponds to the specified Experience Identity icon ID.
            Returns <see langword="null"/> if the specified Experience Identity icon ID is
            <see langword="null"/>. Returns <see cref="F:System.String.Empty"/> if the specified
            Experience Identity icon ID is equal to <see cref="F:System.String.Empty"/>.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ResourceUtility.IsMulticolorIcon(System.String,Philips.Platform.Presentation.PresentationTheme)">
            <summary>
            Gets whether the icon with the specified ID is a multicolor icon for the specified
            presentation theme.
            </summary>
            <param name="iconId">The icon ID.</param>
            <param name="presentationTheme">The presentation theme.</param>
            <returns>
            <see langword="true"/>, if the specified icon ID represents a multicolor icon for the
            specified presentation theme; <see langword="false"/>, otherwise. This method always
            returns <see langword="true"/> for Experience Identity icons. It always returns false
            if the icon ID is <see langword="null"/> or empty.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ResourceUtility.LoadWpfResourcesFromUri(System.Uri)">
            <summary>
            Ensures that the resources from the specified <see cref="T:System.Uri"/> are loaded when
            the application is running in WPF mode.
            </summary>
            <param name="resourceUri">A <see cref="T:System.Uri"/> to the resource.</param>
            <returns>
            <see langword="true"/>, if the resources were already loaded for a different version
            of the WPF presentation toolkit; <see langword="false"/>, otherwise.
            </returns>
            <remarks>
            This method must be called on the main UI thread.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.ResourceUtility.ExperienceIdentityDarkUri">
            <summary>
            Gets the URI that represents the top-level Experience Identity Dark
            resource dictionary.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ResourceUtility.ExperienceIdentityLightUri">
            <summary>
            Gets the URI that represents the top-level Experience Identity Light
            resource dictionary.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ResourceUtility.DlsVeryDarkUri">
            <summary>
            Gets the URI that represents the top-level Design Language System (sDLS)
            Very Dark resource dictionary.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ResourceUtility.DlsVeryDarkGrayUri">
            <summary>
            Gets the URI that represents the top-level Design Language System (sDLS)
            Very Dark Gray resource dictionary.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ResourceUtility.DlsUltraLightUri">
            <summary>
            Gets the URI that represents the top-level Design Language System (sDLS)
            Ultra Light resource dictionary.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ResourceUtility.DlsVeryLightUri">
            <summary>
            Gets the URI that represents the top-level Design Language System (sDLS)
            Very Light resource dictionary.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.ResourceUtility.DlsBrightUri">
            <summary>
            Gets the URI that represents the top-level Design Language System (sDLS)
            Bright resource dictionary.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.ThemeAndCultureUtility">
            <summary>
            Utility class that contains helper methods for handling theme and culture switching.
            </summary>
            <remarks>
            <para>
            It is particularly important to use this utility when
            <see cref="P:Philips.Platform.Presentation.SharedResourceDictionary.DictionaryCachingMode"/> from
            <seealso cref="T:Philips.Platform.Presentation.SharedResourceDictionary"/>  is used to optimize
            application startup speed by reusing already loaded dictionaries.
            </para>
            <para>
            This utility class also exposes a property <see cref="P:Philips.Platform.Presentation.ThemeAndCultureUtility.UseHarmonizedCulture"/> that allows
            application builders to define, at the level of the WPF Toolkit, whether those controls
            provided by the WPF Toolkit that display a date and/or a time, should by default use the
            harmonized culture, or the local or operating system culture. WPF Toolkit controls that
            are affected by this property include the <see cref="T:Philips.Platform.Presentation.Controls.Clock"/>, the <see cref="T:Philips.Platform.Presentation.Controls.AboutBox"/>,
            the <see cref="T:Philips.Platform.Presentation.Controls.StartupScreen"/>, and the <see cref="T:Philips.Platform.Presentation.Controls.PatientBar"/>, as all of these controls
            by their nature display a date and/or a time.
            </para>
            </remarks>
            <seealso cref="T:Philips.Platform.Presentation.SharedResourceDictionary">SharedResourceDictionary Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.CultureBehavior">CultureBehavior Class</seealso>
            <seealso cref="T:System.Globalization.CultureInfo">CultureInfo Class</seealso>
        </member>
        <member name="F:Philips.Platform.Presentation.ThemeAndCultureUtility.useHarmonizedCulture">
            <summary>
            Backing field for the static <see cref="P:Philips.Platform.Presentation.ThemeAndCultureUtility.UseHarmonizedCulture"/> property.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.ThemeAndCultureUtility.useDialogDropShadowEffectOnDialogWindow">
            <summary>
            Backing field for the static <see cref="P:Philips.Platform.Presentation.ThemeAndCultureUtility.UseDialogDropShadowEffectOnDialogWindow"/>
            property.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.ThemeAndCultureUtility.IsDlsPresentationTheme(Philips.Platform.Presentation.PresentationTheme)">
            <summary>
            Gets whether the specified presentation theme is one of the supported sDLS
            presentation themes.
            </summary>
            <param name="presentationTheme">The presentation theme.</param>
            <returns>
            <see langword="true"/>, if the specified <paramref name="presentationTheme"/> is one
            of the supported sDLS <see cref="T:Philips.Platform.Presentation.PresentationTheme"/> values;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ThemeAndCultureUtility.IsExperienceIdentityPresentationTheme(Philips.Platform.Presentation.PresentationTheme)">
            <summary>
            Gets whether the specified presentation theme is one of the supported Experience
            Identity presentation themes.
            </summary>
            <param name="presentationTheme">The presentation theme.</param>
            <returns>
            <see langword="true"/>, if the specified <paramref name="presentationTheme"/> is one
            of the supported Experience Identity <see cref="T:Philips.Platform.Presentation.PresentationTheme"/> values;
            <see langword="false"/>, otherwise.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.ThemeAndCultureUtility.SelectTheme(System.Uri)">
            <summary>
            Loads and selects the resources associated with the specified theme.
            </summary>
            <param name="themeUri">
            The source location of the resource dictionary.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.ThemeAndCultureUtility.SelectCultureAndLanguage(System.String)">
            <summary>
            Sets the current culture and language.
            </summary>
            <param name="cultureName">
            A predefined CultureInfo name or the name of an existing
            CultureInfo object. cultureName is not case-sensitive.
            </param>
        </member>
        <member name="M:Philips.Platform.Presentation.ThemeAndCultureUtility.ReloadResources(System.Uri)">
            <summary>
            Reloads the resources for the specified theme.
            </summary>
            <param name="themeUri">
            The <see cref="P:System.Windows.ResourceDictionary.Source"/> location of the resource dictionary
            associated with the specified theme.
            </param>
        </member>
        <member name="E:Philips.Platform.Presentation.ThemeAndCultureUtility.StaticPropertyChanged">
            <summary>
            Generic event that is raised when one of the static properties of this class changes.
            </summary>
            <remarks>
            The name of the actual property that has changed is specified in the event's
            <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.ThemeAndCultureUtility.UseHarmonizedCulture">
            <summary>
            Gets or sets whether the WPF Toolkit controls that display a date or a time should use
            the harmonized format, or should use the local or operating system format.
            </summary>
            <remarks>
            <para>
            The default value of this property is <see langword="true"/>, meaning that by default
            the dates and times displayed by the WPF Toolkit controls will use the harmonized
            format.
            </para>
            <para>
            Raises the <see cref="E:Philips.Platform.Presentation.ThemeAndCultureUtility.StaticPropertyChanged"/> event to notify changes to the value
            of this property.
            </para>
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.ThemeAndCultureUtility.UseDialogDropShadowEffectOnDialogWindow">
            <summary>
            Gets or sets whether the WPF Toolkit dialog windows use a drop shadow effect or not.
            </summary>
            <remarks>
            <para>The default value of this property is <see langword="true"/>, meaning that by
            default the WPF Toolkit uses drop shadow effect for dialog windows.</para>
            <para>Raises the <see cref="E:Philips.Platform.Presentation.ThemeAndCultureUtility.StaticPropertyChanged"/> event to notify changes to the
            value of this property.</para>
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.DictionaryCachingMode">
            <summary>
            Enumeration defining the possible modes of dictionary caching.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.DictionaryCachingMode.Disabled">
            <summary>
            Disabled, resource dictionaries will be loaded every time they are referenced.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.DictionaryCachingMode.Enabled">
            <summary>
            Enabled, when a second instance of the resource dictionary with the same source
            is created, it is only merged from the cache.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.SharedResourceDictionary">
            <summary>
            The shared resource dictionary is a specialized <seealso cref="T:System.Windows.ResourceDictionary"/>
            that loads its content only once. If a second instance with the same source
            is created, it only merges the resources from the cache.
            </summary>
            <remarks>
            This ResourceDictionary implementation addresses a startup performance issue. Time is
            saved by preventing loading of the same resource dictionaries multiple times.
            </remarks>
            <remarks>
            The shared resource dictionary is meant for internal use only. It should be used with care
            by customers.
            </remarks>
            /// <remarks>
            Taken from http://wpftutorial.net/MergedDictionaryPerformance.html
            </remarks>
        </member>
        <member name="F:Philips.Platform.Presentation.SharedResourceDictionary.sharedDictionaries">
            <summary>
            Internal cache of loaded dictionaries 
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.SharedResourceDictionary.dictionaryCachingMode">
            <summary>
            Backing field for <see cref="P:Philips.Platform.Presentation.SharedResourceDictionary.DictionaryCachingMode"/>.
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.SharedResourceDictionary.source">
            <summary>
            Backing field for <see cref="P:Philips.Platform.Presentation.SharedResourceDictionary.Source"/>.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.SharedResourceDictionary.ClearCache">
            <summary>
            Clear the cache of shared resource dictionaries.
            </summary>
            <remarks>
            The is required before a language or culture switch.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.SharedResourceDictionary.DictionaryCachingMode">
            <summary>
            Gets or sets dictionary caching behavior.
            </summary>
            <remarks>
            By default, this property has the value
            <see cref="F:Philips.Platform.Presentation.DictionaryCachingMode.Disabled">Disabled</see>.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.SharedResourceDictionary.Source">
            <summary>
            Gets or sets the uniform resource identifier (URI) to load resources from.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.UIFinder">
            <summary>
            Utility class that contains helper methods to find ancestors or children of a
            specified element in the visual tree.
            </summary>
            <remarks>
            Sources:
            <list>
                <item><see href="http://www.hardcodet.net/2008/02/find-wpf-parent"/></item>
                <item><see href="http://stackoverflow.com/questions/636383/wpf-ways-to-find-controls"/></item>
                <item><see href="https://rachel53461.wordpress.com/2011/10/09/navigating-wpfs-visual-tree/"/></item>
            </list>
            </remarks>
            <seealso cref="T:System.Windows.DependencyObject">DependencyObject Class</seealso>
            <seealso cref="T:System.Windows.Media.VisualTreeHelper">VisualTreeHelper Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.UIFinder.FindAncestor``1(System.Windows.DependencyObject)">
            <summary>
            Finds the first ancestor in the visual tree that matches the specified type.
            </summary>
            <typeparam name="T">The type of the queried element.</typeparam>
            <param name="dependencyObject">
            The element from which the ancestor should be found.
            </param>
            <returns>
            The first ancestor that matches the specified type. If no matching element can be
            found, a <see langword="null"/> is returned.
            </returns>
            <remarks>
            The specified element itself is not included in the search.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.UIFinder.FindLogicalAncestor``1(System.Windows.DependencyObject)">
            <summary>
            Finds the first ancestor in the logical tree that matches the specified type.
            </summary>
            <typeparam name="T">The type of the queried element.</typeparam>
            <param name="dependencyObject">
            The element from which the ancestor should be found.
            </param>
            <returns>
            The first ancestor that matches the specified type. If no matching element can be
            found, a <see langword="null"/> is returned.
            </returns>
            <remarks>
            The specified element itself is not included in the search.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.UIFinder.FindAncestor``1(System.Windows.DependencyObject,System.String)">
            <summary>
            Finds the first ancestor in the visual tree that matches the specified type and name.
            </summary>
            <typeparam name="T">The type of the queried element.</typeparam>
            <param name="dependencyObject">
            The element from which the ancestor should be found.
            </param>
            <param name="name">The name of the queried element.</param>
            <returns>
            The first ancestor that matches the specified type and name. If no matching element can
            be found, a <see langword="null"/> is returned.
            </returns>
            <remarks>
            The specified element itself is not included in the search.
            If the <paramref name="name"/> is null or empty, this method will return
            the first ancestor with the specified type.
            If an ancestor is not a <see cref="T:System.Windows.FrameworkElement"/>, it does not have a name to
            match with. If it still matches the type, it will be returned.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.UIFinder.FindLogicalAncestor``1(System.Windows.DependencyObject,System.String)">
            <summary>
            Finds the first ancestor in the logical tree that matches the specified type and name.
            </summary>
            <typeparam name="T">The type of the queried element.</typeparam>
            <param name="dependencyObject">
            The element from which the ancestor should be found.
            </param>
            <param name="name">The name of the queried element.</param>
            <returns>
            The first ancestor that matches the specified type and name. If no matching element can
            be found, a <see langword="null"/> is returned.
            </returns>
            <remarks>
            The specified element itself is not included in the search.
            If the <paramref name="name"/> is null or empty, this method will return
            the first ancestor with the specified type.
            If an ancestor is not a <see cref="T:System.Windows.FrameworkElement"/>, it does not have a name to
            match with. If it still matches the type, it will be returned.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.UIFinder.FindAncestorType(System.Windows.DependencyObject,System.Type,System.Int32)">
            <summary>
            Tries to find an ancestor in both the visual and logical trees that
            matches the specified type.
            </summary>
            <param name="child">
            The element from which the ancestor should be found.
            </param>
            <param name="parentType">The type of the queried element.</param>
            <param name="searchDepth">
            The amount of levels that are included in the search.
            </param>
            <returns>
            The first ancestor that matches the specified type. If the <paramref name="child"/>
            or <paramref name="parentType"/> is <see langword="null"/>, or if no matching
            element can be found, <see langword="null"/> is returned.
            </returns>
            <remarks>
            This method will search recursively until the <paramref name="parentType"/>
            is found, or until the searchDepth is reached. If the searchdepth is high,
            this method can significantly impact performance, so caution is advised.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.UIFinder.FindAncestorType(System.Windows.DependencyObject,System.Type)">
            <summary>
            Tries to find an ancestor in both the visual and logical trees that
            matches the specified type. The maximum search depth is 3.
            </summary>
            <param name="child">
            The element from which the ancestor should be found.
            </param>
            <param name="parentType">The type of the queried element.</param>
            <returns>
            The first ancestor that matches the specified type. If no matching element can
            be found, a <see langword="null"/> is returned.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.UIFinder.GetVisualParent(System.Windows.DependencyObject)">
            <summary>
            This method is an alternative to WPF's
            <see cref="M:System.Windows.Media.VisualTreeHelper.GetParent(System.Windows.DependencyObject)"/> method and also
            supports content elements.
            </summary>
            <param name="dependencyObject">
            The element from which the parent should be retrieved.
            </param>
            <returns>
            The visual parent of the specified element, if available. Otherwise
            <see langword="null"/>.
            </returns>
            <remarks>
            For content elements, this method falls back to the logical tree to find a parent.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.UIFinder.GetLogicalParent(System.Windows.DependencyObject)">
            <summary>
            This method is an alternative to WPF's
            <see cref="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)"/> method and also
            supports content elements.
            </summary>
            <param name="dependencyObject">
            The element from which the parent should be retrieved.
            </param>
            <returns>
            The visual parent of the specified element, if available. Otherwise
            <see langword="null"/>.
            </returns>
            <remarks>
            For content elements, this method falls back to the logical tree to find a parent.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.UIFinder.FindChild``1(System.Windows.DependencyObject)">
            <summary>
            Finds a child of a given element in the visual tree.
            </summary>
            <param name="dependencyObject">
            The element from which a child should be retrieved.
            </param>
            <typeparam name="T">The type of the queried element.</typeparam>
            <remarks>
            The specified element itself is not included in the search.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.UIFinder.FindChild``1(System.Windows.DependencyObject,System.String)">
            <summary>
            Finds a child of a given element in the visual tree.
            </summary>
            <param name="dependencyObject">
            The element from which a child should be retrieved.
            </param>
            <typeparam name="T">The type of the queried element to be found.</typeparam>
            <param name="name">The name of the queried element to be found. </param>
            <remarks>
            The specified element itself is not included in the search.
            If the <paramref name="name"/> is null or empty, this method will return
            the first child with the specified type.
            If a child is not a <see cref="T:System.Windows.FrameworkElement"/>, it does not have a name to match
            with. If it still matches the type, it will be returned.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.UIFinder.FindChildren``1(System.Windows.DependencyObject,System.Collections.ObjectModel.Collection{``0})">
            <summary>
            Finds the children of a given type <typeparamref name="T"/> in the visual tree.
            </summary>
            <param name="dependencyObject">
            The element from which the children should be retrieved.
            </param>
            <typeparam name="T">The type of the queried element to be found.</typeparam>
            <param name="children"><see cref="T:System.Collections.ObjectModel.Collection`1"/> with found elements.</param>
        </member>
        <member name="M:Philips.Platform.Presentation.UIFinder.FindChildren``1(System.Windows.DependencyObject,System.String,System.Collections.ObjectModel.Collection{``0})">
            <summary>
            Finds the children of a given type <typeparamref name="T"/> in the visual tree.
            </summary>
            <param name="dependencyObject">
            The element from which the children should be retrieved.
            </param>
            <typeparam name="T">The type of the queried element to be found.</typeparam>
            <param name="children"><see cref="T:System.Collections.ObjectModel.Collection`1"/> with found elements.</param>
            <param name="name">The name of the queried element to be found. </param>
            <remarks>
            The specified element itself is not included in the search.
            If the <paramref name="name"/> is null or empty, all children of type
            <typeparamref name="T"/> will be returned.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.UIFinder.FindTemplatePart(System.Windows.Controls.Control,System.String)">
            <summary>
            Finds the named template part for the specified control.
            </summary>
            <remarks>
            <para>
            This extension method allows you to get a named template part for a control in code
            behind. This can be useful if you need to access a template part which you know is
            there, but which is otherwise inaccessible through the control's API.
            </para>
            <para>
            Please be aware that the named template parts will, in general, only be accessible
            after the control's template has been applied, i.e., after the method
            <see cref="M:System.Windows.FrameworkElement.OnApplyTemplate"/> has been called. Calling this extension
            method earlier than that may result in not being able to find the named template part,
            simply because the control has not been completed yet. Therefore, you should always
            check the result of this extension method for <see langword="null"/>.
            </para>
            </remarks>
            <param name="control">The control for which to find the named template part.</param>
            <param name="templatePartName">
            The name of the template part. Typically, a named template part starts with the
            prefix "PART_". This method does not assume that this convention if followed, though.
            </param>
            <returns>
            The named template part for the specified control, or <see langword="null"/> if no
            such template part can be found.
            </returns>
        </member>
        <member name="M:Philips.Platform.Presentation.UIFinder.GetDepth(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the nesting depth of a <see cref="T:System.Windows.Controls.TreeViewItem"/>.
            </summary>
            <param name="item">The tree view item for which to get the nesting depth.</param>
            <returns>The nesting depth for the specified tree view item.</returns>
        </member>
        <member name="M:Philips.Platform.Presentation.UIFinder.GetRoot(System.Windows.DependencyObject)">
            <summary>
            Gets the root of the visual tree that contains the specified dependency object.
            </summary>
            <param name="dependencyObject">
            The <see cref="T:System.Windows.DependencyObject"/> for which to get the root of the visual tree.
            </param>
            <returns>
            The root of the visual tree that contains the specified dependency object;
            or the dependency object itself if that turns out to be the root of the visual tree.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the specified <paramref name="dependencyObject"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Philips.Platform.Presentation.UIFinder.GetParent(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the parent of the specified <see cref="T:System.Windows.Controls.TreeViewItem"/>.
            </summary>
            <param name="item">The tree view item.</param>
            <returns>The parent of the tree view item.</returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.DoubleRangeValidationRule">
            <summary>
            Validation rule that validates whether a text input can be parsed as a double that
            lies within a specified range, determined by a minimum and a maximum.
            </summary>
            <remarks>
            This validation rule can be used as a generic rule to validate that text input represents
            a double within a specified range. The range is specified by setting the validation rule's
            <see cref="P:Philips.Platform.Presentation.Controls.DoubleRangeValidationRule.Minimum"/> and <see cref="P:Philips.Platform.Presentation.Controls.DoubleRangeValidationRule.Maximum"/> properties. The <see cref="M:Philips.Platform.Presentation.Controls.DoubleRangeValidationRule.Validate(System.Object,System.Globalization.CultureInfo)"/>
            method will return a <see cref="P:System.Windows.Controls.ValidationResult.ValidResult"/> if the text input can be
            parsed as a double that lies within the specified range; otherwise, it will return a 
            <see cref="T:System.Windows.Controls.ValidationResult"/> with localized error content, which can be displayed as
            a tooltip to give the user a hint of what is expected of her/him. 
            </remarks>
            <example>
            The following example shows how to create a required text input field for entry
            of the weight:
            <code lang="xaml">
            <![CDATA[
            <TextBox>
                <TextBox.Text>
                    <Binding Path="Weight" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <ptc:DoubleRangeValidationRule
                                Minimum="0.0"
                                Maximum="300.0"
                                ValidationStep="RawProposedValue"
                                ValidatesOnTargetUpdated="True"/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.ValidationRule">ValidationRule Class</seealso>
            <seealso cref="T:System.Windows.Controls.ValidationResult">ValidationResult Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.IntegerRangeValidationRule">IntegerRangeValidationRule Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.DoubleRangeValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Validates whether the specified input value can be parsed as a double that lies within
            the range specified by the <see cref="P:Philips.Platform.Presentation.Controls.DoubleRangeValidationRule.Minimum"/> and <see cref="P:Philips.Platform.Presentation.Controls.DoubleRangeValidationRule.Maximum"/> properties.
            </summary>
            <param name="value">The value from the binding target to check.</param>
            <param name="cultureInfo">The culture to use in this rule.</param>
            <returns>
            <see cref="P:System.Windows.Controls.ValidationResult.ValidResult"/>, if the input value can be parsed as a
            double that lies within the specified range; or a <see cref="T:System.Windows.Controls.ValidationResult"/>
            with localized error content, otherwise.
            </returns>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DoubleRangeValidationRule.Minimum">
            <summary>
            Gets or sets the minimum, i.e., the lower boundary of the range.
            </summary>
            <remarks>
            By default, the value of this property is 0.0
            (similar to <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"/>).
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.DoubleRangeValidationRule.Maximum">
            <summary>
            Gets or sets the maximum, i.e., the upper boundary of the range.
            </summary>
            <remarks>
            By default, the value of this property is <see cref="F:System.Double.MaxValue"/>.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.IntegerRangeValidationRule">
            <summary>
            Validation rule that validates whether a text input can be parsed as an integer that
            lies within a specified range, determined by a minimum and a maximum.
            </summary>
            <remarks>
            This validation rule can be used as a generic rule to validate that text input represents
            an integer within a specified range. The range is specified by setting the validation rule's
            <see cref="P:Philips.Platform.Presentation.Controls.IntegerRangeValidationRule.Minimum"/> and <see cref="P:Philips.Platform.Presentation.Controls.IntegerRangeValidationRule.Maximum"/> properties. The <see cref="M:Philips.Platform.Presentation.Controls.IntegerRangeValidationRule.Validate(System.Object,System.Globalization.CultureInfo)"/>
            method will return a <see cref="P:System.Windows.Controls.ValidationResult.ValidResult"/> if the text input can be
            parsed as an integer that lies within the specified range; otherwise, it will return a 
            <see cref="T:System.Windows.Controls.ValidationResult"/> with localized error content, which can be displayed as
            a tooltip to give the user a hint of what is expected of her/him. 
            </remarks>
            <example>
            The following example shows how to create a required text input field for entry
            of the age:
            <code lang="xaml">
            <![CDATA[
            <TextBox>
                <TextBox.Text>
                    <Binding Path="Age" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <ptc:IntegerRangeValidationRule
                                Minimum="0"
                                Maximum="150"
                                ValidationStep="RawProposedValue"
                                ValidatesOnTargetUpdated="True"/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.ValidationRule">ValidationRule Class</seealso>
            <seealso cref="T:System.Windows.Controls.ValidationResult">ValidationResult Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.DoubleRangeValidationRule">DoubleRangeValidationRule Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.IntegerRangeValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Validates whether the specified input value can be parsed as an integer that lies within
            the range specified by the <see cref="P:Philips.Platform.Presentation.Controls.IntegerRangeValidationRule.Minimum"/> and <see cref="P:Philips.Platform.Presentation.Controls.IntegerRangeValidationRule.Maximum"/> properties.
            </summary>
            <param name="value">The value from the binding target to check.</param>
            <param name="cultureInfo">The culture to use in this rule.</param>
            <returns>
            <see cref="P:System.Windows.Controls.ValidationResult.ValidResult"/>, if the input value can be parsed as an
            integer that lies within the specified range; or a <see cref="T:System.Windows.Controls.ValidationResult"/>
            with localized error content, otherwise.
            </returns>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.IntegerRangeValidationRule.Minimum">
            <summary>
            Gets or sets the minimum, i.e., the lower boundary of the range.
            </summary>
            <remarks>
            By default, the value of this property is 0 (similar to <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"/>).
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.IntegerRangeValidationRule.Maximum">
            <summary>
            Gets or sets the maximum, i.e., the upper boundary of the range.
            </summary>
            <remarks>
            By default, the value of this property is <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.PasswordValidationRule">
            <summary>
            Custom validation rule that validates whether the password provided by the user is valid.
            </summary>
            <remarks>
            <para>
            This validation rule can be used to validate the password provided by the user.
            Validation of user credentials such as username and password is mostly done by the business
            logic. Therefore, the current validation rule cannot contain any logic to determine whether
            a given password is valid. This validation rule only exists to provide a mechanism for
            communicating the result of such a validation to the user interface. The mechanism is very
            simple and works as follows. This validation rule is bound to the password input field,
            and it will provide an error message in case the provided password is invalid.
            The validation proper is done by business logic, which communicates the validation result
            by setting the static property <see cref="P:Philips.Platform.Presentation.Controls.PasswordValidationRule.IsValid"/> on this validation rule class.
            </para>
            <para>
            This validation rule can be used to validate a password independently from other user
            credentials, such as a username. If it is necessary to validate the username and the
            password in combination with each other, it is preferable to use another validation rule
            called the <see cref="T:Philips.Platform.Presentation.Controls.UserNamePasswordValidationRule"/>.
            </para>
            </remarks>
            <example>
            The following example shows how to create a password input field which has this
            validation rule attached to it.
            <code lang="xaml">
            <![CDATA[
            <PasswordBox>
                <PasswordBox.Uid>
                    <Binding Path="BindableDummy"
                        RelativeSource="{RelativeSource TemplatedParent}" 
                        Mode="TwoWay"
                        UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <ptc:PasswordValidationRule/>
                        </Binding.ValidationRules>
                   </Binding>
                </PasswordBox.Uid>
            </PasswordBox>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.ValidationRule">ValidationRule Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.UserNameValidationRule">UserNameValidationRule Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.UserNamePasswordValidationRule">UserNamePasswordValidationRule Class</seealso>
            <seealso cref="T:System.Windows.Controls.PasswordBox">PasswordBox Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.PasswordValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Validates the password provided by the user.
            </summary>
            <remarks>
            The actual validation of the password is done by the business logic, outside of this
            validation rule class. The validation result is communicated via the static property
            <see cref="P:Philips.Platform.Presentation.Controls.PasswordValidationRule.IsValid"/>. This <b>Validate</b> method merely checks the value of that
            property to determine whether the provided input is valid or invalid.
            </remarks>
            <returns>
            <see cref="P:System.Windows.Controls.ValidationResult.ValidResult"/>, if the password provided by the user is
            valid; or a <see cref="T:System.Windows.Controls.ValidationResult"/> with localized error content, otherwise.
            </returns>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.PasswordValidationRule.IsValid">
            <summary>
            Gets or sets whether the provided password is valid.
            </summary>
            <remarks>
            The actual validation of the password is done by the business logic, outside of this
            validation rule class. This static property merely exists as a hook for the business
            logic to communicate the results of the validation.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.RequiredTextInputValidationRule">
            <summary>
            Validation rule that validates whether a required text input field has received input.
            </summary>
            <remarks>
            This validation rule can be used as a generic rule to validate whether a required
            text input field has received input. The <see cref="M:Philips.Platform.Presentation.Controls.RequiredTextInputValidationRule.Validate(System.Object,System.Globalization.CultureInfo)"/> method will return
            a <see cref="P:System.Windows.Controls.ValidationResult.ValidResult"/> if the text input field has indeed
            received input that is not <b>null</b> or the empty string. It will return a
            <see cref="T:System.Windows.Controls.ValidationResult"/> indicating that this is a required text input field
            as long as no valid text input has been received.
            </remarks>
            <example>
            The following example shows how to create a required text input field for entry
            of the patient name:
            <code lang="xaml">
            <![CDATA[
            <TextBox>
                <TextBox.Text>
                    <Binding Path="PatientName" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <ptc:RequiredTextInputValidationRule
                                ValidationStep="RawProposedValue"
                                ValidatesOnTargetUpdated="True"/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.ValidationRule">ValidationRule Class</seealso>
            <seealso cref="T:System.Windows.Controls.ValidationResult">ValidationResult Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.RequiredTextInputValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Validates whether the specified value is a non-empty <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value from the binding target to check.</param>
            <param name="cultureInfo">The culture to use in this validation rule.</param>
            <returns>
            <see cref="P:System.Windows.Controls.ValidationResult.ValidResult"/>, if the specified value is a non-empty
            string (indicating that the text input field to which this validation rule applies
            has received non-empty text input); or a <see cref="T:System.Windows.Controls.ValidationResult"/> which
            indicates that no text input has been received, otherwise.
            </returns>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.UserNamePasswordValidationRule">
            <summary>
            Custom validation rule that validates whether the username and password provided by
            the user are valid.
            </summary>
            <remarks>
            <para>
            This validation rule can be used to validate the username and the password provided
            by the user. Validation of user credentials such as username and password is mostly done
            by the business logic. Therefore, the current validation rule cannot contain any logic to
            determine whether a given username and password combination is valid. This validation rule
            only exists to provide a mechanism for communicating the result of such a validation to the
            user interface. The mechanism is very simple and works as follows. This validation rule is
            bound to both the username and password input fields, and it will provide an error message
            in case the provided username and password combination is invalid, without specifying which
            of the two is causing the validation error. The validation proper is done by business logic,
            which communicates the validation result by setting the static property
            <see cref="P:Philips.Platform.Presentation.Controls.UserNamePasswordValidationRule.IsValid"/> on this validation rule class.
            </para>
            <para>
            This validation rule can be used to validate a username and password combination, without
            being specific as to whether it is the username or the password that might be invalid.
            If it is necessary to validate the username and the password independently, it is
            preferable to user other validation rules called <see cref="T:Philips.Platform.Presentation.Controls.UserNameValidationRule"/> and
            <see cref="T:Philips.Platform.Presentation.Controls.PasswordValidationRule"/>, which are better suited for this purpose.
            </para>
            </remarks>
            <example>
            The following example shows how to create a username text input field which has this
            validation rule attached to it.
            <code lang="xaml">
            <![CDATA[
            <TextBox>
                <TextBox.Text>
                    <Binding Path="UserName" 
                        RelativeSource="{RelativeSource TemplatedParent}" 
                        Mode="TwoWay" 
                        UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <ptc:UserNamePasswordValidationRule/>
                        </Binding.ValidationRules>
                     </Binding>
                </TextBox.Text>
            </TextBox>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.ValidationRule">ValidationRule Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.UserNameValidationRule">UserNameValidationRule Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PasswordValidationRule">PasswordValidationRule Class</seealso>
            <seealso cref="T:System.Windows.Controls.PasswordBox">PasswordBox Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.UserNamePasswordValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Validates the username and the password provided by the user.
            </summary>
            <remarks>
            The actual validation of the username and password is done by the business logic,
            outside of this validation rule class. The validation result is communicated via
            the static property <see cref="P:Philips.Platform.Presentation.Controls.UserNamePasswordValidationRule.IsValid"/>. This <b>Validate</b> method merely checks
            the value of that property to determine whether the provided input is valid or invalid.
            </remarks>
            <param name="value">The value from the binding target to check.</param>
            <param name="cultureInfo">The culture to use in this rule.</param>
            <returns>
            <see cref="P:System.Windows.Controls.ValidationResult.ValidResult"/>, if the username and password provided
            by the user are valid; or a <see cref="T:System.Windows.Controls.ValidationResult"/> with localized error content,
            otherwise.
            </returns>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.UserNamePasswordValidationRule.IsValid">
            <summary>
            Gets or sets whether the provided username and password are valid.
            </summary>
            <remarks>
            The actual validation of the username and password is done by the business logic,
            outside of this validation rule class. This static property merely exists as a hook
            for the business logic to communicate the results of the validation.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.Controls.UserNameValidationRule">
            <summary>
            Custom validation rule that validates whether the username provided by the user is valid.
            </summary>
            <remarks>
            <para>
            This validation rule can be used to validate the username provided by the user.
            Validation of user credentials such as username and password is mostly done by the business
            logic. Therefore, the current validation rule cannot contain any logic to determine whether
            a given username is valid. This validation rule only exists to provide a mechanism for
            communicating the result of such a validation to the user interface. The mechanism is very
            simple and works as follows. This validation rule is bound to the username input field,
            and it will provide an error message in case the provided username is invalid.
            The validation proper is done by business logic, which communicates the validation result
            by setting the static property <see cref="P:Philips.Platform.Presentation.Controls.UserNameValidationRule.IsValid"/> on this validation rule class.
            </para>
            <para>
            This validation rule can be used to validate a username independently from other user
            credentials, such as a password. If it is necessary to validate the username and the
            password in combination with each other, it is preferable to use another validation rule
            called the <see cref="T:Philips.Platform.Presentation.Controls.UserNamePasswordValidationRule"/>. 
            </para>
            </remarks>
            <example>
            The following example shows how to create a username text input field which has this
            validation rule attached to it.
            <code lang="xaml">
            <![CDATA[
            <TextBox>
                <TextBox.Text>
                    <Binding Path="UserName" 
                        RelativeSource="{RelativeSource TemplatedParent}" 
                        Mode="TwoWay" 
                        UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <ptc:UserNameValidationRule/>
                        </Binding.ValidationRules>
                     </Binding>
                </TextBox.Text>
            </TextBox>
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Windows.Controls.ValidationRule">ValidationRule Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.PasswordValidationRule">PasswordValidationRule Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.Controls.UserNamePasswordValidationRule">UserNamePasswordValidationRule Class</seealso>
        </member>
        <member name="M:Philips.Platform.Presentation.Controls.UserNameValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Validates the username provided by the user.
            </summary>
            <remarks>
            The actual validation of the username is done by the business logic, outside of this
            validation rule class. The validation result is communicated via the static property
            <see cref="P:Philips.Platform.Presentation.Controls.UserNameValidationRule.IsValid"/>. This <b>Validate</b> method merely checks the value of that
            property to determine whether the provided input is valid or invalid.
            </remarks>
            <param name="value">The value from the binding target to check.</param>
            <param name="cultureInfo">The culture to use in this rule.</param>
            <returns>
            <see cref="P:System.Windows.Controls.ValidationResult.ValidResult"/>, if the username provided by the user is
            valid; or a <see cref="T:System.Windows.Controls.ValidationResult"/> with localized error content, otherwise. 
            </returns>
        </member>
        <member name="P:Philips.Platform.Presentation.Controls.UserNameValidationRule.IsValid">
            <summary>
            Gets or sets whether the provided username is valid.
            </summary>
            <remarks>
            The actual validation of the username is done by the business logic, outside of this
            validation rule class. This static property merely exists as a hook for the business
            logic to communicate the results of the validation.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.AssemblyProperties">
            <summary>
            Defines a number of properties that are associated with the WPF Toolkit assembly.
            </summary>
            <remarks>
            <para>
            This class can be used to decrease the dependency of client code on hard-coded values
            relating to various Presentation Toolkit assembly properties. The main property of interest
            here is the <see cref="P:Philips.Platform.Presentation.AssemblyProperties.UriPrefix"/> property, which can be used to construct
            <see cref="T:System.Uri"/> instances that reference WPF Toolkit resources. The other
            properties can be derived using reflection via the <see cref="T:System.Reflection.Assembly"/> class. They are
            included here for the sake of convenience, because they are the constituent parts of the
            URI prefix.
            </para>
            <para>
            The use of this class can be convenient to prevent cohabitation issues.
            </para>
            </remarks>
            <example>
            Typically, this class is used to construct URIs that reference WPF Toolkit resources,
            without the need for a hard-coded reference to the exact WPF Toolkit version.
            The following example constructs such an URI from the URI prefix and a reference
            to the Experience Identity Dark resources.
            <code lang="csharp">
            <![CDATA[
            var uri =
                new Uri(
                    AssemblyProperties.UriPrefix +
                    "component/ExperienceIdentity/ExperienceIdentity.Dark.xaml",
                    UriKind.RelativeOrAbsolute
                );
            ]]>
            </code>
            Alternatively, you can use the <see cref="T:Philips.Platform.Presentation.ResourceUtility"/> class for more convenient
            access to the resource dictionary URI's for the various themes. The <b>ResourceUtility</b>
            itself uses this <b>AssemblyProperties</b> class to construct its URI's, it just offers
            them in a more usable and consumer-friendly fashion.
            <code lang="csharp">
            <![CDATA[
            var eiDarkUri = ResourceUtility.ExperienceIdentityDarkUri;
            var dlsVeryDarkGrayUri = ResourceUtility.DlsVeryDarkGrayUri;
            var dlsUltraLightUri = ResourceUtility.DlsUltraLightUri;
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Reflection.Assembly">Assembly Class</seealso>
            <seealso cref="T:System.Uri">Uri Class</seealso>
            <seealso cref="T:Philips.Platform.Presentation.ResourceUtility">ResourceUtility Class</seealso>
        </member>
        <member name="P:Philips.Platform.Presentation.AssemblyProperties.AssemblyName">
            <summary>
            Gets the assembly name of the Presentation Toolkit assembly.
            </summary>
            <remarks>
            This property returns the value "Philips.Platform.Presentation".
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.AssemblyProperties.AssemblyVersion">
            <summary>
            Gets the assembly version of the Presentation Toolkit assembly.
            </summary>
            <remarks>
            This property returns a <see cref="T:System.Version"/> instance consisting of a
            <see cref="P:System.Version.Major"/> and a <see cref="P:System.Version.Minor"/> version
            number.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.AssemblyProperties.PublicKeyToken">
            <summary>
            Gets the public key token of the Presentation Toolkit assembly.
            </summary>
            <remarks>
            This property returns the value "223d991ebf2e6ef5".
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.AssemblyProperties.UriPrefix">
            <summary>
            Gets the prefix that can be used to construct <see cref="T:System.Uri"/> instances that reference
            resources from the Presentation Toolkit assembly.
            </summary>
            <remarks>
            <para>
            This property returns the value
            "/Philips.Platform.Presentation;vMM.mm.0.0;223d991ebf2e6ef5;", where MM denotes the
            major version number, and mm denotes the minor version number.
            </para>
            <para>
            Please note that this value is an URI prefix, it is not a full URI.
            </para>
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.TreatAsPublicAttribute">
            <summary>
            Code with this attribute though internal should be treated as public due 
            to agreed/by design InternalVisibleTo/Reflection access
            </summary>
            <seealso cref="T:System.Attribute"/>
            <remarks>
            One could consider using the regular .NET framework <see cref="T:System.ObsoleteAttribute"/>
            to give compilation level feedback on proposal state, though that has some drawbacks.
            Using such an approach for proposed API will very likely cause the related warnings
            to be suppressed making the annotation as 'obsolete' with message 'proposed' ineffective.
            Hence the proposed annotation is an informational only at this point.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.TreatAsPublicAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.TreatAsPublicAttribute.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Philips.Platform.Presentation.TreatAsPublicAttribute"/>.
            </summary>
            <remarks>A comment why the current API needs to be treated as public.</remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.TreatAsPublicAttribute.Comment">
            <summary>
            Gets a comment why the current API needs to be treated as public.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.ProposedApiAttribute">
            <summary>
            Code with this attribute is being developed and is subject to change without notice.
            Use at your own risk.
            </summary>
            <seealso cref="T:Philips.Platform.Presentation.DeprecatedApiAttribute"/>
            <seealso cref="T:System.Attribute"/>
        </member>
        <member name="M:Philips.Platform.Presentation.ProposedApiAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.ProposedApiAttribute.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Philips.Platform.Presentation.ProposedApiAttribute"/>.
            </summary>
            <remarks>A comment why the current API needs to be changed.</remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.ProposedApiAttribute.Comment">
            <summary>
            Gets a comment why the current API needs to be changed.
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.DeprecatedApiAttribute">
            <summary>
            Code with this attribute will be removed in the near future. Please update using code 
            to use the alternative as stated in the <see cref="P:Philips.Platform.Presentation.DeprecatedApiAttribute.AlternativeText"/>.
            </summary>
            <seealso cref="T:Philips.Platform.Presentation.ProposedApiAttribute"/>
            <seealso cref="T:System.Attribute"/>
            <remarks>
            One could consider using the regular .NET framework <see cref="T:System.ObsoleteAttribute"/>
            Using such an approach for an deprecated API will very likely cause the related warnings
            to be suppressed making the annotation as deprecated ineffective.
            With the deprecated <see cref="T:Philips.Platform.Presentation.DeprecatedApiAttribute"/> we also indicate a grace period.
            Hence the deprecated annotation is an informational only at this point.
            </remarks>
        </member>
        <member name="M:Philips.Platform.Presentation.DeprecatedApiAttribute.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Constructor.</summary>
            <param name="alternativeText">A text that hints at an alternative API.</param>
            <param name="deprecatedYear">The "year" of the date on which code decorated with this 
            attribute was marked as deprecated.</param>
            <param name="deprecatedMonth">The "month" of the date on which code decorated with this 
            attribute was marked as deprecated.</param>
            <param name="deprecatedDay">The "day" of the date on which code decorated with this 
            attribute was marked as deprecated.</param>
        </member>
        <member name="P:Philips.Platform.Presentation.DeprecatedApiAttribute.AlternativeText">
            <summary>
            Gets a text that hints at an alternative API to be used instead of the current API,
            which is deprecated.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.DeprecatedApiAttribute.DeprecatedDay">
            <summary>
            Gets the day on which code decorated with this attribute was marked as deprecated.
            </summary>
            <remarks>
            <see cref="P:Philips.Platform.Presentation.DeprecatedApiAttribute.DeprecatedDate"/> can be used by dedicated tooling to query or filter
            deprecated APIs, e.g. generate list of new APIs which are deprecated, or generate lists
            of deprecated APIs whose code can be safely removed after a grace period.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.DeprecatedApiAttribute.DeprecatedMonth">
            <summary>
            Gets the month on which code decorated with this attribute was marked as deprecated.
            </summary>
            <remarks>
            <see cref="P:Philips.Platform.Presentation.DeprecatedApiAttribute.DeprecatedDate"/> can be used by dedicated tooling to query or filter
            deprecated APIs, e.g. generate list of new APIs which are deprecated, or generate lists
            of deprecated APIs whose code can be safely removed after a grace period.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.DeprecatedApiAttribute.DeprecatedYear">
            <summary>
            Gets the year on which code decorated with this attribute was marked as deprecated.
            </summary>
            <remarks>
            <see cref="P:Philips.Platform.Presentation.DeprecatedApiAttribute.DeprecatedDate"/> can be used by dedicated tooling to query or filter
            deprecated APIs, e.g. generate list of new APIs which are deprecated, or generate lists
            of deprecated APIs whose code can be safely removed after a grace period.
            </remarks>
        </member>
        <member name="P:Philips.Platform.Presentation.DeprecatedApiAttribute.DeprecatedDate">
            <summary>
            Gets the date on which code decorated with this attribute was marked as deprecated.
            </summary>
            <remarks>
            <see cref="P:Philips.Platform.Presentation.DeprecatedApiAttribute.DeprecatedDate"/> can be used by dedicated tooling to query or filter
            deprecated APIs, e.g. generate list of new APIs which are deprecated, or generate lists
            of deprecated APIs whose code can be safely removed after a grace period.
            </remarks>
        </member>
        <member name="T:Philips.Platform.Presentation.ComponentType">
             <summary>
             Indicates the type, purpose of component
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.ComponentType.Product">
             <summary>
             By default components belong to production code
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.ComponentType.Tool">
             <summary>
             Tools, NOT part of product code
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.ComponentType.Test">
             <summary>
             Test code
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.ComponentType.TestFramework">
             <summary>
             Test framework code
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.ComponentType.Example">
             <summary>
             Example code
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.AnnotationScope">
             <summary>
             Indicates the scope of this annotation, assembly, namespace, type
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.AnnotationScope.Assembly">
             <summary>
             Annotation applies to the assembly
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.AnnotationScope.Namespace">
             <summary>
             Annotation applies to the namespace of the provided type
            </summary>
        </member>
        <member name="F:Philips.Platform.Presentation.AnnotationScope.Type">
             <summary>
             Annotation applies to the provided type (and its nested types)
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.InComponentAttribute">
             <summary>
             Indicates that an assembly or class is part of the
             given component name.<br/><br/>
            
             Example:
             <code>
             // Next line tags the current assembly as being part of "Connectivity" component
             // and tags the code as being  'Test' code
             [assembly: InComponent("Connectivity", ComponentType.Test)] 
            
             // Next line tags the type SystemResourceUsage as being part of "Storage Device" component
             // and tags the code as being a 'TestFramework'
             [assembly: InComponent("Storage Device", ComponentType.TestFramework, typeof(SystemResourceUsage))] 
            
             // Next line tags the namespace of the type TestDataUtilities as being part of "Storage Device" component
             // and tags the code as being a 'TestFramework'
             [assembly: InComponent("Storage Device", ComponentType.TestFramework, typeof(TestDataUtilities), AnnotationScope.Namespace)] 
             </code>
             Any more specific annotation overrules more generic, e.g. namespace annotation overrules assembly annotation, 
             type annotation overrules namespace annotation
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.InComponentAttribute.#ctor(System.String)">
            <summary>
            Define the component to which this assembly belongs
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.InComponentAttribute.#ctor(System.String,Philips.Platform.Presentation.ComponentType)">
            <summary>
            Define the component to which this assembly type belongs 
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.InComponentAttribute.#ctor(System.String,System.Type,Philips.Platform.Presentation.AnnotationScope)">
            <summary>
            Define the component to which the provided type (or its namespace) belongs
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.InComponentAttribute.#ctor(System.String,Philips.Platform.Presentation.ComponentType,System.Type)">
            <summary>
            Define the component to which the provided type (or its namespace) belongs
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.InComponentAttribute.#ctor(System.String,Philips.Platform.Presentation.ComponentType,System.Type,Philips.Platform.Presentation.AnnotationScope)">
            <summary>
            Define the component to which the provided type (or its namespace) belongs
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.InComponentAttribute.ToString">
            <summary>
            Returns: component name '/' component type
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.InComponentAttribute.ComponentName">
            <summary>
            The name of the component as defined
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.InComponentAttribute.Prefix">
            <summary>
            Targeted type/namespace, will be empty when targeting an assembly.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.InComponentAttribute.ComponentTypeName">
            <summary>
            Name of the type of component, <see cref="T:Philips.Platform.Presentation.ComponentType"/>
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.CodeBaseAttribute">
            <summary>
            Indicates that an assembly or class is part of the specified codebase/sub codebase
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.CodeBaseAttribute.#ctor(System.String)">
            <summary>
            Define the code base to which this assembly belongs
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.CodeBaseAttribute.#ctor(System.String,System.String)">
            <summary>
            Define the code base and sub code base to which this assembly belongs
            </summary>
        </member>
        <member name="M:Philips.Platform.Presentation.CodeBaseAttribute.ToString">
            <summary>
            Returns the <see cref="P:Philips.Platform.Presentation.CodeBaseAttribute.CodeBase"/> / <see cref="P:Philips.Platform.Presentation.CodeBaseAttribute.SubCodeBase"/>
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.CodeBaseAttribute.CodeBase">
            <summary>
            Name of the CodeBase
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.CodeBaseAttribute.SubCodeBase">
            <summary>
            Name of the SubCodeBase
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.LegalTextResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.LegalTextResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.LegalTextResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.LegalTextResources.Copyright">
            <summary>
              Looks up a localized string similar to © Koninklijke Philips N.V. {0}.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.LegalTextResources.CopyrightClause">
            <summary>
              Looks up a localized string similar to All rights are reserved. Reproduction or transmission in whole or in part, in any form or by any means, electronic, mechanical or otherwise, is prohibited without the prior written consent of the copyright owner..
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.LegalTextResources.EndUserLicenseAgreementLink">
            <summary>
              Looks up a localized string similar to View the End-User License Agreement.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.LegalTextResources.Manufacturer">
            <summary>
              Looks up a localized string similar to Philips Medical Systems Nederland B.V..
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.LegalTextResources.ManufacturingAddress">
            <summary>
              Looks up a localized string similar to Veenpluis 4-6 5684 PC Best THE NETHERLANDS.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.LegalTextResources.MedicalDeviceClassOneMeasuringText">
            <summary>
              Looks up a localized string similar to This Medical Device meets the provisions of the transposition of the Medical Device Directive 93/42/EEC within the country of origin of the Notified Body concerned with the device..
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.LegalTextResources.MedicalDeviceClassOneText">
            <summary>
              Looks up a localized string similar to This Medical Device meets the provisions of the transposition of the Medical Device Directive 93/42/EEC within the country of the EU Authorized Representative for the device concerned..
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.LegalTextResources.NonDiagnosticStatement">
            <summary>
              Looks up a localized string similar to Not for official interpretation..
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.LegalTextResources.ReengineeringStatement">
            <summary>
              Looks up a localized string similar to To the maximum extent permitted by law, you shall not decompile and/or reverse engineer the software or any part thereof..
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.LegalTextResources.SoftwareLicensingStatement">
            <summary>
              Looks up a localized string similar to Copyrights and all other proprietary rights in any software and related documentation (&quot;Software&quot;) made available to you rest exclusively with Philips or its licensors. No title or ownership in the Software is conferred to you. Use of the Software is subject to the end user license conditions as are available on request..
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.LegalTextResources.WarrantyDisclaimer">
            <summary>
              Looks up a localized string similar to The {0} is provided on an “as is“ basis without warranty of any kind, including without limitation, the warranty that it is free from defects. No use of the {0} is authorized hereunder except under this disclaimer..
            </summary>
        </member>
        <member name="T:Philips.Platform.Presentation.TextResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Abort">
            <summary>
              Looks up a localized string similar to _Abort.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.AccessionNumber">
            <summary>
              Looks up a localized string similar to Accession Number.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Age">
            <summary>
              Looks up a localized string similar to Age.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.AutoHide">
            <summary>
              Looks up a localized string similar to Auto Hide.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.AvailableColors">
            <summary>
              Looks up a localized string similar to Available Colors.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Cancel">
            <summary>
              Looks up a localized string similar to _Cancel.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.CapsLockWarning">
            <summary>
              Looks up a localized string similar to Caps Lock is turned on.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Close">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorBlack">
            <summary>
              Looks up a localized string similar to Black.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorBlue">
            <summary>
              Looks up a localized string similar to Blue.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorBrown">
            <summary>
              Looks up a localized string similar to Brown.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorBurgundy">
            <summary>
              Looks up a localized string similar to Burgundy.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorComponentAlpha">
            <summary>
              Looks up a localized string similar to A.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorComponentBlue">
            <summary>
              Looks up a localized string similar to B.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorComponentGreen">
            <summary>
              Looks up a localized string similar to G.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorComponentRed">
            <summary>
              Looks up a localized string similar to R.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorDarkBlue">
            <summary>
              Looks up a localized string similar to Dark Blue.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorDarkGreen">
            <summary>
              Looks up a localized string similar to Dark Green.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorDarkLilac">
            <summary>
              Looks up a localized string similar to Dark Lilac.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorDarkMagenta">
            <summary>
              Looks up a localized string similar to Dark Magenta.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorDarkOrange">
            <summary>
              Looks up a localized string similar to Dark Orange.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorGreen">
            <summary>
              Looks up a localized string similar to Green.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorLightBlue">
            <summary>
              Looks up a localized string similar to Light Blue.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorLightGreen">
            <summary>
              Looks up a localized string similar to Light Green.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorLilac">
            <summary>
              Looks up a localized string similar to Lilac.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorMagenta">
            <summary>
              Looks up a localized string similar to Magenta.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorOrange">
            <summary>
              Looks up a localized string similar to Orange.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorPink">
            <summary>
              Looks up a localized string similar to Pink.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorPurple">
            <summary>
              Looks up a localized string similar to Purple.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorRed">
            <summary>
              Looks up a localized string similar to Red.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Colors">
            <summary>
              Looks up a localized string similar to Colors.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorTurquoise">
            <summary>
              Looks up a localized string similar to Turquoise.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorVeryDarkBlue">
            <summary>
              Looks up a localized string similar to Very Dark Blue.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorWhite">
            <summary>
              Looks up a localized string similar to White.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ColorYellow">
            <summary>
              Looks up a localized string similar to Yellow.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Copy">
            <summary>
              Looks up a localized string similar to Copy.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Custom">
            <summary>
              Looks up a localized string similar to Custom.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Cut">
            <summary>
              Looks up a localized string similar to Cut.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.DateOfBirth">
            <summary>
              Looks up a localized string similar to Date of Birth.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.DecreaseFrameRate">
            <summary>
              Looks up a localized string similar to Decrease Frame Rate.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.FirstName">
            <summary>
              Looks up a localized string similar to First Name.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.FrameRate">
            <summary>
              Looks up a localized string similar to Frame Rate.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.FrameRateUnit">
            <summary>
              Looks up a localized string similar to fps.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Gender">
            <summary>
              Looks up a localized string similar to Gender.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.GenderFemaleLong">
            <summary>
              Looks up a localized string similar to Female.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.GenderFemaleShort">
            <summary>
              Looks up a localized string similar to F.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.GenderMaleLong">
            <summary>
              Looks up a localized string similar to Male.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.GenderMaleShort">
            <summary>
              Looks up a localized string similar to M.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.GenderOtherLong">
            <summary>
              Looks up a localized string similar to Other.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.GenderOtherShort">
            <summary>
              Looks up a localized string similar to O.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.GenderUnknown">
            <summary>
              Looks up a localized string similar to Unknown.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Help">
            <summary>
              Looks up a localized string similar to _Help.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.HelpToolTip">
            <summary>
              Looks up a localized string similar to Help.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Hide">
            <summary>
              Looks up a localized string similar to Hide.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Ignore">
            <summary>
              Looks up a localized string similar to _Ignore.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.IncreaseFrameRate">
            <summary>
              Looks up a localized string similar to Increase Frame Rate.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.InvalidPassword">
            <summary>
              Looks up a localized string similar to Incorrect password.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.InvalidUserName">
            <summary>
              Looks up a localized string similar to Incorrect username.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.InvalidUserNameOrPassword">
            <summary>
              Looks up a localized string similar to Your logon details are incorrect..
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.LastName">
            <summary>
              Looks up a localized string similar to Last Name.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.LogOn">
            <summary>
              Looks up a localized string similar to _Log on.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Maximize">
            <summary>
              Looks up a localized string similar to Maximize.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Minimize">
            <summary>
              Looks up a localized string similar to Minimize.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.More">
            <summary>
              Looks up a localized string similar to More.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.MoreApplications">
            <summary>
              Looks up a localized string similar to More Applications.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.NavigationPaneExpand">
            <summary>
              Looks up a localized string similar to Expand the Navigation Pane.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.NavigationPaneMinimize">
            <summary>
              Looks up a localized string similar to Minimize the Navigation Pane.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.NextImage">
            <summary>
              Looks up a localized string similar to Next Image.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.NextPage">
            <summary>
              Looks up a localized string similar to Next Page.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.NextSeries">
            <summary>
              Looks up a localized string similar to Next Series.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.No">
            <summary>
              Looks up a localized string similar to _No.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.NoKnownAllergies">
            <summary>
              Looks up a localized string similar to No known allergies..
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.NoKnownAllergiesOrMedicalAlerts">
            <summary>
              Looks up a localized string similar to No known allergies or medical alerts..
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.NoKnownMedicalAlerts">
            <summary>
              Looks up a localized string similar to No known medical alerts..
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.NumericField">
            <summary>
              Looks up a localized string similar to Please enter numeric characters only..
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.NumericRangeField">
            <summary>
              Looks up a localized string similar to Please enter a number between {0} and {1}..
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Ok">
            <summary>
              Looks up a localized string similar to _OK.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.PageDown">
            <summary>
              Looks up a localized string similar to Page Down.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.PageLeft">
            <summary>
              Looks up a localized string similar to Page Left.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.PageRight">
            <summary>
              Looks up a localized string similar to Page Right.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.PageUp">
            <summary>
              Looks up a localized string similar to Page Up.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Password">
            <summary>
              Looks up a localized string similar to Password.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.PasswordWatermark">
            <summary>
              Looks up a localized string similar to Type your password.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Paste">
            <summary>
              Looks up a localized string similar to Paste.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.PatientGender">
            <summary>
              Looks up a localized string similar to Patient Gender.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.PatientHeight">
            <summary>
              Looks up a localized string similar to Height.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.PatientIdentifier">
            <summary>
              Looks up a localized string similar to Patient ID.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Patients">
            <summary>
              Looks up a localized string similar to Patients.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.PatientWeight">
            <summary>
              Looks up a localized string similar to Weight.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.PauseMovie">
            <summary>
              Looks up a localized string similar to Pause.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.PlayMovie">
            <summary>
              Looks up a localized string similar to Play.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.PreviousImage">
            <summary>
              Looks up a localized string similar to Previous Image.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.PreviousPage">
            <summary>
              Looks up a localized string similar to Previous Page.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.PreviousSeries">
            <summary>
              Looks up a localized string similar to Previous Series.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.RecentColors">
            <summary>
              Looks up a localized string similar to Recent Colors.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ReferringPhysician">
            <summary>
              Looks up a localized string similar to Referring Physician.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.RequiredField">
            <summary>
              Looks up a localized string similar to This is a required field. Please enter text or select an option..
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Restore">
            <summary>
              Looks up a localized string similar to Restore.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Retry">
            <summary>
              Looks up a localized string similar to _Retry.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ScrollDown">
            <summary>
              Looks up a localized string similar to Scroll Down.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ScrollHere">
            <summary>
              Looks up a localized string similar to Scroll Here.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ScrollLeft">
            <summary>
              Looks up a localized string similar to Scroll Left.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ScrollRight">
            <summary>
              Looks up a localized string similar to Scroll Right.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ScrollToBottom">
            <summary>
              Looks up a localized string similar to Bottom.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ScrollToLeftEnd">
            <summary>
              Looks up a localized string similar to Left Edge.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ScrollToRightEnd">
            <summary>
              Looks up a localized string similar to Right Edge.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ScrollToTop">
            <summary>
              Looks up a localized string similar to Top.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ScrollUp">
            <summary>
              Looks up a localized string similar to Scroll Up.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.SelectAll">
            <summary>
              Looks up a localized string similar to Select All.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.SeriesOverview">
            <summary>
              Looks up a localized string similar to Series Overview.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Show">
            <summary>
              Looks up a localized string similar to Show.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ShutDown">
            <summary>
              Looks up a localized string similar to _Shut down.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Standard">
            <summary>
              Looks up a localized string similar to Standard.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.StandardColors">
            <summary>
              Looks up a localized string similar to Standard Colors.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.StudyCycle">
            <summary>
              Looks up a localized string similar to Cycle Study.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.StudyDate">
            <summary>
              Looks up a localized string similar to Study Date.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.StudyDescription">
            <summary>
              Looks up a localized string similar to Study Description.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.StudyId">
            <summary>
              Looks up a localized string similar to Study ID.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.StudyOverview">
            <summary>
              Looks up a localized string similar to Study Overview.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Today">
            <summary>
              Looks up a localized string similar to Today.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ToolBarExpand">
            <summary>
              Looks up a localized string similar to Expand the Toolbar.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ToolBarMinimize">
            <summary>
              Looks up a localized string similar to Minimize the Toolbar.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Undo">
            <summary>
              Looks up a localized string similar to Undo.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Unknown">
            <summary>
              Looks up a localized string similar to Unknown.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.UserName">
            <summary>
              Looks up a localized string similar to Username.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.UserNameWatermark">
            <summary>
              Looks up a localized string similar to Type your username.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ViewModeList">
            <summary>
              Looks up a localized string similar to List.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.ViewModeTiles">
            <summary>
              Looks up a localized string similar to Tiles.
            </summary>
        </member>
        <member name="P:Philips.Platform.Presentation.TextResources.Yes">
            <summary>
              Looks up a localized string similar to _Yes.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
