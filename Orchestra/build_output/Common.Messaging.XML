<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common.Messaging</name>
    </assembly>
    <members>
        <member name="T:Common.Messaging.Messaging">
            <summary>
            Messaging
            </summary>
        </member>
        <member name="M:Common.Messaging.Messaging.#cctor">
            <summary>
            Initializes the <see cref="T:Common.Messaging.Messaging"/> class.
            </summary>
        </member>
        <member name="M:Common.Messaging.Messaging.Proxy(System.String)">
            <summary>
            Proxy to the specified end point.
            </summary>
            <param name="endPoint">The end point.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Messaging.Messaging.BasicRMQ(System.String)">
            <summary>
            Basics the specified queue.
            </summary>
            <param name="queue">The queue.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Messaging.Messaging.BasicZMQ(System.String)">
            <summary>
            Basics the specified queue.
            </summary>
            <param name="queue">The queue.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Messaging.Messaging.PubSub(System.String,System.String)">
            <summary>
            Pubs the sub.
            </summary>
            <param name="queue">The queue.</param>
            <param name="exchange">The exchange.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Messaging.Messaging.Routing(System.String,System.String,System.String)">
            <summary>
            Routings the specified queue.
            </summary>
            <param name="queue">The queue.</param>
            <param name="exchange">The exchange.</param>
            <param name="keyWords">The key words.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Messaging.Messaging.Topics(System.String,System.String,System.String)">
            <summary>
            Topicses the specified queue.
            </summary>
            <param name="queue">The queue.</param>
            <param name="exchange">The exchange.</param>
            <param name="topicDescriptor">The topic descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Messaging.Messaging.RPC(System.String,System.String)">
            <summary>
            RPCs the specified server queue.
            </summary>
            <param name="serverQueue">The server queue.</param>
            <param name="responceQueue">The responce queue.</param>
            <returns></returns>
        </member>
        <member name="T:Common.Messaging.Messaging.BasicZero">
            <summary>
            Basic
            </summary>
        </member>
        <member name="T:Common.Messaging.Messaging.ZeroMQBase">
            <summary>
            MessageBase
            </summary>
        </member>
        <member name="T:Common.Messaging.IConsume">
            <summary>
            IConsume
            </summary>
        </member>
        <member name="M:Common.Messaging.IConsume.DeQueue">
            <summary>
            Des the queue.
            </summary>
        </member>
        <member name="M:Common.Messaging.IConsume.DeQueue(System.Boolean)">
            <summary>
            Des the queue.
            </summary>
            <param name="purge">if set to <c>true</c> [purge].</param>
        </member>
        <member name="M:Common.Messaging.IConsume.RegisterHandler``1(System.Action{``0})">
            <summary>
            Registers the handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Common.Messaging.IConsume.Stop">
            <summary>
            Stops dequeuing.
            </summary>
        </member>
        <member name="M:Common.Messaging.IConsume.AddBinding(System.String,System.String)">
            <summary>
            Binds the queue to exchange.
            </summary>
            <param name="exchange">The exchange.</param>
            <param name="binding">The binding.</param>
        </member>
        <member name="T:Common.Messaging.IPublish">
            <summary>
            IPublish
            </summary>
        </member>
        <member name="M:Common.Messaging.IPublish.Publish``1(``0)">
            <summary>
            Publishes the specified Messaging.
            </summary>
            <param name="message">The Messaging.</param>
        </member>
        <member name="T:Common.Messaging.IMessaging">
            <summary>
            IMessaging
            </summary>
        </member>
        <member name="P:Common.Messaging.IMessaging.Consumer">
            <summary>
            Gets the consumer.
            </summary>
            <value>
            The consumer.
            </value>
        </member>
        <member name="P:Common.Messaging.IMessaging.Publisher">
            <summary>
            Gets the publisher.
            </summary>
            <value>
            The publisher.
            </value>
        </member>
        <member name="F:Common.Messaging.Messaging.ZeroMQBase._handlers">
            <summary>
            The message handlers
            </summary>
        </member>
        <member name="F:Common.Messaging.Messaging.ZeroMQBase._zmqContext">
            <summary>
            The _connection
            </summary>
        </member>
        <member name="F:Common.Messaging.Messaging.ZeroMQBase._zmqSocket">
            <summary>
            The channel
            </summary>
        </member>
        <member name="F:Common.Messaging.Messaging.ZeroMQBase._type">
            <summary>
            The _type
            </summary>
        </member>
        <member name="F:Common.Messaging.Messaging.ZeroMQBase._continueDequeue">
            <summary>
            The _continue dequeue
            </summary>
        </member>
        <member name="M:Common.Messaging.Messaging.ZeroMQBase.#ctor(Common.Messaging.Topology,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Messages.MessageBase"/> class.
            </summary>
            <param name="topology">The topology.</param>
            <param name="bindings">The bindings.</param>
        </member>
        <member name="M:Common.Messaging.Messaging.ZeroMQBase.Common#Messaging#IPublish#Publish``1(``0)">
            <summary>
            Publishes the specified Messaging.
            </summary>
            <param name="message">The Messaging.</param>
            <exception cref="T:System.ArgumentNullException">Messaging;Invalid Messaging...</exception>
            <exception cref="T:System.InvalidOperationException">Is a comsumer instance!!</exception>
        </member>
        <member name="M:Common.Messaging.Messaging.ZeroMQBase.ToByte``1(``0)">
            <summary>
            Object To byte[].
            </summary>
            <param name="message">The Messaging.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Messaging.Messaging.ZeroMQBase.FromByte(System.Byte[])">
            <summary>
            Froms byte[] to Object.
            </summary>
            <param name="body">The body.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Messaging.Messaging.ZeroMQBase.Common#Messaging#IConsume#DeQueue">
            <summary>
            Dequeue the Messaging.
            </summary>
            <exception cref="T:System.ArgumentNullException">handler;Invalid handler...</exception>
            <exception cref="T:System.InvalidOperationException">Is a publisher instance!!</exception>
        </member>
        <member name="M:Common.Messaging.Messaging.ZeroMQBase.DeQueue(System.Boolean)">
            <summary>
            Des the queue.
            </summary>
            <param name="purge">if set to <c>true</c> [purge].</param>
            <exception cref="T:System.InvalidOperationException">Is a publisher instance!!</exception>
        </member>
        <member name="M:Common.Messaging.Messaging.ZeroMQBase.RegisterHandler``1(System.Action{``0})">
            <summary>
            Registers the handler.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handler">The handler.</param>
            <exception cref="T:System.ArgumentNullException">handler;Invalid handler...</exception>
        </member>
        <member name="M:Common.Messaging.Messaging.ZeroMQBase.HandleMessage(Common.Messages.MessageBase)">
            <summary>
            Handles the message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Common.Messaging.Messaging.ZeroMQBase.Common#Messaging#IConsume#Stop">
            <summary>
            Stops dequeuing.
            </summary>
        </member>
        <member name="M:Common.Messaging.Messaging.ZeroMQBase.AddBinding(System.String,System.String)">
            <summary>
            Binds the queue to exchange.
            </summary>
            <param name="exchange">The exchange.</param>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:Common.Messaging.Messaging.ZeroMQBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Common.Messaging.Messaging.ZeroMQBase.Topology">
            <summary>
            Gets or sets the topology.
            </summary>
            <value>
            The topology.
            </value>
        </member>
        <member name="P:Common.Messaging.Messaging.ZeroMQBase.SocketType">
            <summary>
            Gets or sets the type of the exchange.
            </summary>
            <value>
            The type of the exchange.
            </value>
        </member>
        <member name="P:Common.Messaging.Messaging.ZeroMQBase.Bindings">
            <summary>
            Gets or sets the binding.
            </summary>
            <value>
            The binding.
            </value>
        </member>
        <member name="P:Common.Messaging.Messaging.ZeroMQBase.Consumer">
            <summary>
            Gets the Consumer.
            </summary>
            <value>
            The consume.
            </value>
        </member>
        <member name="P:Common.Messaging.Messaging.ZeroMQBase.Publisher">
            <summary>
            Gets the Publisher.
            </summary>
            <value>
            The publish.
            </value>
        </member>
        <member name="M:Common.Messaging.Messaging.BasicZero.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Messaging.Messaging.BasicZero"/> class.
            </summary>
            <param name="binding">The binding.</param>
        </member>
        <member name="T:Common.Messaging.Messaging.BasicRabbit">
            <summary>
            Basic
            </summary>
        </member>
        <member name="T:Common.Messaging.Messaging.RabbitMQBase">
            <summary>
            MessageBase
            </summary>
        </member>
        <member name="F:Common.Messaging.Messaging.RabbitMQBase.HostName">
            <summary>
            The host name
            </summary>
        </member>
        <member name="F:Common.Messaging.Messaging.RabbitMQBase._handlers">
            <summary>
            The message handlers
            </summary>
        </member>
        <member name="F:Common.Messaging.Messaging.RabbitMQBase._connection">
            <summary>
            The _connection
            </summary>
        </member>
        <member name="F:Common.Messaging.Messaging.RabbitMQBase._channel">
            <summary>
            The channel
            </summary>
        </member>
        <member name="F:Common.Messaging.Messaging.RabbitMQBase._consumer">
            <summary>
            The _consumer
            </summary>
        </member>
        <member name="F:Common.Messaging.Messaging.RabbitMQBase._type">
            <summary>
            The _type
            </summary>
        </member>
        <member name="F:Common.Messaging.Messaging.RabbitMQBase._continueDequeue">
            <summary>
            The _continue dequeue
            </summary>
        </member>
        <member name="M:Common.Messaging.Messaging.RabbitMQBase.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Messages.MessageBase"/> class.
            </summary>
            <param name="queue">The queue.</param>
            <param name="exchange">The exchange.</param>
            <param name="bindings">The bindings.</param>
        </member>
        <member name="M:Common.Messaging.Messaging.RabbitMQBase.Common#Messaging#IPublish#Publish``1(``0)">
            <summary>
            Publishes the specified Messaging.
            </summary>
            <param name="message">The Messaging.</param>
            <exception cref="T:System.ArgumentNullException">Messaging;Invalid Messaging...</exception>
            <exception cref="T:System.InvalidOperationException">Is a comsumer instance!!</exception>
        </member>
        <member name="M:Common.Messaging.Messaging.RabbitMQBase.ToByte``1(``0)">
            <summary>
            Object To byte[].
            </summary>
            <param name="message">The Messaging.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Messaging.Messaging.RabbitMQBase.FromByte(System.Byte[])">
            <summary>
            Froms byte[] to Object.
            </summary>
            <param name="body">The body.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Messaging.Messaging.RabbitMQBase.Common#Messaging#IConsume#DeQueue">
            <summary>
            Dequeue the Messaging.
            </summary>
            <exception cref="T:System.ArgumentNullException">handler;Invalid handler...</exception>
            <exception cref="T:System.InvalidOperationException">Is a publisher instance!!</exception>
        </member>
        <member name="M:Common.Messaging.Messaging.RabbitMQBase.DeQueue(System.Boolean)">
            <summary>
            Des the queue.
            </summary>
            <param name="purge">if set to <c>true</c> [purge].</param>
            <exception cref="T:System.InvalidOperationException">Is a publisher instance!!</exception>
        </member>
        <member name="M:Common.Messaging.Messaging.RabbitMQBase.RegisterHandler``1(System.Action{``0})">
            <summary>
            Registers the handler.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handler">The handler.</param>
            <exception cref="T:System.ArgumentNullException">handler;Invalid handler...</exception>
        </member>
        <member name="M:Common.Messaging.Messaging.RabbitMQBase.HandleMessage(Common.Messages.MessageBase)">
            <summary>
            Handles the message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Common.Messaging.Messaging.RabbitMQBase.Common#Messaging#IConsume#Stop">
            <summary>
            Stops dequeuing.
            </summary>
        </member>
        <member name="M:Common.Messaging.Messaging.RabbitMQBase.AddBinding(System.String,System.String)">
            <summary>
            Binds the queue to exchange.
            </summary>
            <param name="exchange">The exchange.</param>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:Common.Messaging.Messaging.RabbitMQBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Common.Messaging.Messaging.RabbitMQBase.Queue">
            <summary>
            Gets or sets the queue.
            </summary>
            <value>
            The queue.
            </value>
        </member>
        <member name="P:Common.Messaging.Messaging.RabbitMQBase.Exchange">
            <summary>
            Gets or sets the exchange.
            </summary>
            <value>
            The exchange.
            </value>
        </member>
        <member name="P:Common.Messaging.Messaging.RabbitMQBase.ExchangeType">
            <summary>
            Gets or sets the type of the exchange.
            </summary>
            <value>
            The type of the exchange.
            </value>
        </member>
        <member name="P:Common.Messaging.Messaging.RabbitMQBase.Bindings">
            <summary>
            Gets or sets the binding.
            </summary>
            <value>
            The binding.
            </value>
        </member>
        <member name="P:Common.Messaging.Messaging.RabbitMQBase.Consumer">
            <summary>
            Gets the Consumer.
            </summary>
            <value>
            The consume.
            </value>
        </member>
        <member name="P:Common.Messaging.Messaging.RabbitMQBase.Publisher">
            <summary>
            Gets the Publisher.
            </summary>
            <value>
            The publish.
            </value>
        </member>
        <member name="M:Common.Messaging.Messaging.BasicRabbit.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Messaging.Messaging.BasicRabbit"/> class.
            </summary>
            <param name="queue">The queue.</param>
        </member>
        <member name="M:Common.Messaging.Messaging.BasicRabbit.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Messaging.Messaging.BasicRabbit"/> class.
            </summary>
            <param name="queue">The queue.</param>
            <param name="exchange">The exchange.</param>
            <param name="bindings">The bindings.</param>
        </member>
        <member name="T:Common.Messaging.Messaging.PubSubRabbit">
            <summary>
            PubSub
            </summary>
        </member>
        <member name="M:Common.Messaging.Messaging.PubSubRabbit.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Messaging.Messaging.PubSubRabbit"/> class.
            </summary>
            <param name="queue">The queue.</param>
            <param name="exchange">The exchange.</param>
        </member>
        <member name="T:Common.Messaging.Messaging.RoutingRabbit">
            <summary>
            Routing
            </summary>
        </member>
        <member name="M:Common.Messaging.Messaging.RoutingRabbit.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Messaging.Messaging.RoutingRabbit"/> class.
            </summary>
            <param name="queue">The queue.</param>
            <param name="exchange">The exchange.</param>
            <param name="keyWords">The comma separetd keywords.</param>
        </member>
        <member name="T:Common.Messaging.Messaging.TopicsRabbit">
            <summary>
            Topics
            </summary>
        </member>
        <member name="M:Common.Messaging.Messaging.TopicsRabbit.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Messaging.Messaging.TopicsRabbit"/> class.
            </summary>
            <param name="queue">The queue.</param>
            <param name="exchange">The exchange.</param>
            <param name="topicDescriptor">The dot separeted topic descriptor.</param>
        </member>
        <member name="T:Common.Messaging.Messaging.RPCRabbit">
            <summary>
            RPC
            </summary>
        </member>
        <member name="M:Common.Messaging.Messaging.RPCRabbit.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Messaging.Messaging.RPCRabbit"/> class.
            </summary>
            <param name="serverQueue">The queue.</param>
            <param name="responceQueue">The responce queue.</param>
        </member>
        <member name="P:Common.Messaging.Messaging.RPCRabbit.ResponceQueue">
            <summary>
            Gets or sets the responce queue.
            </summary>
            <value>
            The responce queue.
            </value>
        </member>
        <member name="T:Common.Messaging.Messaging.EventMaper`1">
            <summary>
            EventMaper
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Common.Messaging.Messaging.EventMaper`1._handler">
            <summary>
            The handler
            </summary>
        </member>
        <member name="M:Common.Messaging.Messaging.EventMaper`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Messaging.Messaging.EventMaper`1"/> class.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Common.Messaging.Messaging.EventMaper`1.Invoke(Common.Messages.MessageBase)">
            <summary>
            Invokes the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:Common.Messaging.Messaging.EventMaper`1.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Common.Messaging.Messaging.EventMaper`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Common.Messaging.MessagingConfigurationSection">
            <summary>
                MessagingConfiguration
            </summary>
        </member>
        <member name="F:Common.Messaging.MessagingConfigurationSection.SectionName">
            <summary>
                The name of this section in the app.config.
            </summary>
        </member>
        <member name="M:Common.Messaging.MessagingConfigurationSection.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="P:Common.Messaging.MessagingConfigurationSection.Endpoints">
            <summary>
            Gets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:Common.Messaging.MessagingConfigurationSection.MessagingEndpoints">
            <summary>
            Gets the messaging endpoints.
            </summary>
            <value>
            The messaging endpoints.
            </value>
        </member>
        <member name="T:Common.Messaging.MessagingEndpointsCollection">
            <summary>
                MessagingEndpointsCollection
            </summary>
        </member>
        <member name="M:Common.Messaging.MessagingEndpointsCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement" />.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="M:Common.Messaging.MessagingEndpointsCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="T:Common.Messaging.CaseInsensitiveEnumConfigConverter`1">
            <summary>
                CaseInsensitiveEnumConfigConverter
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Common.Messaging.MessagingEndpointElement">
            <summary>
                MessagingEndpointElement
            </summary>
        </member>
        <member name="P:Common.Messaging.MessagingEndpointElement.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:Common.Messaging.MessagingEndpointElement.MQType">
            <summary>
                Gets or sets the type of the mq.
            </summary>
            <value>
                The type of the mq.
            </value>
        </member>
        <member name="P:Common.Messaging.MessagingEndpointElement.Topology">
            <summary>
                Gets or sets the topology.
            </summary>
            <value>
                The topology.
            </value>
        </member>
        <member name="P:Common.Messaging.MessagingEndpointElement.Queue">
            <summary>
                Gets or sets the queue.
            </summary>
            <value>
                The queue.
            </value>
        </member>
        <member name="P:Common.Messaging.MessagingEndpointElement.Exchange">
            <summary>
                Gets or sets the exchange.
            </summary>
            <value>
                The exchange.
            </value>
        </member>
        <member name="P:Common.Messaging.MessagingEndpointElement.Bindig">
            <summary>
                Gets or sets the bindig.
            </summary>
            <value>
                The bindig.
            </value>
        </member>
        <member name="T:Common.Messaging.MQType">
            <summary>
                Messaging middle ware type
            </summary>
        </member>
        <member name="F:Common.Messaging.MQType.RabbitMQ">
            <summary>
            The rabbit mq
            </summary>
        </member>
        <member name="F:Common.Messaging.MQType.ZeroMQ">
            <summary>
            The zero mq
            </summary>
        </member>
        <member name="T:Common.Messaging.Topology">
            <summary>
                Messaging Topology
            </summary>
        </member>
        <member name="F:Common.Messaging.Topology.Basic">
            <summary>
            The basic
            </summary>
        </member>
        <member name="F:Common.Messaging.Topology.PubSub">
            <summary>
            The pub sub
            </summary>
        </member>
        <member name="F:Common.Messaging.Topology.Routing">
            <summary>
            The routing
            </summary>
        </member>
        <member name="F:Common.Messaging.Topology.Topic">
            <summary>
            The topic
            </summary>
        </member>
        <member name="F:Common.Messaging.Topology.RPC">
            <summary>
            The RPC
            </summary>
        </member>
    </members>
</doc>
