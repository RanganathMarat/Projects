// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ECViewmodel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ECViewmodel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CellInfoDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellInfoDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* CipDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CipDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfirmReviewTypeDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfirmReviewTypeDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* DTOBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DTOBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* ElementBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ElementBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExamCardDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExamCardDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExamCardPropertyDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExamCardPropertyDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeometryDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeometryDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* IAdapter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IAdapter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Object_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Object_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanSetDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanSetDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectableItemDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectableItemDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* StepDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StepDTO_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferPropertyDTO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferPropertyDTO_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SortAttributes_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SortOrder_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ECViewmodel_2eproto() {
  protobuf_AddDesc_ECViewmodel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ECViewmodel.proto");
  GOOGLE_CHECK(file != NULL);
  CellInfoDTO_descriptor_ = file->message_type(0);
  static const int CellInfoDTO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellInfoDTO, canchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellInfoDTO, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellInfoDTO, value_),
  };
  CellInfoDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellInfoDTO_descriptor_,
      CellInfoDTO::default_instance_,
      CellInfoDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellInfoDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellInfoDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellInfoDTO));
  CipDTO_descriptor_ = file->message_type(1);
  static const int CipDTO_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CipDTO, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CipDTO, concentration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CipDTO, confirmed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CipDTO, ignore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CipDTO, injectionstartdynamicnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CipDTO, manual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CipDTO, routeofadministration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CipDTO, volume_),
  };
  CipDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CipDTO_descriptor_,
      CipDTO::default_instance_,
      CipDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CipDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CipDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CipDTO));
  ConfirmReviewTypeDTO_descriptor_ = file->message_type(2);
  static const int ConfirmReviewTypeDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmReviewTypeDTO, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmReviewTypeDTO, value_),
  };
  ConfirmReviewTypeDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfirmReviewTypeDTO_descriptor_,
      ConfirmReviewTypeDTO::default_instance_,
      ConfirmReviewTypeDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmReviewTypeDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmReviewTypeDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfirmReviewTypeDTO));
  DTOBase_descriptor_ = file->message_type(3);
  static const int DTOBase_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTOBase, adapter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTOBase, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTOBase, validation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTOBase, cellinfodto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTOBase, cipdto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTOBase, confirmreviewtypedto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTOBase, examcardpropertydto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTOBase, selectableitemdto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTOBase, transferpropertydto_),
  };
  DTOBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DTOBase_descriptor_,
      DTOBase::default_instance_,
      DTOBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTOBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DTOBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DTOBase));
  ElementBase_descriptor_ = file->message_type(4);
  static const int ElementBase_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementBase, childelements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementBase, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementBase, expanded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementBase, invisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementBase, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementBase, selected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementBase, examcarddto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementBase, stepdto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementBase, scansetdto_),
  };
  ElementBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ElementBase_descriptor_,
      ElementBase::default_instance_,
      ElementBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ElementBase));
  ExamCardDTO_descriptor_ = file->message_type(5);
  static const int ExamCardDTO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardDTO, childelements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardDTO, examcarddescription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardDTO, examcardproperty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardDTO, name_),
  };
  ExamCardDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExamCardDTO_descriptor_,
      ExamCardDTO::default_instance_,
      ExamCardDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExamCardDTO));
  ExamCardPropertyDTO_descriptor_ = file->message_type(6);
  static const int ExamCardPropertyDTO_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, alignoverlap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, anatomicregion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, anatomicregionslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, anatomieslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, anatomy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, autofillinheartrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, autofillinheartrateallowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, configuredcoils_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, dockingmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, examduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, geolinkpropagation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, heartrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, lateralities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, laterality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, lateralityconflict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, namedgeometries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, paediatric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, patientorientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, patientweight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, posteriorholdback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, predictedsed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, reviewrequired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, smarttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, tableusage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, weightunit_),
  };
  ExamCardPropertyDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExamCardPropertyDTO_descriptor_,
      ExamCardPropertyDTO::default_instance_,
      ExamCardPropertyDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExamCardPropertyDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExamCardPropertyDTO));
  GeometryDTO_descriptor_ = file->message_type(7);
  static const int GeometryDTO_offsets_[1] = {
  };
  GeometryDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeometryDTO_descriptor_,
      GeometryDTO::default_instance_,
      GeometryDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeometryDTO));
  IAdapter_descriptor_ = file->message_type(8);
  static const int IAdapter_offsets_[1] = {
  };
  IAdapter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IAdapter_descriptor_,
      IAdapter::default_instance_,
      IAdapter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAdapter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAdapter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IAdapter));
  Object_descriptor_ = file->message_type(9);
  static const int Object_offsets_[1] = {
  };
  Object_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Object_descriptor_,
      Object::default_instance_,
      Object_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Object));
  ScanSetDTO_descriptor_ = file->message_type(10);
  static const int ScanSetDTO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanSetDTO, childelements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanSetDTO, editmode_),
  };
  ScanSetDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScanSetDTO_descriptor_,
      ScanSetDTO::default_instance_,
      ScanSetDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanSetDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanSetDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScanSetDTO));
  SelectableItemDTO_descriptor_ = file->message_type(11);
  static const int SelectableItemDTO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectableItemDTO, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectableItemDTO, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectableItemDTO, isinconflict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectableItemDTO, isselected_),
  };
  SelectableItemDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectableItemDTO_descriptor_,
      SelectableItemDTO::default_instance_,
      SelectableItemDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectableItemDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectableItemDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectableItemDTO));
  StepDTO_descriptor_ = file->message_type(12);
  static const int StepDTO_offsets_[1] = {
  };
  StepDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StepDTO_descriptor_,
      StepDTO::default_instance_,
      StepDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StepDTO));
  TransferPropertyDTO_descriptor_ = file->message_type(13);
  static const int TransferPropertyDTO_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferPropertyDTO, enablepushtoworkstation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferPropertyDTO, iscandidatefortransfer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferPropertyDTO, pushtoworkstation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferPropertyDTO, sliceorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferPropertyDTO, sortingattributes_),
  };
  TransferPropertyDTO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferPropertyDTO_descriptor_,
      TransferPropertyDTO::default_instance_,
      TransferPropertyDTO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferPropertyDTO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferPropertyDTO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferPropertyDTO));
  SortAttributes_descriptor_ = file->enum_type(0);
  SortOrder_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ECViewmodel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellInfoDTO_descriptor_, &CellInfoDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CipDTO_descriptor_, &CipDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfirmReviewTypeDTO_descriptor_, &ConfirmReviewTypeDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DTOBase_descriptor_, &DTOBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ElementBase_descriptor_, &ElementBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExamCardDTO_descriptor_, &ExamCardDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExamCardPropertyDTO_descriptor_, &ExamCardPropertyDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeometryDTO_descriptor_, &GeometryDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IAdapter_descriptor_, &IAdapter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Object_descriptor_, &Object::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScanSetDTO_descriptor_, &ScanSetDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectableItemDTO_descriptor_, &SelectableItemDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StepDTO_descriptor_, &StepDTO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferPropertyDTO_descriptor_, &TransferPropertyDTO::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ECViewmodel_2eproto() {
  delete CellInfoDTO::default_instance_;
  delete CellInfoDTO_reflection_;
  delete CipDTO::default_instance_;
  delete CipDTO_reflection_;
  delete ConfirmReviewTypeDTO::default_instance_;
  delete ConfirmReviewTypeDTO_reflection_;
  delete DTOBase::default_instance_;
  delete DTOBase_reflection_;
  delete ElementBase::default_instance_;
  delete ElementBase_reflection_;
  delete ExamCardDTO::default_instance_;
  delete ExamCardDTO_reflection_;
  delete ExamCardPropertyDTO::default_instance_;
  delete ExamCardPropertyDTO_reflection_;
  delete GeometryDTO::default_instance_;
  delete GeometryDTO_reflection_;
  delete IAdapter::default_instance_;
  delete IAdapter_reflection_;
  delete Object::default_instance_;
  delete Object_reflection_;
  delete ScanSetDTO::default_instance_;
  delete ScanSetDTO_reflection_;
  delete SelectableItemDTO::default_instance_;
  delete SelectableItemDTO_reflection_;
  delete StepDTO::default_instance_;
  delete StepDTO_reflection_;
  delete TransferPropertyDTO::default_instance_;
  delete TransferPropertyDTO_reflection_;
}

void protobuf_AddDesc_ECViewmodel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ECViewmodel.proto\"T\n\013CellInfoDTO\022\030\n\tCa"
    "nChange\030\001 \001(\010:\005false\022\023\n\013Description\030\002 \001("
    "\t\022\026\n\005Value\030\003 \001(\0132\007.Object\"\323\001\n\006CipDTO\022\r\n\005"
    "Agent\030\001 \001(\t\022\030\n\rConcentration\030\002 \001(\001:\0010\022\030\n"
    "\tConfirmed\030\003 \001(\010:\005false\022\025\n\006Ignore\030\004 \001(\010:"
    "\005false\022&\n\033InjectionStartDynamicNumber\030\005 "
    "\001(\r:\0010\022\025\n\006Manual\030\006 \001(\010:\005false\022\035\n\025RouteOf"
    "Administration\030\007 \001(\t\022\021\n\006Volume\030\010 \001(\001:\0010\""
    "2\n\024ConfirmReviewTypeDTO\022\013\n\003Key\030\001 \001(\t\022\r\n\005"
    "Value\030\002 \001(\t\"\334\002\n\007DTOBase\022\032\n\007Adapter\030\001 \001(\013"
    "2\t.IAdapter\022\024\n\003Tag\030\002 \003(\0132\007.Object\022\031\n\nVal"
    "idation\030\003 \001(\010:\005false\022!\n\013CellInfoDTO\030\n \001("
    "\0132\014.CellInfoDTO\022\027\n\006CipDTO\030\024 \001(\0132\007.CipDTO"
    "\0223\n\024ConfirmReviewTypeDTO\030\036 \001(\0132\025.Confirm"
    "ReviewTypeDTO\0221\n\023ExamCardPropertyDTO\030( \001"
    "(\0132\024.ExamCardPropertyDTO\022-\n\021SelectableIt"
    "emDTO\0302 \001(\0132\022.SelectableItemDTO\0221\n\023Trans"
    "ferPropertyDTO\030< \001(\0132\024.TransferPropertyD"
    "TO\"\225\002\n\013ElementBase\022#\n\rChildElements\030\001 \003("
    "\0132\014.ElementBase\022\026\n\007Enabled\030\002 \001(\010:\005false\022"
    "\027\n\010Expanded\030\003 \001(\010:\005false\022\030\n\tInvisible\030\004 "
    "\001(\010:\005false\022\034\n\006Parent\030\005 \001(\0132\014.ElementBase"
    "\022\027\n\010Selected\030\006 \001(\010:\005false\022!\n\013ExamCardDTO"
    "\030d \001(\0132\014.ExamCardDTO\022\032\n\007StepDTO\030\310\001 \001(\0132\010"
    ".StepDTO\022 \n\nScanSetDTO\030\254\002 \001(\0132\013.ScanSetD"
    "TO\"\201\001\n\013ExamCardDTO\022#\n\rChildElements\030\001 \003("
    "\0132\014.ElementBase\022\033\n\023ExamCardDescription\030\002"
    " \001(\t\022\"\n\020ExamCardProperty\030\003 \001(\0132\010.DTOBase"
    "\022\014\n\004Name\030\004 \001(\t\"\361\005\n\023ExamCardPropertyDTO\022\027"
    "\n\014AlignOverlap\030\001 \001(\002:\0010\022\026\n\016AnatomicRegio"
    "n\030\002 \001(\t\022\033\n\023AnatomicRegionsList\030\003 \003(\t\022\025\n\r"
    "AnatomiesList\030\004 \003(\t\022\017\n\007Anatomy\030\005 \001(\t\022\"\n\023"
    "AutoFillInHeartRate\030\006 \001(\010:\005false\022)\n\032Auto"
    "FillInHeartRateAllowed\030\007 \001(\010:\005false\022!\n\017C"
    "onfiguredCoils\030\010 \003(\0132\010.DTOBase\022\023\n\013Dockin"
    "gMode\030\t \001(\t\022\027\n\014ExamDuration\030\n \001(\005:\0010\022!\n\022"
    "GeoLinkPropagation\030\013 \001(\010:\005false\022\024\n\tHeart"
    "Rate\030\014 \001(\005:\0010\022\036\n\014Lateralities\030\r \003(\0132\010.DT"
    "OBase\022\022\n\nLaterality\030\016 \001(\t\022!\n\022LateralityC"
    "onflict\030\017 \001(\010:\005false\022\014\n\004Name\030\020 \001(\t\022%\n\017Na"
    "medGeometries\030\021 \003(\0132\014.GeometryDTO\022\031\n\nPae"
    "diatric\030\022 \001(\010:\005false\022$\n\022PatientOrientati"
    "on\030\023 \003(\0132\010.DTOBase\022\030\n\rPatientWeight\030\024 \001("
    "\001:\0010\022 \n\021PosteriorHoldBack\030\025 \001(\010:\005false\022\027"
    "\n\014PredictedSED\030\026 \001(\001:\0010\022 \n\016ReviewRequire"
    "d\030\027 \003(\0132\010.DTOBase\022\030\n\tSmartType\030\030 \001(\010:\005fa"
    "lse\022\031\n\nTableUsage\030\031 \001(\010:\005false\022\022\n\nWeight"
    "Unit\030\032 \001(\t\"\r\n\013GeometryDTO\"\n\n\010IAdapter\"\010\n"
    "\006Object\"J\n\nScanSetDTO\022#\n\rChildElements\030\001"
    " \003(\0132\014.ElementBase\022\027\n\010EditMode\030\002 \001(\010:\005fa"
    "lse\"h\n\021SelectableItemDTO\022\017\n\007Caption\030\001 \001("
    "\t\022\n\n\002ID\030\002 \001(\t\022\033\n\014IsInConflict\030\003 \001(\010:\005fal"
    "se\022\031\n\nIsSelected\030\004 \001(\010:\005false\"\t\n\007StepDTO"
    "\"\335\001\n\023TransferPropertyDTO\022&\n\027EnablePushTo"
    "Workstation\030\001 \001(\010:\005false\022%\n\026IsCandidateF"
    "orTransfer\030\002 \001(\010:\005false\022 \n\021PushToWorksta"
    "tion\030\003 \001(\010:\005false\022)\n\nSliceOrder\030\004 \001(\0162\n."
    "SortOrder:\tASCENDING\022*\n\021SortingAttribute"
    "s\030\005 \003(\0162\017.SortAttributes*\220\001\n\016SortAttribu"
    "tes\022\016\n\nIMAGE_TYPE\020\000\022\020\n\014SLICE_NUMBER\020\001\022\017\n"
    "\013ECHO_NUMBER\020\002\022\020\n\014PHASE_NUMBER\020\003\022\020\n\014DYNA"
    "MIC_SCAN\020\004\022\022\n\016CHEMICAL_SHIFT\020\005\022\023\n\017DIFF_B"
    "_VALUE_NO\020\006**\n\tSortOrder\022\r\n\tASCENDING\020\000\022"
    "\016\n\nDESCENDING\020\001", 2535);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ECViewmodel.proto", &protobuf_RegisterTypes);
  CellInfoDTO::default_instance_ = new CellInfoDTO();
  CipDTO::default_instance_ = new CipDTO();
  ConfirmReviewTypeDTO::default_instance_ = new ConfirmReviewTypeDTO();
  DTOBase::default_instance_ = new DTOBase();
  ElementBase::default_instance_ = new ElementBase();
  ExamCardDTO::default_instance_ = new ExamCardDTO();
  ExamCardPropertyDTO::default_instance_ = new ExamCardPropertyDTO();
  GeometryDTO::default_instance_ = new GeometryDTO();
  IAdapter::default_instance_ = new IAdapter();
  Object::default_instance_ = new Object();
  ScanSetDTO::default_instance_ = new ScanSetDTO();
  SelectableItemDTO::default_instance_ = new SelectableItemDTO();
  StepDTO::default_instance_ = new StepDTO();
  TransferPropertyDTO::default_instance_ = new TransferPropertyDTO();
  CellInfoDTO::default_instance_->InitAsDefaultInstance();
  CipDTO::default_instance_->InitAsDefaultInstance();
  ConfirmReviewTypeDTO::default_instance_->InitAsDefaultInstance();
  DTOBase::default_instance_->InitAsDefaultInstance();
  ElementBase::default_instance_->InitAsDefaultInstance();
  ExamCardDTO::default_instance_->InitAsDefaultInstance();
  ExamCardPropertyDTO::default_instance_->InitAsDefaultInstance();
  GeometryDTO::default_instance_->InitAsDefaultInstance();
  IAdapter::default_instance_->InitAsDefaultInstance();
  Object::default_instance_->InitAsDefaultInstance();
  ScanSetDTO::default_instance_->InitAsDefaultInstance();
  SelectableItemDTO::default_instance_->InitAsDefaultInstance();
  StepDTO::default_instance_->InitAsDefaultInstance();
  TransferPropertyDTO::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ECViewmodel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ECViewmodel_2eproto {
  StaticDescriptorInitializer_ECViewmodel_2eproto() {
    protobuf_AddDesc_ECViewmodel_2eproto();
  }
} static_descriptor_initializer_ECViewmodel_2eproto_;
const ::google::protobuf::EnumDescriptor* SortAttributes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortAttributes_descriptor_;
}
bool SortAttributes_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SortOrder_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortOrder_descriptor_;
}
bool SortOrder_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CellInfoDTO::kCanChangeFieldNumber;
const int CellInfoDTO::kDescriptionFieldNumber;
const int CellInfoDTO::kValueFieldNumber;
#endif  // !_MSC_VER

CellInfoDTO::CellInfoDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellInfoDTO::InitAsDefaultInstance() {
  value_ = const_cast< ::Object*>(&::Object::default_instance());
}

CellInfoDTO::CellInfoDTO(const CellInfoDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellInfoDTO::SharedCtor() {
  _cached_size_ = 0;
  canchange_ = false;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellInfoDTO::~CellInfoDTO() {
  SharedDtor();
}

void CellInfoDTO::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
    delete value_;
  }
}

void CellInfoDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellInfoDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellInfoDTO_descriptor_;
}

const CellInfoDTO& CellInfoDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ECViewmodel_2eproto();
  return *default_instance_;
}

CellInfoDTO* CellInfoDTO::default_instance_ = NULL;

CellInfoDTO* CellInfoDTO::New() const {
  return new CellInfoDTO;
}

void CellInfoDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    canchange_ = false;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_value()) {
      if (value_ != NULL) value_->::Object::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellInfoDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool CanChange = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canchange_)));
          set_has_canchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Description;
        break;
      }

      // optional string Description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Value;
        break;
      }

      // optional .Object Value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellInfoDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool CanChange = 1 [default = false];
  if (has_canchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->canchange(), output);
  }

  // optional string Description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(), output);
  }

  // optional .Object Value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellInfoDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool CanChange = 1 [default = false];
  if (has_canchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->canchange(), target);
  }

  // optional string Description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional .Object Value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellInfoDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool CanChange = 1 [default = false];
    if (has_canchange()) {
      total_size += 1 + 1;
    }

    // optional string Description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional .Object Value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellInfoDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellInfoDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellInfoDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellInfoDTO::MergeFrom(const CellInfoDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_canchange()) {
      set_canchange(from.canchange());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_value()) {
      mutable_value()->::Object::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellInfoDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellInfoDTO::CopyFrom(const CellInfoDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellInfoDTO::IsInitialized() const {

  return true;
}

void CellInfoDTO::Swap(CellInfoDTO* other) {
  if (other != this) {
    std::swap(canchange_, other->canchange_);
    std::swap(description_, other->description_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellInfoDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellInfoDTO_descriptor_;
  metadata.reflection = CellInfoDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CipDTO::kAgentFieldNumber;
const int CipDTO::kConcentrationFieldNumber;
const int CipDTO::kConfirmedFieldNumber;
const int CipDTO::kIgnoreFieldNumber;
const int CipDTO::kInjectionStartDynamicNumberFieldNumber;
const int CipDTO::kManualFieldNumber;
const int CipDTO::kRouteOfAdministrationFieldNumber;
const int CipDTO::kVolumeFieldNumber;
#endif  // !_MSC_VER

CipDTO::CipDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CipDTO::InitAsDefaultInstance() {
}

CipDTO::CipDTO(const CipDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CipDTO::SharedCtor() {
  _cached_size_ = 0;
  agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  concentration_ = 0;
  confirmed_ = false;
  ignore_ = false;
  injectionstartdynamicnumber_ = 0u;
  manual_ = false;
  routeofadministration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CipDTO::~CipDTO() {
  SharedDtor();
}

void CipDTO::SharedDtor() {
  if (agent_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_;
  }
  if (routeofadministration_ != &::google::protobuf::internal::kEmptyString) {
    delete routeofadministration_;
  }
  if (this != default_instance_) {
  }
}

void CipDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CipDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CipDTO_descriptor_;
}

const CipDTO& CipDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ECViewmodel_2eproto();
  return *default_instance_;
}

CipDTO* CipDTO::default_instance_ = NULL;

CipDTO* CipDTO::New() const {
  return new CipDTO;
}

void CipDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent()) {
      if (agent_ != &::google::protobuf::internal::kEmptyString) {
        agent_->clear();
      }
    }
    concentration_ = 0;
    confirmed_ = false;
    ignore_ = false;
    injectionstartdynamicnumber_ = 0u;
    manual_ = false;
    if (has_routeofadministration()) {
      if (routeofadministration_ != &::google::protobuf::internal::kEmptyString) {
        routeofadministration_->clear();
      }
    }
    volume_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CipDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Agent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agent().data(), this->agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_Concentration;
        break;
      }

      // optional double Concentration = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Concentration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &concentration_)));
          set_has_concentration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Confirmed;
        break;
      }

      // optional bool Confirmed = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Confirmed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &confirmed_)));
          set_has_confirmed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Ignore;
        break;
      }

      // optional bool Ignore = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ignore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_)));
          set_has_ignore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_InjectionStartDynamicNumber;
        break;
      }

      // optional uint32 InjectionStartDynamicNumber = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InjectionStartDynamicNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &injectionstartdynamicnumber_)));
          set_has_injectionstartdynamicnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Manual;
        break;
      }

      // optional bool Manual = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Manual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manual_)));
          set_has_manual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_RouteOfAdministration;
        break;
      }

      // optional string RouteOfAdministration = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RouteOfAdministration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_routeofadministration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->routeofadministration().data(), this->routeofadministration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_Volume;
        break;
      }

      // optional double Volume = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CipDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Agent = 1;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->agent(), output);
  }

  // optional double Concentration = 2 [default = 0];
  if (has_concentration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->concentration(), output);
  }

  // optional bool Confirmed = 3 [default = false];
  if (has_confirmed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->confirmed(), output);
  }

  // optional bool Ignore = 4 [default = false];
  if (has_ignore()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ignore(), output);
  }

  // optional uint32 InjectionStartDynamicNumber = 5 [default = 0];
  if (has_injectionstartdynamicnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->injectionstartdynamicnumber(), output);
  }

  // optional bool Manual = 6 [default = false];
  if (has_manual()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->manual(), output);
  }

  // optional string RouteOfAdministration = 7;
  if (has_routeofadministration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->routeofadministration().data(), this->routeofadministration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->routeofadministration(), output);
  }

  // optional double Volume = 8 [default = 0];
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->volume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CipDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Agent = 1;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->agent(), target);
  }

  // optional double Concentration = 2 [default = 0];
  if (has_concentration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->concentration(), target);
  }

  // optional bool Confirmed = 3 [default = false];
  if (has_confirmed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->confirmed(), target);
  }

  // optional bool Ignore = 4 [default = false];
  if (has_ignore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ignore(), target);
  }

  // optional uint32 InjectionStartDynamicNumber = 5 [default = 0];
  if (has_injectionstartdynamicnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->injectionstartdynamicnumber(), target);
  }

  // optional bool Manual = 6 [default = false];
  if (has_manual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->manual(), target);
  }

  // optional string RouteOfAdministration = 7;
  if (has_routeofadministration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->routeofadministration().data(), this->routeofadministration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->routeofadministration(), target);
  }

  // optional double Volume = 8 [default = 0];
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->volume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CipDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Agent = 1;
    if (has_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agent());
    }

    // optional double Concentration = 2 [default = 0];
    if (has_concentration()) {
      total_size += 1 + 8;
    }

    // optional bool Confirmed = 3 [default = false];
    if (has_confirmed()) {
      total_size += 1 + 1;
    }

    // optional bool Ignore = 4 [default = false];
    if (has_ignore()) {
      total_size += 1 + 1;
    }

    // optional uint32 InjectionStartDynamicNumber = 5 [default = 0];
    if (has_injectionstartdynamicnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->injectionstartdynamicnumber());
    }

    // optional bool Manual = 6 [default = false];
    if (has_manual()) {
      total_size += 1 + 1;
    }

    // optional string RouteOfAdministration = 7;
    if (has_routeofadministration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->routeofadministration());
    }

    // optional double Volume = 8 [default = 0];
    if (has_volume()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CipDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CipDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CipDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CipDTO::MergeFrom(const CipDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent()) {
      set_agent(from.agent());
    }
    if (from.has_concentration()) {
      set_concentration(from.concentration());
    }
    if (from.has_confirmed()) {
      set_confirmed(from.confirmed());
    }
    if (from.has_ignore()) {
      set_ignore(from.ignore());
    }
    if (from.has_injectionstartdynamicnumber()) {
      set_injectionstartdynamicnumber(from.injectionstartdynamicnumber());
    }
    if (from.has_manual()) {
      set_manual(from.manual());
    }
    if (from.has_routeofadministration()) {
      set_routeofadministration(from.routeofadministration());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CipDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CipDTO::CopyFrom(const CipDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CipDTO::IsInitialized() const {

  return true;
}

void CipDTO::Swap(CipDTO* other) {
  if (other != this) {
    std::swap(agent_, other->agent_);
    std::swap(concentration_, other->concentration_);
    std::swap(confirmed_, other->confirmed_);
    std::swap(ignore_, other->ignore_);
    std::swap(injectionstartdynamicnumber_, other->injectionstartdynamicnumber_);
    std::swap(manual_, other->manual_);
    std::swap(routeofadministration_, other->routeofadministration_);
    std::swap(volume_, other->volume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CipDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CipDTO_descriptor_;
  metadata.reflection = CipDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfirmReviewTypeDTO::kKeyFieldNumber;
const int ConfirmReviewTypeDTO::kValueFieldNumber;
#endif  // !_MSC_VER

ConfirmReviewTypeDTO::ConfirmReviewTypeDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConfirmReviewTypeDTO::InitAsDefaultInstance() {
}

ConfirmReviewTypeDTO::ConfirmReviewTypeDTO(const ConfirmReviewTypeDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConfirmReviewTypeDTO::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfirmReviewTypeDTO::~ConfirmReviewTypeDTO() {
  SharedDtor();
}

void ConfirmReviewTypeDTO::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ConfirmReviewTypeDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfirmReviewTypeDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfirmReviewTypeDTO_descriptor_;
}

const ConfirmReviewTypeDTO& ConfirmReviewTypeDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ECViewmodel_2eproto();
  return *default_instance_;
}

ConfirmReviewTypeDTO* ConfirmReviewTypeDTO::default_instance_ = NULL;

ConfirmReviewTypeDTO* ConfirmReviewTypeDTO::New() const {
  return new ConfirmReviewTypeDTO;
}

void ConfirmReviewTypeDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfirmReviewTypeDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }

      // optional string Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfirmReviewTypeDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional string Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConfirmReviewTypeDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConfirmReviewTypeDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfirmReviewTypeDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfirmReviewTypeDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfirmReviewTypeDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfirmReviewTypeDTO::MergeFrom(const ConfirmReviewTypeDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfirmReviewTypeDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfirmReviewTypeDTO::CopyFrom(const ConfirmReviewTypeDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmReviewTypeDTO::IsInitialized() const {

  return true;
}

void ConfirmReviewTypeDTO::Swap(ConfirmReviewTypeDTO* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfirmReviewTypeDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfirmReviewTypeDTO_descriptor_;
  metadata.reflection = ConfirmReviewTypeDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DTOBase::kAdapterFieldNumber;
const int DTOBase::kTagFieldNumber;
const int DTOBase::kValidationFieldNumber;
const int DTOBase::kCellInfoDTOFieldNumber;
const int DTOBase::kCipDTOFieldNumber;
const int DTOBase::kConfirmReviewTypeDTOFieldNumber;
const int DTOBase::kExamCardPropertyDTOFieldNumber;
const int DTOBase::kSelectableItemDTOFieldNumber;
const int DTOBase::kTransferPropertyDTOFieldNumber;
#endif  // !_MSC_VER

DTOBase::DTOBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DTOBase::InitAsDefaultInstance() {
  adapter_ = const_cast< ::IAdapter*>(&::IAdapter::default_instance());
  cellinfodto_ = const_cast< ::CellInfoDTO*>(&::CellInfoDTO::default_instance());
  cipdto_ = const_cast< ::CipDTO*>(&::CipDTO::default_instance());
  confirmreviewtypedto_ = const_cast< ::ConfirmReviewTypeDTO*>(&::ConfirmReviewTypeDTO::default_instance());
  examcardpropertydto_ = const_cast< ::ExamCardPropertyDTO*>(&::ExamCardPropertyDTO::default_instance());
  selectableitemdto_ = const_cast< ::SelectableItemDTO*>(&::SelectableItemDTO::default_instance());
  transferpropertydto_ = const_cast< ::TransferPropertyDTO*>(&::TransferPropertyDTO::default_instance());
}

DTOBase::DTOBase(const DTOBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DTOBase::SharedCtor() {
  _cached_size_ = 0;
  adapter_ = NULL;
  validation_ = false;
  cellinfodto_ = NULL;
  cipdto_ = NULL;
  confirmreviewtypedto_ = NULL;
  examcardpropertydto_ = NULL;
  selectableitemdto_ = NULL;
  transferpropertydto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DTOBase::~DTOBase() {
  SharedDtor();
}

void DTOBase::SharedDtor() {
  if (this != default_instance_) {
    delete adapter_;
    delete cellinfodto_;
    delete cipdto_;
    delete confirmreviewtypedto_;
    delete examcardpropertydto_;
    delete selectableitemdto_;
    delete transferpropertydto_;
  }
}

void DTOBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DTOBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DTOBase_descriptor_;
}

const DTOBase& DTOBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ECViewmodel_2eproto();
  return *default_instance_;
}

DTOBase* DTOBase::default_instance_ = NULL;

DTOBase* DTOBase::New() const {
  return new DTOBase;
}

void DTOBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_adapter()) {
      if (adapter_ != NULL) adapter_->::IAdapter::Clear();
    }
    validation_ = false;
    if (has_cellinfodto()) {
      if (cellinfodto_ != NULL) cellinfodto_->::CellInfoDTO::Clear();
    }
    if (has_cipdto()) {
      if (cipdto_ != NULL) cipdto_->::CipDTO::Clear();
    }
    if (has_confirmreviewtypedto()) {
      if (confirmreviewtypedto_ != NULL) confirmreviewtypedto_->::ConfirmReviewTypeDTO::Clear();
    }
    if (has_examcardpropertydto()) {
      if (examcardpropertydto_ != NULL) examcardpropertydto_->::ExamCardPropertyDTO::Clear();
    }
    if (has_selectableitemdto()) {
      if (selectableitemdto_ != NULL) selectableitemdto_->::SelectableItemDTO::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_transferpropertydto()) {
      if (transferpropertydto_ != NULL) transferpropertydto_->::TransferPropertyDTO::Clear();
    }
  }
  tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DTOBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .IAdapter Adapter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adapter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Tag;
        break;
      }

      // repeated .Object Tag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Tag;
        if (input->ExpectTag(24)) goto parse_Validation;
        break;
      }

      // optional bool Validation = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Validation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &validation_)));
          set_has_validation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_CellInfoDTO;
        break;
      }

      // optional .CellInfoDTO CellInfoDTO = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CellInfoDTO:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cellinfodto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_CipDTO;
        break;
      }

      // optional .CipDTO CipDTO = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CipDTO:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cipdto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_ConfirmReviewTypeDTO;
        break;
      }

      // optional .ConfirmReviewTypeDTO ConfirmReviewTypeDTO = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConfirmReviewTypeDTO:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirmreviewtypedto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_ExamCardPropertyDTO;
        break;
      }

      // optional .ExamCardPropertyDTO ExamCardPropertyDTO = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExamCardPropertyDTO:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_examcardpropertydto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_SelectableItemDTO;
        break;
      }

      // optional .SelectableItemDTO SelectableItemDTO = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SelectableItemDTO:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selectableitemdto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_TransferPropertyDTO;
        break;
      }

      // optional .TransferPropertyDTO TransferPropertyDTO = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TransferPropertyDTO:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transferpropertydto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DTOBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .IAdapter Adapter = 1;
  if (has_adapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->adapter(), output);
  }

  // repeated .Object Tag = 2;
  for (int i = 0; i < this->tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tag(i), output);
  }

  // optional bool Validation = 3 [default = false];
  if (has_validation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->validation(), output);
  }

  // optional .CellInfoDTO CellInfoDTO = 10;
  if (has_cellinfodto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->cellinfodto(), output);
  }

  // optional .CipDTO CipDTO = 20;
  if (has_cipdto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->cipdto(), output);
  }

  // optional .ConfirmReviewTypeDTO ConfirmReviewTypeDTO = 30;
  if (has_confirmreviewtypedto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->confirmreviewtypedto(), output);
  }

  // optional .ExamCardPropertyDTO ExamCardPropertyDTO = 40;
  if (has_examcardpropertydto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->examcardpropertydto(), output);
  }

  // optional .SelectableItemDTO SelectableItemDTO = 50;
  if (has_selectableitemdto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->selectableitemdto(), output);
  }

  // optional .TransferPropertyDTO TransferPropertyDTO = 60;
  if (has_transferpropertydto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->transferpropertydto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DTOBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .IAdapter Adapter = 1;
  if (has_adapter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->adapter(), target);
  }

  // repeated .Object Tag = 2;
  for (int i = 0; i < this->tag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tag(i), target);
  }

  // optional bool Validation = 3 [default = false];
  if (has_validation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->validation(), target);
  }

  // optional .CellInfoDTO CellInfoDTO = 10;
  if (has_cellinfodto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->cellinfodto(), target);
  }

  // optional .CipDTO CipDTO = 20;
  if (has_cipdto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->cipdto(), target);
  }

  // optional .ConfirmReviewTypeDTO ConfirmReviewTypeDTO = 30;
  if (has_confirmreviewtypedto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->confirmreviewtypedto(), target);
  }

  // optional .ExamCardPropertyDTO ExamCardPropertyDTO = 40;
  if (has_examcardpropertydto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->examcardpropertydto(), target);
  }

  // optional .SelectableItemDTO SelectableItemDTO = 50;
  if (has_selectableitemdto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->selectableitemdto(), target);
  }

  // optional .TransferPropertyDTO TransferPropertyDTO = 60;
  if (has_transferpropertydto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->transferpropertydto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DTOBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .IAdapter Adapter = 1;
    if (has_adapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adapter());
    }

    // optional bool Validation = 3 [default = false];
    if (has_validation()) {
      total_size += 1 + 1;
    }

    // optional .CellInfoDTO CellInfoDTO = 10;
    if (has_cellinfodto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cellinfodto());
    }

    // optional .CipDTO CipDTO = 20;
    if (has_cipdto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cipdto());
    }

    // optional .ConfirmReviewTypeDTO ConfirmReviewTypeDTO = 30;
    if (has_confirmreviewtypedto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirmreviewtypedto());
    }

    // optional .ExamCardPropertyDTO ExamCardPropertyDTO = 40;
    if (has_examcardpropertydto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->examcardpropertydto());
    }

    // optional .SelectableItemDTO SelectableItemDTO = 50;
    if (has_selectableitemdto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selectableitemdto());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TransferPropertyDTO TransferPropertyDTO = 60;
    if (has_transferpropertydto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transferpropertydto());
    }

  }
  // repeated .Object Tag = 2;
  total_size += 1 * this->tag_size();
  for (int i = 0; i < this->tag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tag(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DTOBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DTOBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DTOBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DTOBase::MergeFrom(const DTOBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  tag_.MergeFrom(from.tag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adapter()) {
      mutable_adapter()->::IAdapter::MergeFrom(from.adapter());
    }
    if (from.has_validation()) {
      set_validation(from.validation());
    }
    if (from.has_cellinfodto()) {
      mutable_cellinfodto()->::CellInfoDTO::MergeFrom(from.cellinfodto());
    }
    if (from.has_cipdto()) {
      mutable_cipdto()->::CipDTO::MergeFrom(from.cipdto());
    }
    if (from.has_confirmreviewtypedto()) {
      mutable_confirmreviewtypedto()->::ConfirmReviewTypeDTO::MergeFrom(from.confirmreviewtypedto());
    }
    if (from.has_examcardpropertydto()) {
      mutable_examcardpropertydto()->::ExamCardPropertyDTO::MergeFrom(from.examcardpropertydto());
    }
    if (from.has_selectableitemdto()) {
      mutable_selectableitemdto()->::SelectableItemDTO::MergeFrom(from.selectableitemdto());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_transferpropertydto()) {
      mutable_transferpropertydto()->::TransferPropertyDTO::MergeFrom(from.transferpropertydto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DTOBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DTOBase::CopyFrom(const DTOBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DTOBase::IsInitialized() const {

  return true;
}

void DTOBase::Swap(DTOBase* other) {
  if (other != this) {
    std::swap(adapter_, other->adapter_);
    tag_.Swap(&other->tag_);
    std::swap(validation_, other->validation_);
    std::swap(cellinfodto_, other->cellinfodto_);
    std::swap(cipdto_, other->cipdto_);
    std::swap(confirmreviewtypedto_, other->confirmreviewtypedto_);
    std::swap(examcardpropertydto_, other->examcardpropertydto_);
    std::swap(selectableitemdto_, other->selectableitemdto_);
    std::swap(transferpropertydto_, other->transferpropertydto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DTOBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DTOBase_descriptor_;
  metadata.reflection = DTOBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ElementBase::kChildElementsFieldNumber;
const int ElementBase::kEnabledFieldNumber;
const int ElementBase::kExpandedFieldNumber;
const int ElementBase::kInvisibleFieldNumber;
const int ElementBase::kParentFieldNumber;
const int ElementBase::kSelectedFieldNumber;
const int ElementBase::kExamCardDTOFieldNumber;
const int ElementBase::kStepDTOFieldNumber;
const int ElementBase::kScanSetDTOFieldNumber;
#endif  // !_MSC_VER

ElementBase::ElementBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ElementBase::InitAsDefaultInstance() {
  parent_ = const_cast< ::ElementBase*>(&::ElementBase::default_instance());
  examcarddto_ = const_cast< ::ExamCardDTO*>(&::ExamCardDTO::default_instance());
  stepdto_ = const_cast< ::StepDTO*>(&::StepDTO::default_instance());
  scansetdto_ = const_cast< ::ScanSetDTO*>(&::ScanSetDTO::default_instance());
}

ElementBase::ElementBase(const ElementBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ElementBase::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  expanded_ = false;
  invisible_ = false;
  parent_ = NULL;
  selected_ = false;
  examcarddto_ = NULL;
  stepdto_ = NULL;
  scansetdto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ElementBase::~ElementBase() {
  SharedDtor();
}

void ElementBase::SharedDtor() {
  if (this != default_instance_) {
    delete parent_;
    delete examcarddto_;
    delete stepdto_;
    delete scansetdto_;
  }
}

void ElementBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ElementBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ElementBase_descriptor_;
}

const ElementBase& ElementBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ECViewmodel_2eproto();
  return *default_instance_;
}

ElementBase* ElementBase::default_instance_ = NULL;

ElementBase* ElementBase::New() const {
  return new ElementBase;
}

void ElementBase::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    enabled_ = false;
    expanded_ = false;
    invisible_ = false;
    if (has_parent()) {
      if (parent_ != NULL) parent_->::ElementBase::Clear();
    }
    selected_ = false;
    if (has_examcarddto()) {
      if (examcarddto_ != NULL) examcarddto_->::ExamCardDTO::Clear();
    }
    if (has_stepdto()) {
      if (stepdto_ != NULL) stepdto_->::StepDTO::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_scansetdto()) {
      if (scansetdto_ != NULL) scansetdto_->::ScanSetDTO::Clear();
    }
  }
  childelements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ElementBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ElementBase ChildElements = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChildElements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_childelements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ChildElements;
        if (input->ExpectTag(16)) goto parse_Enabled;
        break;
      }

      // optional bool Enabled = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Expanded;
        break;
      }

      // optional bool Expanded = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Expanded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &expanded_)));
          set_has_expanded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Invisible;
        break;
      }

      // optional bool Invisible = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Invisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invisible_)));
          set_has_invisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Parent;
        break;
      }

      // optional .ElementBase Parent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Selected;
        break;
      }

      // optional bool Selected = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Selected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selected_)));
          set_has_selected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_ExamCardDTO;
        break;
      }

      // optional .ExamCardDTO ExamCardDTO = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExamCardDTO:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_examcarddto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1602)) goto parse_StepDTO;
        break;
      }

      // optional .StepDTO StepDTO = 200;
      case 200: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StepDTO:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stepdto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2402)) goto parse_ScanSetDTO;
        break;
      }

      // optional .ScanSetDTO ScanSetDTO = 300;
      case 300: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScanSetDTO:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scansetdto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ElementBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ElementBase ChildElements = 1;
  for (int i = 0; i < this->childelements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->childelements(i), output);
  }

  // optional bool Enabled = 2 [default = false];
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  // optional bool Expanded = 3 [default = false];
  if (has_expanded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->expanded(), output);
  }

  // optional bool Invisible = 4 [default = false];
  if (has_invisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->invisible(), output);
  }

  // optional .ElementBase Parent = 5;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->parent(), output);
  }

  // optional bool Selected = 6 [default = false];
  if (has_selected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->selected(), output);
  }

  // optional .ExamCardDTO ExamCardDTO = 100;
  if (has_examcarddto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->examcarddto(), output);
  }

  // optional .StepDTO StepDTO = 200;
  if (has_stepdto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, this->stepdto(), output);
  }

  // optional .ScanSetDTO ScanSetDTO = 300;
  if (has_scansetdto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      300, this->scansetdto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ElementBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ElementBase ChildElements = 1;
  for (int i = 0; i < this->childelements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->childelements(i), target);
  }

  // optional bool Enabled = 2 [default = false];
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }

  // optional bool Expanded = 3 [default = false];
  if (has_expanded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->expanded(), target);
  }

  // optional bool Invisible = 4 [default = false];
  if (has_invisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->invisible(), target);
  }

  // optional .ElementBase Parent = 5;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->parent(), target);
  }

  // optional bool Selected = 6 [default = false];
  if (has_selected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->selected(), target);
  }

  // optional .ExamCardDTO ExamCardDTO = 100;
  if (has_examcarddto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->examcarddto(), target);
  }

  // optional .StepDTO StepDTO = 200;
  if (has_stepdto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        200, this->stepdto(), target);
  }

  // optional .ScanSetDTO ScanSetDTO = 300;
  if (has_scansetdto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        300, this->scansetdto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ElementBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool Enabled = 2 [default = false];
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool Expanded = 3 [default = false];
    if (has_expanded()) {
      total_size += 1 + 1;
    }

    // optional bool Invisible = 4 [default = false];
    if (has_invisible()) {
      total_size += 1 + 1;
    }

    // optional .ElementBase Parent = 5;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parent());
    }

    // optional bool Selected = 6 [default = false];
    if (has_selected()) {
      total_size += 1 + 1;
    }

    // optional .ExamCardDTO ExamCardDTO = 100;
    if (has_examcarddto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->examcarddto());
    }

    // optional .StepDTO StepDTO = 200;
    if (has_stepdto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stepdto());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ScanSetDTO ScanSetDTO = 300;
    if (has_scansetdto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scansetdto());
    }

  }
  // repeated .ElementBase ChildElements = 1;
  total_size += 1 * this->childelements_size();
  for (int i = 0; i < this->childelements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->childelements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ElementBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ElementBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ElementBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ElementBase::MergeFrom(const ElementBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  childelements_.MergeFrom(from.childelements_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_expanded()) {
      set_expanded(from.expanded());
    }
    if (from.has_invisible()) {
      set_invisible(from.invisible());
    }
    if (from.has_parent()) {
      mutable_parent()->::ElementBase::MergeFrom(from.parent());
    }
    if (from.has_selected()) {
      set_selected(from.selected());
    }
    if (from.has_examcarddto()) {
      mutable_examcarddto()->::ExamCardDTO::MergeFrom(from.examcarddto());
    }
    if (from.has_stepdto()) {
      mutable_stepdto()->::StepDTO::MergeFrom(from.stepdto());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scansetdto()) {
      mutable_scansetdto()->::ScanSetDTO::MergeFrom(from.scansetdto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ElementBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementBase::CopyFrom(const ElementBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementBase::IsInitialized() const {

  return true;
}

void ElementBase::Swap(ElementBase* other) {
  if (other != this) {
    childelements_.Swap(&other->childelements_);
    std::swap(enabled_, other->enabled_);
    std::swap(expanded_, other->expanded_);
    std::swap(invisible_, other->invisible_);
    std::swap(parent_, other->parent_);
    std::swap(selected_, other->selected_);
    std::swap(examcarddto_, other->examcarddto_);
    std::swap(stepdto_, other->stepdto_);
    std::swap(scansetdto_, other->scansetdto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ElementBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ElementBase_descriptor_;
  metadata.reflection = ElementBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExamCardDTO::kChildElementsFieldNumber;
const int ExamCardDTO::kExamCardDescriptionFieldNumber;
const int ExamCardDTO::kExamCardPropertyFieldNumber;
const int ExamCardDTO::kNameFieldNumber;
#endif  // !_MSC_VER

ExamCardDTO::ExamCardDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExamCardDTO::InitAsDefaultInstance() {
  examcardproperty_ = const_cast< ::DTOBase*>(&::DTOBase::default_instance());
}

ExamCardDTO::ExamCardDTO(const ExamCardDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExamCardDTO::SharedCtor() {
  _cached_size_ = 0;
  examcarddescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  examcardproperty_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExamCardDTO::~ExamCardDTO() {
  SharedDtor();
}

void ExamCardDTO::SharedDtor() {
  if (examcarddescription_ != &::google::protobuf::internal::kEmptyString) {
    delete examcarddescription_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete examcardproperty_;
  }
}

void ExamCardDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExamCardDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExamCardDTO_descriptor_;
}

const ExamCardDTO& ExamCardDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ECViewmodel_2eproto();
  return *default_instance_;
}

ExamCardDTO* ExamCardDTO::default_instance_ = NULL;

ExamCardDTO* ExamCardDTO::New() const {
  return new ExamCardDTO;
}

void ExamCardDTO::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_examcarddescription()) {
      if (examcarddescription_ != &::google::protobuf::internal::kEmptyString) {
        examcarddescription_->clear();
      }
    }
    if (has_examcardproperty()) {
      if (examcardproperty_ != NULL) examcardproperty_->::DTOBase::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  childelements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExamCardDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ElementBase ChildElements = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChildElements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_childelements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ChildElements;
        if (input->ExpectTag(18)) goto parse_ExamCardDescription;
        break;
      }

      // optional string ExamCardDescription = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExamCardDescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_examcarddescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->examcarddescription().data(), this->examcarddescription().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ExamCardProperty;
        break;
      }

      // optional .DTOBase ExamCardProperty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExamCardProperty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_examcardproperty()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Name;
        break;
      }

      // optional string Name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExamCardDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ElementBase ChildElements = 1;
  for (int i = 0; i < this->childelements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->childelements(i), output);
  }

  // optional string ExamCardDescription = 2;
  if (has_examcarddescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->examcarddescription().data(), this->examcarddescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->examcarddescription(), output);
  }

  // optional .DTOBase ExamCardProperty = 3;
  if (has_examcardproperty()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->examcardproperty(), output);
  }

  // optional string Name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExamCardDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ElementBase ChildElements = 1;
  for (int i = 0; i < this->childelements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->childelements(i), target);
  }

  // optional string ExamCardDescription = 2;
  if (has_examcarddescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->examcarddescription().data(), this->examcarddescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->examcarddescription(), target);
  }

  // optional .DTOBase ExamCardProperty = 3;
  if (has_examcardproperty()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->examcardproperty(), target);
  }

  // optional string Name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExamCardDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string ExamCardDescription = 2;
    if (has_examcarddescription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->examcarddescription());
    }

    // optional .DTOBase ExamCardProperty = 3;
    if (has_examcardproperty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->examcardproperty());
    }

    // optional string Name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .ElementBase ChildElements = 1;
  total_size += 1 * this->childelements_size();
  for (int i = 0; i < this->childelements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->childelements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExamCardDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExamCardDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExamCardDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExamCardDTO::MergeFrom(const ExamCardDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  childelements_.MergeFrom(from.childelements_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_examcarddescription()) {
      set_examcarddescription(from.examcarddescription());
    }
    if (from.has_examcardproperty()) {
      mutable_examcardproperty()->::DTOBase::MergeFrom(from.examcardproperty());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExamCardDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExamCardDTO::CopyFrom(const ExamCardDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExamCardDTO::IsInitialized() const {

  return true;
}

void ExamCardDTO::Swap(ExamCardDTO* other) {
  if (other != this) {
    childelements_.Swap(&other->childelements_);
    std::swap(examcarddescription_, other->examcarddescription_);
    std::swap(examcardproperty_, other->examcardproperty_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExamCardDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExamCardDTO_descriptor_;
  metadata.reflection = ExamCardDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExamCardPropertyDTO::kAlignOverlapFieldNumber;
const int ExamCardPropertyDTO::kAnatomicRegionFieldNumber;
const int ExamCardPropertyDTO::kAnatomicRegionsListFieldNumber;
const int ExamCardPropertyDTO::kAnatomiesListFieldNumber;
const int ExamCardPropertyDTO::kAnatomyFieldNumber;
const int ExamCardPropertyDTO::kAutoFillInHeartRateFieldNumber;
const int ExamCardPropertyDTO::kAutoFillInHeartRateAllowedFieldNumber;
const int ExamCardPropertyDTO::kConfiguredCoilsFieldNumber;
const int ExamCardPropertyDTO::kDockingModeFieldNumber;
const int ExamCardPropertyDTO::kExamDurationFieldNumber;
const int ExamCardPropertyDTO::kGeoLinkPropagationFieldNumber;
const int ExamCardPropertyDTO::kHeartRateFieldNumber;
const int ExamCardPropertyDTO::kLateralitiesFieldNumber;
const int ExamCardPropertyDTO::kLateralityFieldNumber;
const int ExamCardPropertyDTO::kLateralityConflictFieldNumber;
const int ExamCardPropertyDTO::kNameFieldNumber;
const int ExamCardPropertyDTO::kNamedGeometriesFieldNumber;
const int ExamCardPropertyDTO::kPaediatricFieldNumber;
const int ExamCardPropertyDTO::kPatientOrientationFieldNumber;
const int ExamCardPropertyDTO::kPatientWeightFieldNumber;
const int ExamCardPropertyDTO::kPosteriorHoldBackFieldNumber;
const int ExamCardPropertyDTO::kPredictedSEDFieldNumber;
const int ExamCardPropertyDTO::kReviewRequiredFieldNumber;
const int ExamCardPropertyDTO::kSmartTypeFieldNumber;
const int ExamCardPropertyDTO::kTableUsageFieldNumber;
const int ExamCardPropertyDTO::kWeightUnitFieldNumber;
#endif  // !_MSC_VER

ExamCardPropertyDTO::ExamCardPropertyDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExamCardPropertyDTO::InitAsDefaultInstance() {
}

ExamCardPropertyDTO::ExamCardPropertyDTO(const ExamCardPropertyDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExamCardPropertyDTO::SharedCtor() {
  _cached_size_ = 0;
  alignoverlap_ = 0;
  anatomicregion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  anatomy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  autofillinheartrate_ = false;
  autofillinheartrateallowed_ = false;
  dockingmode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  examduration_ = 0;
  geolinkpropagation_ = false;
  heartrate_ = 0;
  laterality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lateralityconflict_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paediatric_ = false;
  patientweight_ = 0;
  posteriorholdback_ = false;
  predictedsed_ = 0;
  smarttype_ = false;
  tableusage_ = false;
  weightunit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExamCardPropertyDTO::~ExamCardPropertyDTO() {
  SharedDtor();
}

void ExamCardPropertyDTO::SharedDtor() {
  if (anatomicregion_ != &::google::protobuf::internal::kEmptyString) {
    delete anatomicregion_;
  }
  if (anatomy_ != &::google::protobuf::internal::kEmptyString) {
    delete anatomy_;
  }
  if (dockingmode_ != &::google::protobuf::internal::kEmptyString) {
    delete dockingmode_;
  }
  if (laterality_ != &::google::protobuf::internal::kEmptyString) {
    delete laterality_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (weightunit_ != &::google::protobuf::internal::kEmptyString) {
    delete weightunit_;
  }
  if (this != default_instance_) {
  }
}

void ExamCardPropertyDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExamCardPropertyDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExamCardPropertyDTO_descriptor_;
}

const ExamCardPropertyDTO& ExamCardPropertyDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ECViewmodel_2eproto();
  return *default_instance_;
}

ExamCardPropertyDTO* ExamCardPropertyDTO::default_instance_ = NULL;

ExamCardPropertyDTO* ExamCardPropertyDTO::New() const {
  return new ExamCardPropertyDTO;
}

void ExamCardPropertyDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    alignoverlap_ = 0;
    if (has_anatomicregion()) {
      if (anatomicregion_ != &::google::protobuf::internal::kEmptyString) {
        anatomicregion_->clear();
      }
    }
    if (has_anatomy()) {
      if (anatomy_ != &::google::protobuf::internal::kEmptyString) {
        anatomy_->clear();
      }
    }
    autofillinheartrate_ = false;
    autofillinheartrateallowed_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_dockingmode()) {
      if (dockingmode_ != &::google::protobuf::internal::kEmptyString) {
        dockingmode_->clear();
      }
    }
    examduration_ = 0;
    geolinkpropagation_ = false;
    heartrate_ = 0;
    if (has_laterality()) {
      if (laterality_ != &::google::protobuf::internal::kEmptyString) {
        laterality_->clear();
      }
    }
    lateralityconflict_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    paediatric_ = false;
    patientweight_ = 0;
    posteriorholdback_ = false;
    predictedsed_ = 0;
    smarttype_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    tableusage_ = false;
    if (has_weightunit()) {
      if (weightunit_ != &::google::protobuf::internal::kEmptyString) {
        weightunit_->clear();
      }
    }
  }
  anatomicregionslist_.Clear();
  anatomieslist_.Clear();
  configuredcoils_.Clear();
  lateralities_.Clear();
  namedgeometries_.Clear();
  patientorientation_.Clear();
  reviewrequired_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExamCardPropertyDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float AlignOverlap = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alignoverlap_)));
          set_has_alignoverlap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AnatomicRegion;
        break;
      }

      // optional string AnatomicRegion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AnatomicRegion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anatomicregion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->anatomicregion().data(), this->anatomicregion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AnatomicRegionsList;
        break;
      }

      // repeated string AnatomicRegionsList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AnatomicRegionsList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_anatomicregionslist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->anatomicregionslist(this->anatomicregionslist_size() - 1).data(),
            this->anatomicregionslist(this->anatomicregionslist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AnatomicRegionsList;
        if (input->ExpectTag(34)) goto parse_AnatomiesList;
        break;
      }

      // repeated string AnatomiesList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AnatomiesList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_anatomieslist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->anatomieslist(this->anatomieslist_size() - 1).data(),
            this->anatomieslist(this->anatomieslist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_AnatomiesList;
        if (input->ExpectTag(42)) goto parse_Anatomy;
        break;
      }

      // optional string Anatomy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Anatomy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anatomy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->anatomy().data(), this->anatomy().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_AutoFillInHeartRate;
        break;
      }

      // optional bool AutoFillInHeartRate = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoFillInHeartRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autofillinheartrate_)));
          set_has_autofillinheartrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_AutoFillInHeartRateAllowed;
        break;
      }

      // optional bool AutoFillInHeartRateAllowed = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoFillInHeartRateAllowed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autofillinheartrateallowed_)));
          set_has_autofillinheartrateallowed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ConfiguredCoils;
        break;
      }

      // repeated .DTOBase ConfiguredCoils = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConfiguredCoils:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_configuredcoils()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ConfiguredCoils;
        if (input->ExpectTag(74)) goto parse_DockingMode;
        break;
      }

      // optional string DockingMode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DockingMode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dockingmode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dockingmode().data(), this->dockingmode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ExamDuration;
        break;
      }

      // optional int32 ExamDuration = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExamDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &examduration_)));
          set_has_examduration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_GeoLinkPropagation;
        break;
      }

      // optional bool GeoLinkPropagation = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GeoLinkPropagation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &geolinkpropagation_)));
          set_has_geolinkpropagation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_HeartRate;
        break;
      }

      // optional int32 HeartRate = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HeartRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heartrate_)));
          set_has_heartrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_Lateralities;
        break;
      }

      // repeated .DTOBase Lateralities = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lateralities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lateralities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_Lateralities;
        if (input->ExpectTag(114)) goto parse_Laterality;
        break;
      }

      // optional string Laterality = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Laterality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_laterality()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->laterality().data(), this->laterality().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_LateralityConflict;
        break;
      }

      // optional bool LateralityConflict = 15 [default = false];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LateralityConflict:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lateralityconflict_)));
          set_has_lateralityconflict();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_Name;
        break;
      }

      // optional string Name = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_NamedGeometries;
        break;
      }

      // repeated .GeometryDTO NamedGeometries = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NamedGeometries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_namedgeometries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_NamedGeometries;
        if (input->ExpectTag(144)) goto parse_Paediatric;
        break;
      }

      // optional bool Paediatric = 18 [default = false];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Paediatric:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paediatric_)));
          set_has_paediatric();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_PatientOrientation;
        break;
      }

      // repeated .DTOBase PatientOrientation = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PatientOrientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_patientorientation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_PatientOrientation;
        if (input->ExpectTag(161)) goto parse_PatientWeight;
        break;
      }

      // optional double PatientWeight = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PatientWeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &patientweight_)));
          set_has_patientweight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_PosteriorHoldBack;
        break;
      }

      // optional bool PosteriorHoldBack = 21 [default = false];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PosteriorHoldBack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &posteriorholdback_)));
          set_has_posteriorholdback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_PredictedSED;
        break;
      }

      // optional double PredictedSED = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PredictedSED:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &predictedsed_)));
          set_has_predictedsed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_ReviewRequired;
        break;
      }

      // repeated .DTOBase ReviewRequired = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ReviewRequired:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reviewrequired()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_ReviewRequired;
        if (input->ExpectTag(192)) goto parse_SmartType;
        break;
      }

      // optional bool SmartType = 24 [default = false];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SmartType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &smarttype_)));
          set_has_smarttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_TableUsage;
        break;
      }

      // optional bool TableUsage = 25 [default = false];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TableUsage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tableusage_)));
          set_has_tableusage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_WeightUnit;
        break;
      }

      // optional string WeightUnit = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WeightUnit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weightunit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weightunit().data(), this->weightunit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExamCardPropertyDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float AlignOverlap = 1 [default = 0];
  if (has_alignoverlap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alignoverlap(), output);
  }

  // optional string AnatomicRegion = 2;
  if (has_anatomicregion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anatomicregion().data(), this->anatomicregion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->anatomicregion(), output);
  }

  // repeated string AnatomicRegionsList = 3;
  for (int i = 0; i < this->anatomicregionslist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->anatomicregionslist(i).data(), this->anatomicregionslist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->anatomicregionslist(i), output);
  }

  // repeated string AnatomiesList = 4;
  for (int i = 0; i < this->anatomieslist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->anatomieslist(i).data(), this->anatomieslist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->anatomieslist(i), output);
  }

  // optional string Anatomy = 5;
  if (has_anatomy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anatomy().data(), this->anatomy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->anatomy(), output);
  }

  // optional bool AutoFillInHeartRate = 6 [default = false];
  if (has_autofillinheartrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->autofillinheartrate(), output);
  }

  // optional bool AutoFillInHeartRateAllowed = 7 [default = false];
  if (has_autofillinheartrateallowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->autofillinheartrateallowed(), output);
  }

  // repeated .DTOBase ConfiguredCoils = 8;
  for (int i = 0; i < this->configuredcoils_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->configuredcoils(i), output);
  }

  // optional string DockingMode = 9;
  if (has_dockingmode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dockingmode().data(), this->dockingmode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->dockingmode(), output);
  }

  // optional int32 ExamDuration = 10 [default = 0];
  if (has_examduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->examduration(), output);
  }

  // optional bool GeoLinkPropagation = 11 [default = false];
  if (has_geolinkpropagation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->geolinkpropagation(), output);
  }

  // optional int32 HeartRate = 12 [default = 0];
  if (has_heartrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->heartrate(), output);
  }

  // repeated .DTOBase Lateralities = 13;
  for (int i = 0; i < this->lateralities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->lateralities(i), output);
  }

  // optional string Laterality = 14;
  if (has_laterality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->laterality().data(), this->laterality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->laterality(), output);
  }

  // optional bool LateralityConflict = 15 [default = false];
  if (has_lateralityconflict()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->lateralityconflict(), output);
  }

  // optional string Name = 16;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->name(), output);
  }

  // repeated .GeometryDTO NamedGeometries = 17;
  for (int i = 0; i < this->namedgeometries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->namedgeometries(i), output);
  }

  // optional bool Paediatric = 18 [default = false];
  if (has_paediatric()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->paediatric(), output);
  }

  // repeated .DTOBase PatientOrientation = 19;
  for (int i = 0; i < this->patientorientation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->patientorientation(i), output);
  }

  // optional double PatientWeight = 20 [default = 0];
  if (has_patientweight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->patientweight(), output);
  }

  // optional bool PosteriorHoldBack = 21 [default = false];
  if (has_posteriorholdback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->posteriorholdback(), output);
  }

  // optional double PredictedSED = 22 [default = 0];
  if (has_predictedsed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->predictedsed(), output);
  }

  // repeated .DTOBase ReviewRequired = 23;
  for (int i = 0; i < this->reviewrequired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->reviewrequired(i), output);
  }

  // optional bool SmartType = 24 [default = false];
  if (has_smarttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->smarttype(), output);
  }

  // optional bool TableUsage = 25 [default = false];
  if (has_tableusage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->tableusage(), output);
  }

  // optional string WeightUnit = 26;
  if (has_weightunit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weightunit().data(), this->weightunit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->weightunit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExamCardPropertyDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float AlignOverlap = 1 [default = 0];
  if (has_alignoverlap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alignoverlap(), target);
  }

  // optional string AnatomicRegion = 2;
  if (has_anatomicregion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anatomicregion().data(), this->anatomicregion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->anatomicregion(), target);
  }

  // repeated string AnatomicRegionsList = 3;
  for (int i = 0; i < this->anatomicregionslist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anatomicregionslist(i).data(), this->anatomicregionslist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->anatomicregionslist(i), target);
  }

  // repeated string AnatomiesList = 4;
  for (int i = 0; i < this->anatomieslist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anatomieslist(i).data(), this->anatomieslist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->anatomieslist(i), target);
  }

  // optional string Anatomy = 5;
  if (has_anatomy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anatomy().data(), this->anatomy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->anatomy(), target);
  }

  // optional bool AutoFillInHeartRate = 6 [default = false];
  if (has_autofillinheartrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->autofillinheartrate(), target);
  }

  // optional bool AutoFillInHeartRateAllowed = 7 [default = false];
  if (has_autofillinheartrateallowed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->autofillinheartrateallowed(), target);
  }

  // repeated .DTOBase ConfiguredCoils = 8;
  for (int i = 0; i < this->configuredcoils_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->configuredcoils(i), target);
  }

  // optional string DockingMode = 9;
  if (has_dockingmode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dockingmode().data(), this->dockingmode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->dockingmode(), target);
  }

  // optional int32 ExamDuration = 10 [default = 0];
  if (has_examduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->examduration(), target);
  }

  // optional bool GeoLinkPropagation = 11 [default = false];
  if (has_geolinkpropagation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->geolinkpropagation(), target);
  }

  // optional int32 HeartRate = 12 [default = 0];
  if (has_heartrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->heartrate(), target);
  }

  // repeated .DTOBase Lateralities = 13;
  for (int i = 0; i < this->lateralities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->lateralities(i), target);
  }

  // optional string Laterality = 14;
  if (has_laterality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->laterality().data(), this->laterality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->laterality(), target);
  }

  // optional bool LateralityConflict = 15 [default = false];
  if (has_lateralityconflict()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->lateralityconflict(), target);
  }

  // optional string Name = 16;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->name(), target);
  }

  // repeated .GeometryDTO NamedGeometries = 17;
  for (int i = 0; i < this->namedgeometries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->namedgeometries(i), target);
  }

  // optional bool Paediatric = 18 [default = false];
  if (has_paediatric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->paediatric(), target);
  }

  // repeated .DTOBase PatientOrientation = 19;
  for (int i = 0; i < this->patientorientation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->patientorientation(i), target);
  }

  // optional double PatientWeight = 20 [default = 0];
  if (has_patientweight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->patientweight(), target);
  }

  // optional bool PosteriorHoldBack = 21 [default = false];
  if (has_posteriorholdback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->posteriorholdback(), target);
  }

  // optional double PredictedSED = 22 [default = 0];
  if (has_predictedsed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->predictedsed(), target);
  }

  // repeated .DTOBase ReviewRequired = 23;
  for (int i = 0; i < this->reviewrequired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->reviewrequired(i), target);
  }

  // optional bool SmartType = 24 [default = false];
  if (has_smarttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->smarttype(), target);
  }

  // optional bool TableUsage = 25 [default = false];
  if (has_tableusage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->tableusage(), target);
  }

  // optional string WeightUnit = 26;
  if (has_weightunit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weightunit().data(), this->weightunit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->weightunit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExamCardPropertyDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float AlignOverlap = 1 [default = 0];
    if (has_alignoverlap()) {
      total_size += 1 + 4;
    }

    // optional string AnatomicRegion = 2;
    if (has_anatomicregion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anatomicregion());
    }

    // optional string Anatomy = 5;
    if (has_anatomy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anatomy());
    }

    // optional bool AutoFillInHeartRate = 6 [default = false];
    if (has_autofillinheartrate()) {
      total_size += 1 + 1;
    }

    // optional bool AutoFillInHeartRateAllowed = 7 [default = false];
    if (has_autofillinheartrateallowed()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string DockingMode = 9;
    if (has_dockingmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dockingmode());
    }

    // optional int32 ExamDuration = 10 [default = 0];
    if (has_examduration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->examduration());
    }

    // optional bool GeoLinkPropagation = 11 [default = false];
    if (has_geolinkpropagation()) {
      total_size += 1 + 1;
    }

    // optional int32 HeartRate = 12 [default = 0];
    if (has_heartrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heartrate());
    }

    // optional string Laterality = 14;
    if (has_laterality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->laterality());
    }

    // optional bool LateralityConflict = 15 [default = false];
    if (has_lateralityconflict()) {
      total_size += 1 + 1;
    }

    // optional string Name = 16;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional bool Paediatric = 18 [default = false];
    if (has_paediatric()) {
      total_size += 2 + 1;
    }

    // optional double PatientWeight = 20 [default = 0];
    if (has_patientweight()) {
      total_size += 2 + 8;
    }

    // optional bool PosteriorHoldBack = 21 [default = false];
    if (has_posteriorholdback()) {
      total_size += 2 + 1;
    }

    // optional double PredictedSED = 22 [default = 0];
    if (has_predictedsed()) {
      total_size += 2 + 8;
    }

    // optional bool SmartType = 24 [default = false];
    if (has_smarttype()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool TableUsage = 25 [default = false];
    if (has_tableusage()) {
      total_size += 2 + 1;
    }

    // optional string WeightUnit = 26;
    if (has_weightunit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weightunit());
    }

  }
  // repeated string AnatomicRegionsList = 3;
  total_size += 1 * this->anatomicregionslist_size();
  for (int i = 0; i < this->anatomicregionslist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->anatomicregionslist(i));
  }

  // repeated string AnatomiesList = 4;
  total_size += 1 * this->anatomieslist_size();
  for (int i = 0; i < this->anatomieslist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->anatomieslist(i));
  }

  // repeated .DTOBase ConfiguredCoils = 8;
  total_size += 1 * this->configuredcoils_size();
  for (int i = 0; i < this->configuredcoils_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->configuredcoils(i));
  }

  // repeated .DTOBase Lateralities = 13;
  total_size += 1 * this->lateralities_size();
  for (int i = 0; i < this->lateralities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lateralities(i));
  }

  // repeated .GeometryDTO NamedGeometries = 17;
  total_size += 2 * this->namedgeometries_size();
  for (int i = 0; i < this->namedgeometries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->namedgeometries(i));
  }

  // repeated .DTOBase PatientOrientation = 19;
  total_size += 2 * this->patientorientation_size();
  for (int i = 0; i < this->patientorientation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->patientorientation(i));
  }

  // repeated .DTOBase ReviewRequired = 23;
  total_size += 2 * this->reviewrequired_size();
  for (int i = 0; i < this->reviewrequired_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reviewrequired(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExamCardPropertyDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExamCardPropertyDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExamCardPropertyDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExamCardPropertyDTO::MergeFrom(const ExamCardPropertyDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  anatomicregionslist_.MergeFrom(from.anatomicregionslist_);
  anatomieslist_.MergeFrom(from.anatomieslist_);
  configuredcoils_.MergeFrom(from.configuredcoils_);
  lateralities_.MergeFrom(from.lateralities_);
  namedgeometries_.MergeFrom(from.namedgeometries_);
  patientorientation_.MergeFrom(from.patientorientation_);
  reviewrequired_.MergeFrom(from.reviewrequired_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alignoverlap()) {
      set_alignoverlap(from.alignoverlap());
    }
    if (from.has_anatomicregion()) {
      set_anatomicregion(from.anatomicregion());
    }
    if (from.has_anatomy()) {
      set_anatomy(from.anatomy());
    }
    if (from.has_autofillinheartrate()) {
      set_autofillinheartrate(from.autofillinheartrate());
    }
    if (from.has_autofillinheartrateallowed()) {
      set_autofillinheartrateallowed(from.autofillinheartrateallowed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dockingmode()) {
      set_dockingmode(from.dockingmode());
    }
    if (from.has_examduration()) {
      set_examduration(from.examduration());
    }
    if (from.has_geolinkpropagation()) {
      set_geolinkpropagation(from.geolinkpropagation());
    }
    if (from.has_heartrate()) {
      set_heartrate(from.heartrate());
    }
    if (from.has_laterality()) {
      set_laterality(from.laterality());
    }
    if (from.has_lateralityconflict()) {
      set_lateralityconflict(from.lateralityconflict());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_paediatric()) {
      set_paediatric(from.paediatric());
    }
    if (from.has_patientweight()) {
      set_patientweight(from.patientweight());
    }
    if (from.has_posteriorholdback()) {
      set_posteriorholdback(from.posteriorholdback());
    }
    if (from.has_predictedsed()) {
      set_predictedsed(from.predictedsed());
    }
    if (from.has_smarttype()) {
      set_smarttype(from.smarttype());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tableusage()) {
      set_tableusage(from.tableusage());
    }
    if (from.has_weightunit()) {
      set_weightunit(from.weightunit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExamCardPropertyDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExamCardPropertyDTO::CopyFrom(const ExamCardPropertyDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExamCardPropertyDTO::IsInitialized() const {

  return true;
}

void ExamCardPropertyDTO::Swap(ExamCardPropertyDTO* other) {
  if (other != this) {
    std::swap(alignoverlap_, other->alignoverlap_);
    std::swap(anatomicregion_, other->anatomicregion_);
    anatomicregionslist_.Swap(&other->anatomicregionslist_);
    anatomieslist_.Swap(&other->anatomieslist_);
    std::swap(anatomy_, other->anatomy_);
    std::swap(autofillinheartrate_, other->autofillinheartrate_);
    std::swap(autofillinheartrateallowed_, other->autofillinheartrateallowed_);
    configuredcoils_.Swap(&other->configuredcoils_);
    std::swap(dockingmode_, other->dockingmode_);
    std::swap(examduration_, other->examduration_);
    std::swap(geolinkpropagation_, other->geolinkpropagation_);
    std::swap(heartrate_, other->heartrate_);
    lateralities_.Swap(&other->lateralities_);
    std::swap(laterality_, other->laterality_);
    std::swap(lateralityconflict_, other->lateralityconflict_);
    std::swap(name_, other->name_);
    namedgeometries_.Swap(&other->namedgeometries_);
    std::swap(paediatric_, other->paediatric_);
    patientorientation_.Swap(&other->patientorientation_);
    std::swap(patientweight_, other->patientweight_);
    std::swap(posteriorholdback_, other->posteriorholdback_);
    std::swap(predictedsed_, other->predictedsed_);
    reviewrequired_.Swap(&other->reviewrequired_);
    std::swap(smarttype_, other->smarttype_);
    std::swap(tableusage_, other->tableusage_);
    std::swap(weightunit_, other->weightunit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExamCardPropertyDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExamCardPropertyDTO_descriptor_;
  metadata.reflection = ExamCardPropertyDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GeometryDTO::GeometryDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeometryDTO::InitAsDefaultInstance() {
}

GeometryDTO::GeometryDTO(const GeometryDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeometryDTO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeometryDTO::~GeometryDTO() {
  SharedDtor();
}

void GeometryDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GeometryDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeometryDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeometryDTO_descriptor_;
}

const GeometryDTO& GeometryDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ECViewmodel_2eproto();
  return *default_instance_;
}

GeometryDTO* GeometryDTO::default_instance_ = NULL;

GeometryDTO* GeometryDTO::New() const {
  return new GeometryDTO;
}

void GeometryDTO::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeometryDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GeometryDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeometryDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeometryDTO::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeometryDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeometryDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeometryDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeometryDTO::MergeFrom(const GeometryDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeometryDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryDTO::CopyFrom(const GeometryDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryDTO::IsInitialized() const {

  return true;
}

void GeometryDTO::Swap(GeometryDTO* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeometryDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeometryDTO_descriptor_;
  metadata.reflection = GeometryDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IAdapter::IAdapter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IAdapter::InitAsDefaultInstance() {
}

IAdapter::IAdapter(const IAdapter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IAdapter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IAdapter::~IAdapter() {
  SharedDtor();
}

void IAdapter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IAdapter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IAdapter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IAdapter_descriptor_;
}

const IAdapter& IAdapter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ECViewmodel_2eproto();
  return *default_instance_;
}

IAdapter* IAdapter::default_instance_ = NULL;

IAdapter* IAdapter::New() const {
  return new IAdapter;
}

void IAdapter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IAdapter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void IAdapter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IAdapter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IAdapter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IAdapter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IAdapter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IAdapter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IAdapter::MergeFrom(const IAdapter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IAdapter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IAdapter::CopyFrom(const IAdapter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IAdapter::IsInitialized() const {

  return true;
}

void IAdapter::Swap(IAdapter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IAdapter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IAdapter_descriptor_;
  metadata.reflection = IAdapter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Object::Object()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Object::InitAsDefaultInstance() {
}

Object::Object(const Object& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Object::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Object::~Object() {
  SharedDtor();
}

void Object::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Object_descriptor_;
}

const Object& Object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ECViewmodel_2eproto();
  return *default_instance_;
}

Object* Object::default_instance_ = NULL;

Object* Object::New() const {
  return new Object;
}

void Object::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Object::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Object::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Object* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Object*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {

  return true;
}

void Object::Swap(Object* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Object_descriptor_;
  metadata.reflection = Object_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScanSetDTO::kChildElementsFieldNumber;
const int ScanSetDTO::kEditModeFieldNumber;
#endif  // !_MSC_VER

ScanSetDTO::ScanSetDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScanSetDTO::InitAsDefaultInstance() {
}

ScanSetDTO::ScanSetDTO(const ScanSetDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScanSetDTO::SharedCtor() {
  _cached_size_ = 0;
  editmode_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanSetDTO::~ScanSetDTO() {
  SharedDtor();
}

void ScanSetDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScanSetDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanSetDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanSetDTO_descriptor_;
}

const ScanSetDTO& ScanSetDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ECViewmodel_2eproto();
  return *default_instance_;
}

ScanSetDTO* ScanSetDTO::default_instance_ = NULL;

ScanSetDTO* ScanSetDTO::New() const {
  return new ScanSetDTO;
}

void ScanSetDTO::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    editmode_ = false;
  }
  childelements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScanSetDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ElementBase ChildElements = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChildElements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_childelements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ChildElements;
        if (input->ExpectTag(16)) goto parse_EditMode;
        break;
      }

      // optional bool EditMode = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EditMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &editmode_)));
          set_has_editmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScanSetDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ElementBase ChildElements = 1;
  for (int i = 0; i < this->childelements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->childelements(i), output);
  }

  // optional bool EditMode = 2 [default = false];
  if (has_editmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->editmode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScanSetDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ElementBase ChildElements = 1;
  for (int i = 0; i < this->childelements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->childelements(i), target);
  }

  // optional bool EditMode = 2 [default = false];
  if (has_editmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->editmode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScanSetDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool EditMode = 2 [default = false];
    if (has_editmode()) {
      total_size += 1 + 1;
    }

  }
  // repeated .ElementBase ChildElements = 1;
  total_size += 1 * this->childelements_size();
  for (int i = 0; i < this->childelements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->childelements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanSetDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScanSetDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScanSetDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScanSetDTO::MergeFrom(const ScanSetDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  childelements_.MergeFrom(from.childelements_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_editmode()) {
      set_editmode(from.editmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScanSetDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanSetDTO::CopyFrom(const ScanSetDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanSetDTO::IsInitialized() const {

  return true;
}

void ScanSetDTO::Swap(ScanSetDTO* other) {
  if (other != this) {
    childelements_.Swap(&other->childelements_);
    std::swap(editmode_, other->editmode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScanSetDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanSetDTO_descriptor_;
  metadata.reflection = ScanSetDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectableItemDTO::kCaptionFieldNumber;
const int SelectableItemDTO::kIDFieldNumber;
const int SelectableItemDTO::kIsInConflictFieldNumber;
const int SelectableItemDTO::kIsSelectedFieldNumber;
#endif  // !_MSC_VER

SelectableItemDTO::SelectableItemDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelectableItemDTO::InitAsDefaultInstance() {
}

SelectableItemDTO::SelectableItemDTO(const SelectableItemDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelectableItemDTO::SharedCtor() {
  _cached_size_ = 0;
  caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isinconflict_ = false;
  isselected_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectableItemDTO::~SelectableItemDTO() {
  SharedDtor();
}

void SelectableItemDTO::SharedDtor() {
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    delete caption_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void SelectableItemDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectableItemDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectableItemDTO_descriptor_;
}

const SelectableItemDTO& SelectableItemDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ECViewmodel_2eproto();
  return *default_instance_;
}

SelectableItemDTO* SelectableItemDTO::default_instance_ = NULL;

SelectableItemDTO* SelectableItemDTO::New() const {
  return new SelectableItemDTO;
}

void SelectableItemDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_caption()) {
      if (caption_ != &::google::protobuf::internal::kEmptyString) {
        caption_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    isinconflict_ = false;
    isselected_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectableItemDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Caption = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->caption().data(), this->caption().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ID;
        break;
      }

      // optional string ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsInConflict;
        break;
      }

      // optional bool IsInConflict = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsInConflict:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isinconflict_)));
          set_has_isinconflict();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsSelected;
        break;
      }

      // optional bool IsSelected = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSelected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isselected_)));
          set_has_isselected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelectableItemDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Caption = 1;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->caption(), output);
  }

  // optional string ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }

  // optional bool IsInConflict = 3 [default = false];
  if (has_isinconflict()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isinconflict(), output);
  }

  // optional bool IsSelected = 4 [default = false];
  if (has_isselected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isselected(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelectableItemDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Caption = 1;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->caption(), target);
  }

  // optional string ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional bool IsInConflict = 3 [default = false];
  if (has_isinconflict()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isinconflict(), target);
  }

  // optional bool IsSelected = 4 [default = false];
  if (has_isselected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isselected(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelectableItemDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Caption = 1;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

    // optional string ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional bool IsInConflict = 3 [default = false];
    if (has_isinconflict()) {
      total_size += 1 + 1;
    }

    // optional bool IsSelected = 4 [default = false];
    if (has_isselected()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectableItemDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectableItemDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectableItemDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectableItemDTO::MergeFrom(const SelectableItemDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_caption()) {
      set_caption(from.caption());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_isinconflict()) {
      set_isinconflict(from.isinconflict());
    }
    if (from.has_isselected()) {
      set_isselected(from.isselected());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectableItemDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectableItemDTO::CopyFrom(const SelectableItemDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectableItemDTO::IsInitialized() const {

  return true;
}

void SelectableItemDTO::Swap(SelectableItemDTO* other) {
  if (other != this) {
    std::swap(caption_, other->caption_);
    std::swap(id_, other->id_);
    std::swap(isinconflict_, other->isinconflict_);
    std::swap(isselected_, other->isselected_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectableItemDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectableItemDTO_descriptor_;
  metadata.reflection = SelectableItemDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StepDTO::StepDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StepDTO::InitAsDefaultInstance() {
}

StepDTO::StepDTO(const StepDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StepDTO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StepDTO::~StepDTO() {
  SharedDtor();
}

void StepDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StepDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StepDTO_descriptor_;
}

const StepDTO& StepDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ECViewmodel_2eproto();
  return *default_instance_;
}

StepDTO* StepDTO::default_instance_ = NULL;

StepDTO* StepDTO::New() const {
  return new StepDTO;
}

void StepDTO::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StepDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void StepDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StepDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StepDTO::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StepDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StepDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StepDTO::MergeFrom(const StepDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StepDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepDTO::CopyFrom(const StepDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepDTO::IsInitialized() const {

  return true;
}

void StepDTO::Swap(StepDTO* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StepDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StepDTO_descriptor_;
  metadata.reflection = StepDTO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferPropertyDTO::kEnablePushToWorkstationFieldNumber;
const int TransferPropertyDTO::kIsCandidateForTransferFieldNumber;
const int TransferPropertyDTO::kPushToWorkstationFieldNumber;
const int TransferPropertyDTO::kSliceOrderFieldNumber;
const int TransferPropertyDTO::kSortingAttributesFieldNumber;
#endif  // !_MSC_VER

TransferPropertyDTO::TransferPropertyDTO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransferPropertyDTO::InitAsDefaultInstance() {
}

TransferPropertyDTO::TransferPropertyDTO(const TransferPropertyDTO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransferPropertyDTO::SharedCtor() {
  _cached_size_ = 0;
  enablepushtoworkstation_ = false;
  iscandidatefortransfer_ = false;
  pushtoworkstation_ = false;
  sliceorder_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferPropertyDTO::~TransferPropertyDTO() {
  SharedDtor();
}

void TransferPropertyDTO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransferPropertyDTO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferPropertyDTO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferPropertyDTO_descriptor_;
}

const TransferPropertyDTO& TransferPropertyDTO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ECViewmodel_2eproto();
  return *default_instance_;
}

TransferPropertyDTO* TransferPropertyDTO::default_instance_ = NULL;

TransferPropertyDTO* TransferPropertyDTO::New() const {
  return new TransferPropertyDTO;
}

void TransferPropertyDTO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enablepushtoworkstation_ = false;
    iscandidatefortransfer_ = false;
    pushtoworkstation_ = false;
    sliceorder_ = 0;
  }
  sortingattributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferPropertyDTO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool EnablePushToWorkstation = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enablepushtoworkstation_)));
          set_has_enablepushtoworkstation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsCandidateForTransfer;
        break;
      }

      // optional bool IsCandidateForTransfer = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCandidateForTransfer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscandidatefortransfer_)));
          set_has_iscandidatefortransfer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PushToWorkstation;
        break;
      }

      // optional bool PushToWorkstation = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PushToWorkstation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pushtoworkstation_)));
          set_has_pushtoworkstation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SliceOrder;
        break;
      }

      // optional .SortOrder SliceOrder = 4 [default = ASCENDING];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SliceOrder:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortOrder_IsValid(value)) {
            set_sliceorder(static_cast< ::SortOrder >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SortingAttributes;
        break;
      }

      // repeated .SortAttributes SortingAttributes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SortingAttributes:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SortAttributes_IsValid(value)) {
            add_sortingattributes(static_cast< ::SortAttributes >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::SortAttributes_IsValid,
                 this->mutable_sortingattributes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SortingAttributes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransferPropertyDTO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool EnablePushToWorkstation = 1 [default = false];
  if (has_enablepushtoworkstation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enablepushtoworkstation(), output);
  }

  // optional bool IsCandidateForTransfer = 2 [default = false];
  if (has_iscandidatefortransfer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->iscandidatefortransfer(), output);
  }

  // optional bool PushToWorkstation = 3 [default = false];
  if (has_pushtoworkstation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->pushtoworkstation(), output);
  }

  // optional .SortOrder SliceOrder = 4 [default = ASCENDING];
  if (has_sliceorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->sliceorder(), output);
  }

  // repeated .SortAttributes SortingAttributes = 5;
  for (int i = 0; i < this->sortingattributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->sortingattributes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransferPropertyDTO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool EnablePushToWorkstation = 1 [default = false];
  if (has_enablepushtoworkstation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enablepushtoworkstation(), target);
  }

  // optional bool IsCandidateForTransfer = 2 [default = false];
  if (has_iscandidatefortransfer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->iscandidatefortransfer(), target);
  }

  // optional bool PushToWorkstation = 3 [default = false];
  if (has_pushtoworkstation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->pushtoworkstation(), target);
  }

  // optional .SortOrder SliceOrder = 4 [default = ASCENDING];
  if (has_sliceorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->sliceorder(), target);
  }

  // repeated .SortAttributes SortingAttributes = 5;
  for (int i = 0; i < this->sortingattributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->sortingattributes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransferPropertyDTO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool EnablePushToWorkstation = 1 [default = false];
    if (has_enablepushtoworkstation()) {
      total_size += 1 + 1;
    }

    // optional bool IsCandidateForTransfer = 2 [default = false];
    if (has_iscandidatefortransfer()) {
      total_size += 1 + 1;
    }

    // optional bool PushToWorkstation = 3 [default = false];
    if (has_pushtoworkstation()) {
      total_size += 1 + 1;
    }

    // optional .SortOrder SliceOrder = 4 [default = ASCENDING];
    if (has_sliceorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sliceorder());
    }

  }
  // repeated .SortAttributes SortingAttributes = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->sortingattributes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->sortingattributes(i));
    }
    total_size += 1 * this->sortingattributes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferPropertyDTO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferPropertyDTO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferPropertyDTO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferPropertyDTO::MergeFrom(const TransferPropertyDTO& from) {
  GOOGLE_CHECK_NE(&from, this);
  sortingattributes_.MergeFrom(from.sortingattributes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enablepushtoworkstation()) {
      set_enablepushtoworkstation(from.enablepushtoworkstation());
    }
    if (from.has_iscandidatefortransfer()) {
      set_iscandidatefortransfer(from.iscandidatefortransfer());
    }
    if (from.has_pushtoworkstation()) {
      set_pushtoworkstation(from.pushtoworkstation());
    }
    if (from.has_sliceorder()) {
      set_sliceorder(from.sliceorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferPropertyDTO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferPropertyDTO::CopyFrom(const TransferPropertyDTO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferPropertyDTO::IsInitialized() const {

  return true;
}

void TransferPropertyDTO::Swap(TransferPropertyDTO* other) {
  if (other != this) {
    std::swap(enablepushtoworkstation_, other->enablepushtoworkstation_);
    std::swap(iscandidatefortransfer_, other->iscandidatefortransfer_);
    std::swap(pushtoworkstation_, other->pushtoworkstation_);
    std::swap(sliceorder_, other->sliceorder_);
    sortingattributes_.Swap(&other->sortingattributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferPropertyDTO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferPropertyDTO_descriptor_;
  metadata.reflection = TransferPropertyDTO_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
