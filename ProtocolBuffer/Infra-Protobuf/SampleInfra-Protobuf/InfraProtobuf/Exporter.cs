#region  Copyright 2014 Koninklijke Philips N.V.
// 
// All rights are reserved. Reproduction or transmission in whole or in part, in
// any form or by any means, electronic, mechanical or otherwise, is prohibited
// without the prior written permission of the copyright owner.
#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Xml.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace Philips.PmsMR.Protobuf.ModelReflection
{
    /// <summary>
    /// Exporter of protobuf file contents.
    /// </summary>
    public class Exporter
    {
        internal Exporter(ProtoBuf.Meta.RuntimeTypeModel model)
        {
            this.model = model;
        }

        /// <summary>
        /// Exports all known data model types.
        /// </summary>
        /// <returns>Type-protobuf file contents mapping</returns>
        public IDictionary<Type, string> ExportAll()
        {
            var map = new Dictionary<Type, string>();
            foreach (ProtoBuf.Meta.MetaType metaType in model.GetTypes())
            {
                var netType = metaType.Type;
                map[netType] = model.GetSchema(netType);
            }

            foreach (var builtInType in new [] {typeof(System.Guid), typeof(System.DateTime), typeof(System.TimeSpan)}) {
                map[builtInType] = model.GetSchema(builtInType);
            }
            return map;
        }

        /// <summary>
        /// Exports all known data model types in a single string.
        /// </summary>
        /// <returns></returns>
        public string ExportAllConcatenated()
        {
            return model.GetSchema(null);
        }

        /// <summary>
        /// Generates the contents of a .proto file.
        /// </summary>
        /// <param name="protoNamespace"></param>
        /// <param name="mappingResult"></param>
        /// <param name="assemblyDoc">Autogenerated assembly documentation. Can be null if not available</param>
        /// <returns></returns>
        public string GenerateProtoContents(string protoNamespace, IMappingResult mappingResult, string assemblyDoc)
        {
            IDictionary<Type, int> typeIdMap = mappingResult.TypeToIntMap;
            var rawContents = ExportAllConcatenated();
            string namespaceType = protoNamespace;
            var builder = new StringBuilder();
            string copyRight = "// Copyright 2014 Koninklijke Philips N.V." + Environment.NewLine +
                               "// All rights are reserved. Reproduction or transmission in whole or in part, " +
                               "in any form or by any means, electronic, mechanical or otherwise, is prohibited without " +
                               "the prior written permission of the copyright owner." + Environment.NewLine;
            builder.Append(copyRight);

            string autoGeneration = "//.Proto Files are automatically generated by protogenerator" + Environment.NewLine;
            builder.Append(autoGeneration);
            string shortDateTimeUTC = "// Date and TimeStamp in UTC : " + DateTime.FromFileTimeUtc(DateTime.UtcNow.ToFileTime()) +
                                       Environment.NewLine;
            builder.Append(shortDateTimeUTC);
            builder.Append("package " + namespaceType + ";" + Environment.NewLine);

            builder.AppendLine();
            builder.AppendLine("/// Unique message identifiers. The semantics of a message cannot change after the integer has been defined (backwards compatible).");
            builder.AppendLine("enum " + ReservedMessageIdType  + " {");
            foreach (var pair in typeIdMap.OrderBy(x => x.Key.Name)) {
                if (!pair.Key.IsEnum) {
                    builder.AppendFormat(CultureInfo.InvariantCulture, "   {0}Id = {1};", pair.Key.Name,
                        pair.Value.ToString(CultureInfo.InvariantCulture));
                    builder.AppendLine();
                }
            }
            builder.AppendLine("}");
            builder.AppendLine();

            rawContents = Regex.Replace(rawContents, "^package.*$", "", RegexOptions.Compiled | RegexOptions.Multiline | RegexOptions.CultureInvariant);
            builder.Append(rawContents);

            var decorator = new CommentDecorator(assemblyDoc);
            return decorator.DecorateWithComments(builder.ToString(), mappingResult.GetTypes());
        }

        /// <summary>
        /// Reserved keyword for message id definition enum name.
        /// </summary>
        internal const string ReservedMessageIdType = "MessageId";

        private readonly ProtoBuf.Meta.RuntimeTypeModel model;

    }
}
