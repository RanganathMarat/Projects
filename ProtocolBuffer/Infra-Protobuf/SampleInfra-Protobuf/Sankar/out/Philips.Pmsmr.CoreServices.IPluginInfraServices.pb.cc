// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Philips.Pmsmr.CoreServices.IPluginInfraServices.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Philips.Pmsmr.CoreServices.IPluginInfraServices.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Philips {
namespace Pmsmr {
namespace CoreServices {
namespace IPluginInfraServices {

namespace {

const ::google::protobuf::Descriptor* AuditLogEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuditLogEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuditLogEntryRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuditLogEntryRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuditLogEntryResponseMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuditLogEntryResponseMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateNewSeriesRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateNewSeriesRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateNewSeriesResponseMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateNewSeriesResponseMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaultResponseMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaultResponseMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInstanceRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInstanceRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInstanceResponseMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInstanceResponseMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LicenseInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LicenseInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogEntriesRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogEntriesRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogEntriesResponseMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogEntriesResponseMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* PatientIdentification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PatientIdentification_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryLicensesRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryLicensesRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryLicensesResponseMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryLicensesResponseMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryVersionRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryVersionRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryVersionResponseMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryVersionResponseMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreInstanceRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreInstanceRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreInstanceResponseMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreInstanceResponseMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AuditTrailActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LoggingSeverityType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LoggingType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto() {
  protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Philips.Pmsmr.CoreServices.IPluginInfraServices.proto");
  GOOGLE_CHECK(file != NULL);
  AuditLogEntry_descriptor_ = file->message_type(0);
  static const int AuditLogEntry_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditLogEntry, localuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditLogEntry, mediaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditLogEntry, cuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditLogEntry, objectaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditLogEntry, mediatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditLogEntry, patient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditLogEntry, ipaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditLogEntry, applicationentitytitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditLogEntry, suid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditLogEntry, instancessent_),
  };
  AuditLogEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuditLogEntry_descriptor_,
      AuditLogEntry::default_instance_,
      AuditLogEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditLogEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditLogEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuditLogEntry));
  AuditLogEntryRequestMessage_descriptor_ = file->message_type(1);
  static const int AuditLogEntryRequestMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditLogEntryRequestMessage, auditlog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditLogEntryRequestMessage, requesttoken_),
  };
  AuditLogEntryRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuditLogEntryRequestMessage_descriptor_,
      AuditLogEntryRequestMessage::default_instance_,
      AuditLogEntryRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditLogEntryRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditLogEntryRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuditLogEntryRequestMessage));
  AuditLogEntryResponseMessage_descriptor_ = file->message_type(2);
  static const int AuditLogEntryResponseMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditLogEntryResponseMessage, requesttoken_),
  };
  AuditLogEntryResponseMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuditLogEntryResponseMessage_descriptor_,
      AuditLogEntryResponseMessage::default_instance_,
      AuditLogEntryResponseMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditLogEntryResponseMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditLogEntryResponseMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuditLogEntryResponseMessage));
  CreateNewSeriesRequestMessage_descriptor_ = file->message_type(3);
  static const int CreateNewSeriesRequestMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNewSeriesRequestMessage, studyuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNewSeriesRequestMessage, requesttoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNewSeriesRequestMessage, totalnumberofinstances_),
  };
  CreateNewSeriesRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateNewSeriesRequestMessage_descriptor_,
      CreateNewSeriesRequestMessage::default_instance_,
      CreateNewSeriesRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNewSeriesRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNewSeriesRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateNewSeriesRequestMessage));
  CreateNewSeriesResponseMessage_descriptor_ = file->message_type(4);
  static const int CreateNewSeriesResponseMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNewSeriesResponseMessage, requesttoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNewSeriesResponseMessage, seriesuid_),
  };
  CreateNewSeriesResponseMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateNewSeriesResponseMessage_descriptor_,
      CreateNewSeriesResponseMessage::default_instance_,
      CreateNewSeriesResponseMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNewSeriesResponseMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNewSeriesResponseMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateNewSeriesResponseMessage));
  FaultResponseMessage_descriptor_ = file->message_type(5);
  static const int FaultResponseMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultResponseMessage, requesttoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultResponseMessage, description_),
  };
  FaultResponseMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaultResponseMessage_descriptor_,
      FaultResponseMessage::default_instance_,
      FaultResponseMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultResponseMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultResponseMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaultResponseMessage));
  GetInstanceRequestMessage_descriptor_ = file->message_type(6);
  static const int GetInstanceRequestMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceRequestMessage, seriesroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceRequestMessage, indexnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceRequestMessage, requesttoken_),
  };
  GetInstanceRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInstanceRequestMessage_descriptor_,
      GetInstanceRequestMessage::default_instance_,
      GetInstanceRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInstanceRequestMessage));
  GetInstanceResponseMessage_descriptor_ = file->message_type(7);
  static const int GetInstanceResponseMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceResponseMessage, dicominstance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceResponseMessage, requesttoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceResponseMessage, totalnumberofinstances_),
  };
  GetInstanceResponseMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInstanceResponseMessage_descriptor_,
      GetInstanceResponseMessage::default_instance_,
      GetInstanceResponseMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceResponseMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceResponseMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInstanceResponseMessage));
  LicenseInformation_descriptor_ = file->message_type(8);
  static const int LicenseInformation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicenseInformation, validlicenseavailable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicenseInformation, option_),
  };
  LicenseInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LicenseInformation_descriptor_,
      LicenseInformation::default_instance_,
      LicenseInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicenseInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicenseInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LicenseInformation));
  LogEntriesRequestMessage_descriptor_ = file->message_type(9);
  static const int LogEntriesRequestMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntriesRequestMessage, requesttoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntriesRequestMessage, entriestobelogged_),
  };
  LogEntriesRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogEntriesRequestMessage_descriptor_,
      LogEntriesRequestMessage::default_instance_,
      LogEntriesRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntriesRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntriesRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogEntriesRequestMessage));
  LogEntriesResponseMessage_descriptor_ = file->message_type(10);
  static const int LogEntriesResponseMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntriesResponseMessage, requesttoken_),
  };
  LogEntriesResponseMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogEntriesResponseMessage_descriptor_,
      LogEntriesResponseMessage::default_instance_,
      LogEntriesResponseMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntriesResponseMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntriesResponseMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogEntriesResponseMessage));
  LogEntry_descriptor_ = file->message_type(11);
  static const int LogEntry_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, originatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, additionalinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, type_),
  };
  LogEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogEntry_descriptor_,
      LogEntry::default_instance_,
      LogEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogEntry));
  PatientIdentification_descriptor_ = file->message_type(12);
  static const int PatientIdentification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatientIdentification, patientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatientIdentification, patientname_),
  };
  PatientIdentification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PatientIdentification_descriptor_,
      PatientIdentification::default_instance_,
      PatientIdentification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatientIdentification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatientIdentification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PatientIdentification));
  QueryLicensesRequestMessage_descriptor_ = file->message_type(13);
  static const int QueryLicensesRequestMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLicensesRequestMessage, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLicensesRequestMessage, requesttoken_),
  };
  QueryLicensesRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryLicensesRequestMessage_descriptor_,
      QueryLicensesRequestMessage::default_instance_,
      QueryLicensesRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLicensesRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLicensesRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryLicensesRequestMessage));
  QueryLicensesResponseMessage_descriptor_ = file->message_type(14);
  static const int QueryLicensesResponseMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLicensesResponseMessage, requesttoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLicensesResponseMessage, licenses_),
  };
  QueryLicensesResponseMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryLicensesResponseMessage_descriptor_,
      QueryLicensesResponseMessage::default_instance_,
      QueryLicensesResponseMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLicensesResponseMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLicensesResponseMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryLicensesResponseMessage));
  QueryVersionRequestMessage_descriptor_ = file->message_type(15);
  static const int QueryVersionRequestMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVersionRequestMessage, requesttoken_),
  };
  QueryVersionRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryVersionRequestMessage_descriptor_,
      QueryVersionRequestMessage::default_instance_,
      QueryVersionRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVersionRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVersionRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryVersionRequestMessage));
  QueryVersionResponseMessage_descriptor_ = file->message_type(16);
  static const int QueryVersionResponseMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVersionResponseMessage, productmodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVersionResponseMessage, requesttoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVersionResponseMessage, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVersionResponseMessage, systemtype_),
  };
  QueryVersionResponseMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryVersionResponseMessage_descriptor_,
      QueryVersionResponseMessage::default_instance_,
      QueryVersionResponseMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVersionResponseMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVersionResponseMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryVersionResponseMessage));
  StoreInstanceRequestMessage_descriptor_ = file->message_type(17);
  static const int StoreInstanceRequestMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInstanceRequestMessage, indexnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInstanceRequestMessage, dicominstance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInstanceRequestMessage, requesttoken_),
  };
  StoreInstanceRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreInstanceRequestMessage_descriptor_,
      StoreInstanceRequestMessage::default_instance_,
      StoreInstanceRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInstanceRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInstanceRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreInstanceRequestMessage));
  StoreInstanceResponseMessage_descriptor_ = file->message_type(18);
  static const int StoreInstanceResponseMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInstanceResponseMessage, requesttoken_),
  };
  StoreInstanceResponseMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreInstanceResponseMessage_descriptor_,
      StoreInstanceResponseMessage::default_instance_,
      StoreInstanceResponseMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInstanceResponseMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreInstanceResponseMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreInstanceResponseMessage));
  MessageId_descriptor_ = file->enum_type(0);
  AuditTrailActionType_descriptor_ = file->enum_type(1);
  LoggingSeverityType_descriptor_ = file->enum_type(2);
  LoggingType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuditLogEntry_descriptor_, &AuditLogEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuditLogEntryRequestMessage_descriptor_, &AuditLogEntryRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuditLogEntryResponseMessage_descriptor_, &AuditLogEntryResponseMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateNewSeriesRequestMessage_descriptor_, &CreateNewSeriesRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateNewSeriesResponseMessage_descriptor_, &CreateNewSeriesResponseMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaultResponseMessage_descriptor_, &FaultResponseMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInstanceRequestMessage_descriptor_, &GetInstanceRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInstanceResponseMessage_descriptor_, &GetInstanceResponseMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LicenseInformation_descriptor_, &LicenseInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogEntriesRequestMessage_descriptor_, &LogEntriesRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogEntriesResponseMessage_descriptor_, &LogEntriesResponseMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogEntry_descriptor_, &LogEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PatientIdentification_descriptor_, &PatientIdentification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryLicensesRequestMessage_descriptor_, &QueryLicensesRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryLicensesResponseMessage_descriptor_, &QueryLicensesResponseMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryVersionRequestMessage_descriptor_, &QueryVersionRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryVersionResponseMessage_descriptor_, &QueryVersionResponseMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreInstanceRequestMessage_descriptor_, &StoreInstanceRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreInstanceResponseMessage_descriptor_, &StoreInstanceResponseMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto() {
  delete AuditLogEntry::default_instance_;
  delete AuditLogEntry_reflection_;
  delete AuditLogEntryRequestMessage::default_instance_;
  delete AuditLogEntryRequestMessage_reflection_;
  delete AuditLogEntryResponseMessage::default_instance_;
  delete AuditLogEntryResponseMessage_reflection_;
  delete CreateNewSeriesRequestMessage::default_instance_;
  delete CreateNewSeriesRequestMessage_reflection_;
  delete CreateNewSeriesResponseMessage::default_instance_;
  delete CreateNewSeriesResponseMessage_reflection_;
  delete FaultResponseMessage::default_instance_;
  delete FaultResponseMessage_reflection_;
  delete GetInstanceRequestMessage::default_instance_;
  delete GetInstanceRequestMessage_reflection_;
  delete GetInstanceResponseMessage::default_instance_;
  delete GetInstanceResponseMessage_reflection_;
  delete LicenseInformation::default_instance_;
  delete LicenseInformation_reflection_;
  delete LogEntriesRequestMessage::default_instance_;
  delete LogEntriesRequestMessage_reflection_;
  delete LogEntriesResponseMessage::default_instance_;
  delete LogEntriesResponseMessage_reflection_;
  delete LogEntry::default_instance_;
  delete LogEntry_reflection_;
  delete PatientIdentification::default_instance_;
  delete PatientIdentification_reflection_;
  delete QueryLicensesRequestMessage::default_instance_;
  delete QueryLicensesRequestMessage_reflection_;
  delete QueryLicensesResponseMessage::default_instance_;
  delete QueryLicensesResponseMessage_reflection_;
  delete QueryVersionRequestMessage::default_instance_;
  delete QueryVersionRequestMessage_reflection_;
  delete QueryVersionResponseMessage::default_instance_;
  delete QueryVersionResponseMessage_reflection_;
  delete StoreInstanceRequestMessage::default_instance_;
  delete StoreInstanceRequestMessage_reflection_;
  delete StoreInstanceResponseMessage::default_instance_;
  delete StoreInstanceResponseMessage_reflection_;
}

void protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bcl::protobuf_AddDesc_bcl_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n5Philips.Pmsmr.CoreServices.IPluginInfr"
    "aServices.proto\022/Philips.Pmsmr.CoreServi"
    "ces.IPluginInfraServices\032\tbcl.proto\"\207\003\n\r"
    "AuditLogEntry\022\024\n\tLocalUser\030\222\354\312Z \001(\t\022\022\n\007M"
    "ediaId\030\340\247\246] \001(\t\022\017\n\004Cuid\030\200\304\363r \001(\t\022_\n\014Obje"
    "ctAction\030\354\312\214\230\001 \001(\0162E.Philips.Pmsmr.CoreS"
    "ervices.IPluginInfraServices.AuditTrailA"
    "ctionType\022\025\n\tMediaType\030\243\206\221\234\001 \001(\t\022[\n\007Pati"
    "ent\030\302\241\206\253\001 \001(\0132F.Philips.Pmsmr.CoreServic"
    "es.IPluginInfraServices.PatientIdentific"
    "ation\022\025\n\tIpAddress\030\224\325\247\265\001 \001(\t\022\"\n\026Applicat"
    "ionEntityTitle\030\360\357\261\311\001 \001(\t\022\020\n\004Suid\030\301\305\370\324\001 \001"
    "(\t\022\031\n\rInstancesSent\030\317\321\323\331\001 \001(\005\"\227\001\n\033AuditL"
    "ogEntryRequestMessage\022S\n\010AuditLog\030\211\311\337Q \001"
    "(\0132>.Philips.Pmsmr.CoreServices.IPluginI"
    "nfraServices.AuditLogEntry\022#\n\014RequestTok"
    "en\030\206\230\313\277\001 \001(\0132\t.bcl.Guid\"C\n\034AuditLogEntry"
    "ResponseMessage\022#\n\014RequestToken\030\206\230\313\277\001 \001("
    "\0132\t.bcl.Guid\"}\n\035CreateNewSeriesRequestMe"
    "ssage\022\023\n\010StudyUid\030\217\355\252\017 \001(\t\022#\n\014RequestTok"
    "en\030\206\230\313\277\001 \001(\0132\t.bcl.Guid\022\"\n\026TotalNumberOf"
    "Instances\030\340\321\376\355\001 \001(\005\"\\\n\036CreateNewSeriesRe"
    "sponseMessage\022#\n\014RequestToken\030\206\230\313\277\001 \001(\0132"
    "\t.bcl.Guid\022\025\n\tSeriesUid\030\221\361\244\331\001 \001(\t\"T\n\024Fau"
    "ltResponseMessage\022#\n\014RequestToken\030\206\230\313\277\001 "
    "\001(\0132\t.bcl.Guid\022\027\n\013Description\030\223\230\212\373\001 \001(\t\""
    "o\n\031GetInstanceRequestMessage\022\025\n\nSeriesRo"
    "id\030\273\346\230\035 \001(\t\022\026\n\013IndexNumber\030\337\236\235\" \001(\005\022#\n\014R"
    "equestToken\030\206\230\313\277\001 \001(\0132\t.bcl.Guid\"\177\n\032GetI"
    "nstanceResponseMessage\022\030\n\rDicomInstance\030"
    "\247\354\347j \001(\014\022#\n\014RequestToken\030\206\230\313\277\001 \001(\0132\t.bcl"
    ".Guid\022\"\n\026TotalNumberOfInstances\030\340\321\376\355\001 \001("
    "\005\"K\n\022LicenseInformation\022!\n\025ValidLicenseA"
    "vailable\030\204\271\201\310\001 \001(\010\022\022\n\006Option\030\336\322\271\373\001 \001(\t\"\231"
    "\001\n\030LogEntriesRequestMessage\022#\n\014RequestTo"
    "ken\030\206\230\313\277\001 \001(\0132\t.bcl.Guid\022X\n\021EntriesToBeL"
    "ogged\030\352\364\240\373\001 \003(\01329.Philips.Pmsmr.CoreServ"
    "ices.IPluginInfraServices.LogEntry\"@\n\031Lo"
    "gEntriesResponseMessage\022#\n\014RequestToken\030"
    "\206\230\313\277\001 \001(\0132\t.bcl.Guid\"\225\002\n\010LogEntry\022\024\n\014Ori"
    "ginatorId\030\001 \001(\005\022\017\n\007EventId\030\002 \001(\t\022\021\n\tTime"
    "Stamp\030\003 \001(\003\022\023\n\013Description\030\004 \001(\t\022\026\n\016Addi"
    "tionalInfo\030\005 \001(\t\022V\n\010Severity\030\006 \001(\0162D.Phi"
    "lips.Pmsmr.CoreServices.IPluginInfraServ"
    "ices.LoggingSeverityType\022J\n\004Type\030\007 \001(\0162<"
    ".Philips.Pmsmr.CoreServices.IPluginInfra"
    "Services.LoggingType\"F\n\025PatientIdentific"
    "ation\022\024\n\tPatientId\030\250\376\262/ \001(\t\022\027\n\013PatientNa"
    "me\030\272\237\376\252\001 \001(\t\"V\n\033QueryLicensesRequestMess"
    "age\022\022\n\007Options\030\246\240\335* \003(\t\022#\n\014RequestToken\030"
    "\206\230\313\277\001 \001(\0132\t.bcl.Guid\"\236\001\n\034QueryLicensesRe"
    "sponseMessage\022#\n\014RequestToken\030\206\230\313\277\001 \001(\0132"
    "\t.bcl.Guid\022Y\n\010Licenses\030\371\300\354\371\001 \003(\0132C.Phili"
    "ps.Pmsmr.CoreServices.IPluginInfraServic"
    "es.LicenseInformation\"A\n\032QueryVersionReq"
    "uestMessage\022#\n\014RequestToken\030\206\230\313\277\001 \001(\0132\t."
    "bcl.Guid\"\211\001\n\033QueryVersionResponseMessage"
    "\022\030\n\014ProductModel\030\242\372\201\255\001 \001(\t\022#\n\014RequestTok"
    "en\030\206\230\313\277\001 \001(\0132\t.bcl.Guid\022\023\n\007Version\030\234\217\346\324\001"
    " \001(\t\022\026\n\nSystemType\030\317\332\220\370\001 \001(\t\"t\n\033StoreIns"
    "tanceRequestMessage\022\026\n\013IndexNumber\030\337\236\235\" "
    "\001(\005\022\030\n\rDicomInstance\030\247\354\347j \001(\014\022#\n\014Request"
    "Token\030\206\230\313\277\001 \001(\0132\t.bcl.Guid\"C\n\034StoreInsta"
    "nceResponseMessage\022#\n\014RequestToken\030\206\230\313\277\001"
    " \001(\0132\t.bcl.Guid*\255\005\n\tMessageId\022\026\n\017AuditLo"
    "gEntryId\020\334\322\325@\022$\n\035AuditLogEntryRequestMes"
    "sageId\020\330\305\327$\022%\n\036AuditLogEntryResponseMess"
    "ageId\020\221\370\330|\022&\n\037CreateNewSeriesRequestMess"
    "ageId\020\310\207\367}\022\'\n CreateNewSeriesResponseMes"
    "sageId\020\242\352\247\007\022\035\n\026FaultResponseMessageId\020\322\326"
    "\211\020\022#\n\033GetInstanceRequestMessageId\020\324\364\251\211\001\022"
    "$\n\034GetInstanceResponseMessageId\020\305\264\257\245\001\022\034\n"
    "\024LicenseInformationId\020\236\276\320\212\001\022!\n\032LogEntrie"
    "sRequestMessageId\020\242\347\225\?\022#\n\033LogEntriesResp"
    "onseMessageId\020\373\335\247\317\001\022\022\n\nLogEntryId\020\324\273\377\364\001\022"
    "\037\n\027PatientIdentificationId\020\242\345\313\232\001\022%\n\035Quer"
    "yLicensesRequestMessageId\020\201\226\361\242\001\022%\n\036Query"
    "LicensesResponseMessageId\020\307\367\340Q\022$\n\034QueryV"
    "ersionRequestMessageId\020\231\246\341\331\001\022$\n\035QueryVer"
    "sionResponseMessageId\020\273\273\230\001\022$\n\035StoreInsta"
    "nceRequestMessageId\020\251\304\240k\022%\n\036StoreInstanc"
    "eResponseMessageId\020\315\211\244\030*\300\001\n\024AuditTrailAc"
    "tionType\022&\n\"UnknownLoggingAuditTrailActi"
    "onType\020\000\022\036\n\032AuditTrailActionTypeModify\020\030"
    "\022\036\n\032AuditTrailActionTypeAccess\020\?\022\037\n\032Audi"
    "tTrailActionTypeCreate\020\224\004\022\037\n\032AuditTrailA"
    "ctionTypeDelete\020\314\006*\270\001\n\023LoggingSeverityTy"
    "pe\022\036\n\032UnknownLoggingSeverityType\020\000\022\"\n\036Lo"
    "ggingSeverityTypeInformation\020\001\022\036\n\032Loggin"
    "gSeverityTypeWarning\020\002\022\035\n\030LoggingSeverit"
    "yTypeError\020\356\004\022\036\n\030LoggingSeverityTypeFata"
    "l\020\332\215\002*\213\001\n\013LoggingType\022\026\n\022UnknownLoggingT"
    "ype\020\000\022\032\n\026LoggingTypeDevelopment\020\001\022\024\n\020Log"
    "gingTypeTrace\020\002\022\032\n\026LoggingTypeUtilizatio"
    "n\020\030\022\026\n\022LoggingTypeService\020 ", 3787);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Philips.Pmsmr.CoreServices.IPluginInfraServices.proto", &protobuf_RegisterTypes);
  AuditLogEntry::default_instance_ = new AuditLogEntry();
  AuditLogEntryRequestMessage::default_instance_ = new AuditLogEntryRequestMessage();
  AuditLogEntryResponseMessage::default_instance_ = new AuditLogEntryResponseMessage();
  CreateNewSeriesRequestMessage::default_instance_ = new CreateNewSeriesRequestMessage();
  CreateNewSeriesResponseMessage::default_instance_ = new CreateNewSeriesResponseMessage();
  FaultResponseMessage::default_instance_ = new FaultResponseMessage();
  GetInstanceRequestMessage::default_instance_ = new GetInstanceRequestMessage();
  GetInstanceResponseMessage::default_instance_ = new GetInstanceResponseMessage();
  LicenseInformation::default_instance_ = new LicenseInformation();
  LogEntriesRequestMessage::default_instance_ = new LogEntriesRequestMessage();
  LogEntriesResponseMessage::default_instance_ = new LogEntriesResponseMessage();
  LogEntry::default_instance_ = new LogEntry();
  PatientIdentification::default_instance_ = new PatientIdentification();
  QueryLicensesRequestMessage::default_instance_ = new QueryLicensesRequestMessage();
  QueryLicensesResponseMessage::default_instance_ = new QueryLicensesResponseMessage();
  QueryVersionRequestMessage::default_instance_ = new QueryVersionRequestMessage();
  QueryVersionResponseMessage::default_instance_ = new QueryVersionResponseMessage();
  StoreInstanceRequestMessage::default_instance_ = new StoreInstanceRequestMessage();
  StoreInstanceResponseMessage::default_instance_ = new StoreInstanceResponseMessage();
  AuditLogEntry::default_instance_->InitAsDefaultInstance();
  AuditLogEntryRequestMessage::default_instance_->InitAsDefaultInstance();
  AuditLogEntryResponseMessage::default_instance_->InitAsDefaultInstance();
  CreateNewSeriesRequestMessage::default_instance_->InitAsDefaultInstance();
  CreateNewSeriesResponseMessage::default_instance_->InitAsDefaultInstance();
  FaultResponseMessage::default_instance_->InitAsDefaultInstance();
  GetInstanceRequestMessage::default_instance_->InitAsDefaultInstance();
  GetInstanceResponseMessage::default_instance_->InitAsDefaultInstance();
  LicenseInformation::default_instance_->InitAsDefaultInstance();
  LogEntriesRequestMessage::default_instance_->InitAsDefaultInstance();
  LogEntriesResponseMessage::default_instance_->InitAsDefaultInstance();
  LogEntry::default_instance_->InitAsDefaultInstance();
  PatientIdentification::default_instance_->InitAsDefaultInstance();
  QueryLicensesRequestMessage::default_instance_->InitAsDefaultInstance();
  QueryLicensesResponseMessage::default_instance_->InitAsDefaultInstance();
  QueryVersionRequestMessage::default_instance_->InitAsDefaultInstance();
  QueryVersionResponseMessage::default_instance_->InitAsDefaultInstance();
  StoreInstanceRequestMessage::default_instance_->InitAsDefaultInstance();
  StoreInstanceResponseMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto {
  StaticDescriptorInitializer_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto() {
    protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  }
} static_descriptor_initializer_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageId_descriptor_;
}
bool MessageId_IsValid(int value) {
  switch(value) {
    case 2497979:
    case 15332642:
    case 33712978:
    case 50922701:
    case 76931800:
    case 132477858:
    case 135620956:
    case 171457479:
    case 224928297:
    case 261504017:
    case 264094664:
    case 287996500:
    case 290725662:
    case 324203170:
    case 341592833:
    case 346806853:
    case 434761467:
    case 456676121:
    case 513793492:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AuditTrailActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuditTrailActionType_descriptor_;
}
bool AuditTrailActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 24:
    case 63:
    case 532:
    case 844:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LoggingSeverityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoggingSeverityType_descriptor_;
}
bool LoggingSeverityType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 622:
    case 34522:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LoggingType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoggingType_descriptor_;
}
bool LoggingType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 24:
    case 32:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AuditLogEntry::kLocalUserFieldNumber;
const int AuditLogEntry::kMediaIdFieldNumber;
const int AuditLogEntry::kCuidFieldNumber;
const int AuditLogEntry::kObjectActionFieldNumber;
const int AuditLogEntry::kMediaTypeFieldNumber;
const int AuditLogEntry::kPatientFieldNumber;
const int AuditLogEntry::kIpAddressFieldNumber;
const int AuditLogEntry::kApplicationEntityTitleFieldNumber;
const int AuditLogEntry::kSuidFieldNumber;
const int AuditLogEntry::kInstancesSentFieldNumber;
#endif  // !_MSC_VER

AuditLogEntry::AuditLogEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuditLogEntry::InitAsDefaultInstance() {
  patient_ = const_cast< ::Philips::Pmsmr::CoreServices::IPluginInfraServices::PatientIdentification*>(&::Philips::Pmsmr::CoreServices::IPluginInfraServices::PatientIdentification::default_instance());
}

AuditLogEntry::AuditLogEntry(const AuditLogEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuditLogEntry::SharedCtor() {
  _cached_size_ = 0;
  localuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mediaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  objectaction_ = 0;
  mediatype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patient_ = NULL;
  ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  applicationentitytitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instancessent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuditLogEntry::~AuditLogEntry() {
  SharedDtor();
}

void AuditLogEntry::SharedDtor() {
  if (localuser_ != &::google::protobuf::internal::kEmptyString) {
    delete localuser_;
  }
  if (mediaid_ != &::google::protobuf::internal::kEmptyString) {
    delete mediaid_;
  }
  if (cuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cuid_;
  }
  if (mediatype_ != &::google::protobuf::internal::kEmptyString) {
    delete mediatype_;
  }
  if (ipaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete ipaddress_;
  }
  if (applicationentitytitle_ != &::google::protobuf::internal::kEmptyString) {
    delete applicationentitytitle_;
  }
  if (suid_ != &::google::protobuf::internal::kEmptyString) {
    delete suid_;
  }
  if (this != default_instance_) {
    delete patient_;
  }
}

void AuditLogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuditLogEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuditLogEntry_descriptor_;
}

const AuditLogEntry& AuditLogEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  return *default_instance_;
}

AuditLogEntry* AuditLogEntry::default_instance_ = NULL;

AuditLogEntry* AuditLogEntry::New() const {
  return new AuditLogEntry;
}

void AuditLogEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_localuser()) {
      if (localuser_ != &::google::protobuf::internal::kEmptyString) {
        localuser_->clear();
      }
    }
    if (has_mediaid()) {
      if (mediaid_ != &::google::protobuf::internal::kEmptyString) {
        mediaid_->clear();
      }
    }
    if (has_cuid()) {
      if (cuid_ != &::google::protobuf::internal::kEmptyString) {
        cuid_->clear();
      }
    }
    objectaction_ = 0;
    if (has_mediatype()) {
      if (mediatype_ != &::google::protobuf::internal::kEmptyString) {
        mediatype_->clear();
      }
    }
    if (has_patient()) {
      if (patient_ != NULL) patient_->::Philips::Pmsmr::CoreServices::IPluginInfraServices::PatientIdentification::Clear();
    }
    if (has_ipaddress()) {
      if (ipaddress_ != &::google::protobuf::internal::kEmptyString) {
        ipaddress_->clear();
      }
    }
    if (has_applicationentitytitle()) {
      if (applicationentitytitle_ != &::google::protobuf::internal::kEmptyString) {
        applicationentitytitle_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_suid()) {
      if (suid_ != &::google::protobuf::internal::kEmptyString) {
        suid_->clear();
      }
    }
    instancessent_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuditLogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string LocalUser = 189969938;
      case 189969938: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->localuser().data(), this->localuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1565302530)) goto parse_MediaId;
        break;
      }

      // optional string MediaId = 195662816;
      case 195662816: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MediaId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mediaid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mediaid().data(), this->mediaid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1927745538)) goto parse_Cuid;
        break;
      }

      // optional string Cuid = 240968192;
      case 240968192: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Cuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cuid().data(), this->cuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2551786336)) goto parse_ObjectAction;
        break;
      }

      // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.AuditTrailActionType ObjectAction = 318973292;
      case 318973292: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObjectAction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Philips::Pmsmr::CoreServices::IPluginInfraServices::AuditTrailActionType_IsValid(value)) {
            set_objectaction(static_cast< ::Philips::Pmsmr::CoreServices::IPluginInfraServices::AuditTrailActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(318973292, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2619480346)) goto parse_MediaType;
        break;
      }

      // optional string MediaType = 327435043;
      case 327435043: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MediaType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mediatype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mediatype().data(), this->mediatype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2869724690)) goto parse_Patient;
        break;
      }

      // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.PatientIdentification Patient = 358715586;
      case 358715586: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Patient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_patient()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3041875106)) goto parse_IpAddress;
        break;
      }

      // optional string IpAddress = 380234388;
      case 380234388: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IpAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipaddress().data(), this->ipaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3378757506)) goto parse_ApplicationEntityTitle;
        break;
      }

      // optional string ApplicationEntityTitle = 422344688;
      case 422344688: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ApplicationEntityTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applicationentitytitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->applicationentitytitle().data(), this->applicationentitytitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3572569610)) goto parse_Suid;
        break;
      }

      // optional string Suid = 446571201;
      case 446571201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Suid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suid().data(), this->suid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3651618424)) goto parse_InstancesSent;
        break;
      }

      // optional int32 InstancesSent = 456452303;
      case 456452303: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InstancesSent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instancessent_)));
          set_has_instancessent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuditLogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string LocalUser = 189969938;
  if (has_localuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->localuser().data(), this->localuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      189969938, this->localuser(), output);
  }

  // optional string MediaId = 195662816;
  if (has_mediaid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mediaid().data(), this->mediaid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      195662816, this->mediaid(), output);
  }

  // optional string Cuid = 240968192;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      240968192, this->cuid(), output);
  }

  // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.AuditTrailActionType ObjectAction = 318973292;
  if (has_objectaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      318973292, this->objectaction(), output);
  }

  // optional string MediaType = 327435043;
  if (has_mediatype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mediatype().data(), this->mediatype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      327435043, this->mediatype(), output);
  }

  // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.PatientIdentification Patient = 358715586;
  if (has_patient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      358715586, this->patient(), output);
  }

  // optional string IpAddress = 380234388;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      380234388, this->ipaddress(), output);
  }

  // optional string ApplicationEntityTitle = 422344688;
  if (has_applicationentitytitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicationentitytitle().data(), this->applicationentitytitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      422344688, this->applicationentitytitle(), output);
  }

  // optional string Suid = 446571201;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suid().data(), this->suid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      446571201, this->suid(), output);
  }

  // optional int32 InstancesSent = 456452303;
  if (has_instancessent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(456452303, this->instancessent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuditLogEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string LocalUser = 189969938;
  if (has_localuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->localuser().data(), this->localuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        189969938, this->localuser(), target);
  }

  // optional string MediaId = 195662816;
  if (has_mediaid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mediaid().data(), this->mediaid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        195662816, this->mediaid(), target);
  }

  // optional string Cuid = 240968192;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        240968192, this->cuid(), target);
  }

  // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.AuditTrailActionType ObjectAction = 318973292;
  if (has_objectaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      318973292, this->objectaction(), target);
  }

  // optional string MediaType = 327435043;
  if (has_mediatype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mediatype().data(), this->mediatype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        327435043, this->mediatype(), target);
  }

  // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.PatientIdentification Patient = 358715586;
  if (has_patient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        358715586, this->patient(), target);
  }

  // optional string IpAddress = 380234388;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        380234388, this->ipaddress(), target);
  }

  // optional string ApplicationEntityTitle = 422344688;
  if (has_applicationentitytitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicationentitytitle().data(), this->applicationentitytitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        422344688, this->applicationentitytitle(), target);
  }

  // optional string Suid = 446571201;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suid().data(), this->suid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        446571201, this->suid(), target);
  }

  // optional int32 InstancesSent = 456452303;
  if (has_instancessent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(456452303, this->instancessent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuditLogEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string LocalUser = 189969938;
    if (has_localuser()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localuser());
    }

    // optional string MediaId = 195662816;
    if (has_mediaid()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mediaid());
    }

    // optional string Cuid = 240968192;
    if (has_cuid()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cuid());
    }

    // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.AuditTrailActionType ObjectAction = 318973292;
    if (has_objectaction()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->objectaction());
    }

    // optional string MediaType = 327435043;
    if (has_mediatype()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mediatype());
    }

    // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.PatientIdentification Patient = 358715586;
    if (has_patient()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->patient());
    }

    // optional string IpAddress = 380234388;
    if (has_ipaddress()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipaddress());
    }

    // optional string ApplicationEntityTitle = 422344688;
    if (has_applicationentitytitle()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applicationentitytitle());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string Suid = 446571201;
    if (has_suid()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suid());
    }

    // optional int32 InstancesSent = 456452303;
    if (has_instancessent()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instancessent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuditLogEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuditLogEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuditLogEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuditLogEntry::MergeFrom(const AuditLogEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_localuser()) {
      set_localuser(from.localuser());
    }
    if (from.has_mediaid()) {
      set_mediaid(from.mediaid());
    }
    if (from.has_cuid()) {
      set_cuid(from.cuid());
    }
    if (from.has_objectaction()) {
      set_objectaction(from.objectaction());
    }
    if (from.has_mediatype()) {
      set_mediatype(from.mediatype());
    }
    if (from.has_patient()) {
      mutable_patient()->::Philips::Pmsmr::CoreServices::IPluginInfraServices::PatientIdentification::MergeFrom(from.patient());
    }
    if (from.has_ipaddress()) {
      set_ipaddress(from.ipaddress());
    }
    if (from.has_applicationentitytitle()) {
      set_applicationentitytitle(from.applicationentitytitle());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_suid()) {
      set_suid(from.suid());
    }
    if (from.has_instancessent()) {
      set_instancessent(from.instancessent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuditLogEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuditLogEntry::CopyFrom(const AuditLogEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuditLogEntry::IsInitialized() const {

  return true;
}

void AuditLogEntry::Swap(AuditLogEntry* other) {
  if (other != this) {
    std::swap(localuser_, other->localuser_);
    std::swap(mediaid_, other->mediaid_);
    std::swap(cuid_, other->cuid_);
    std::swap(objectaction_, other->objectaction_);
    std::swap(mediatype_, other->mediatype_);
    std::swap(patient_, other->patient_);
    std::swap(ipaddress_, other->ipaddress_);
    std::swap(applicationentitytitle_, other->applicationentitytitle_);
    std::swap(suid_, other->suid_);
    std::swap(instancessent_, other->instancessent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuditLogEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuditLogEntry_descriptor_;
  metadata.reflection = AuditLogEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuditLogEntryRequestMessage::kAuditLogFieldNumber;
const int AuditLogEntryRequestMessage::kRequestTokenFieldNumber;
#endif  // !_MSC_VER

AuditLogEntryRequestMessage::AuditLogEntryRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuditLogEntryRequestMessage::InitAsDefaultInstance() {
  auditlog_ = const_cast< ::Philips::Pmsmr::CoreServices::IPluginInfraServices::AuditLogEntry*>(&::Philips::Pmsmr::CoreServices::IPluginInfraServices::AuditLogEntry::default_instance());
  requesttoken_ = const_cast< ::bcl::Guid*>(&::bcl::Guid::default_instance());
}

AuditLogEntryRequestMessage::AuditLogEntryRequestMessage(const AuditLogEntryRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuditLogEntryRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  auditlog_ = NULL;
  requesttoken_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuditLogEntryRequestMessage::~AuditLogEntryRequestMessage() {
  SharedDtor();
}

void AuditLogEntryRequestMessage::SharedDtor() {
  if (this != default_instance_) {
    delete auditlog_;
    delete requesttoken_;
  }
}

void AuditLogEntryRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuditLogEntryRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuditLogEntryRequestMessage_descriptor_;
}

const AuditLogEntryRequestMessage& AuditLogEntryRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  return *default_instance_;
}

AuditLogEntryRequestMessage* AuditLogEntryRequestMessage::default_instance_ = NULL;

AuditLogEntryRequestMessage* AuditLogEntryRequestMessage::New() const {
  return new AuditLogEntryRequestMessage;
}

void AuditLogEntryRequestMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_auditlog()) {
      if (auditlog_ != NULL) auditlog_->::Philips::Pmsmr::CoreServices::IPluginInfraServices::AuditLogEntry::Clear();
    }
    if (has_requesttoken()) {
      if (requesttoken_ != NULL) requesttoken_->::bcl::Guid::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuditLogEntryRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.AuditLogEntry AuditLog = 171435145;
      case 171435145: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auditlog()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3214303282)) goto parse_RequestToken;
        break;
      }

      // optional .bcl.Guid RequestToken = 401787910;
      case 401787910: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RequestToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requesttoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuditLogEntryRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.AuditLogEntry AuditLog = 171435145;
  if (has_auditlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      171435145, this->auditlog(), output);
  }

  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      401787910, this->requesttoken(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuditLogEntryRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.AuditLogEntry AuditLog = 171435145;
  if (has_auditlog()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        171435145, this->auditlog(), target);
  }

  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        401787910, this->requesttoken(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuditLogEntryRequestMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.AuditLogEntry AuditLog = 171435145;
    if (has_auditlog()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auditlog());
    }

    // optional .bcl.Guid RequestToken = 401787910;
    if (has_requesttoken()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requesttoken());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuditLogEntryRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuditLogEntryRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuditLogEntryRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuditLogEntryRequestMessage::MergeFrom(const AuditLogEntryRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auditlog()) {
      mutable_auditlog()->::Philips::Pmsmr::CoreServices::IPluginInfraServices::AuditLogEntry::MergeFrom(from.auditlog());
    }
    if (from.has_requesttoken()) {
      mutable_requesttoken()->::bcl::Guid::MergeFrom(from.requesttoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuditLogEntryRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuditLogEntryRequestMessage::CopyFrom(const AuditLogEntryRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuditLogEntryRequestMessage::IsInitialized() const {

  return true;
}

void AuditLogEntryRequestMessage::Swap(AuditLogEntryRequestMessage* other) {
  if (other != this) {
    std::swap(auditlog_, other->auditlog_);
    std::swap(requesttoken_, other->requesttoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuditLogEntryRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuditLogEntryRequestMessage_descriptor_;
  metadata.reflection = AuditLogEntryRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuditLogEntryResponseMessage::kRequestTokenFieldNumber;
#endif  // !_MSC_VER

AuditLogEntryResponseMessage::AuditLogEntryResponseMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuditLogEntryResponseMessage::InitAsDefaultInstance() {
  requesttoken_ = const_cast< ::bcl::Guid*>(&::bcl::Guid::default_instance());
}

AuditLogEntryResponseMessage::AuditLogEntryResponseMessage(const AuditLogEntryResponseMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuditLogEntryResponseMessage::SharedCtor() {
  _cached_size_ = 0;
  requesttoken_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuditLogEntryResponseMessage::~AuditLogEntryResponseMessage() {
  SharedDtor();
}

void AuditLogEntryResponseMessage::SharedDtor() {
  if (this != default_instance_) {
    delete requesttoken_;
  }
}

void AuditLogEntryResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuditLogEntryResponseMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuditLogEntryResponseMessage_descriptor_;
}

const AuditLogEntryResponseMessage& AuditLogEntryResponseMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  return *default_instance_;
}

AuditLogEntryResponseMessage* AuditLogEntryResponseMessage::default_instance_ = NULL;

AuditLogEntryResponseMessage* AuditLogEntryResponseMessage::New() const {
  return new AuditLogEntryResponseMessage;
}

void AuditLogEntryResponseMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_requesttoken()) {
      if (requesttoken_ != NULL) requesttoken_->::bcl::Guid::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuditLogEntryResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bcl.Guid RequestToken = 401787910;
      case 401787910: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requesttoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuditLogEntryResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      401787910, this->requesttoken(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuditLogEntryResponseMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        401787910, this->requesttoken(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuditLogEntryResponseMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bcl.Guid RequestToken = 401787910;
    if (has_requesttoken()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requesttoken());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuditLogEntryResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuditLogEntryResponseMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuditLogEntryResponseMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuditLogEntryResponseMessage::MergeFrom(const AuditLogEntryResponseMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttoken()) {
      mutable_requesttoken()->::bcl::Guid::MergeFrom(from.requesttoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuditLogEntryResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuditLogEntryResponseMessage::CopyFrom(const AuditLogEntryResponseMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuditLogEntryResponseMessage::IsInitialized() const {

  return true;
}

void AuditLogEntryResponseMessage::Swap(AuditLogEntryResponseMessage* other) {
  if (other != this) {
    std::swap(requesttoken_, other->requesttoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuditLogEntryResponseMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuditLogEntryResponseMessage_descriptor_;
  metadata.reflection = AuditLogEntryResponseMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateNewSeriesRequestMessage::kStudyUidFieldNumber;
const int CreateNewSeriesRequestMessage::kRequestTokenFieldNumber;
const int CreateNewSeriesRequestMessage::kTotalNumberOfInstancesFieldNumber;
#endif  // !_MSC_VER

CreateNewSeriesRequestMessage::CreateNewSeriesRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateNewSeriesRequestMessage::InitAsDefaultInstance() {
  requesttoken_ = const_cast< ::bcl::Guid*>(&::bcl::Guid::default_instance());
}

CreateNewSeriesRequestMessage::CreateNewSeriesRequestMessage(const CreateNewSeriesRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateNewSeriesRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  studyuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requesttoken_ = NULL;
  totalnumberofinstances_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateNewSeriesRequestMessage::~CreateNewSeriesRequestMessage() {
  SharedDtor();
}

void CreateNewSeriesRequestMessage::SharedDtor() {
  if (studyuid_ != &::google::protobuf::internal::kEmptyString) {
    delete studyuid_;
  }
  if (this != default_instance_) {
    delete requesttoken_;
  }
}

void CreateNewSeriesRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateNewSeriesRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateNewSeriesRequestMessage_descriptor_;
}

const CreateNewSeriesRequestMessage& CreateNewSeriesRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  return *default_instance_;
}

CreateNewSeriesRequestMessage* CreateNewSeriesRequestMessage::default_instance_ = NULL;

CreateNewSeriesRequestMessage* CreateNewSeriesRequestMessage::New() const {
  return new CreateNewSeriesRequestMessage;
}

void CreateNewSeriesRequestMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_studyuid()) {
      if (studyuid_ != &::google::protobuf::internal::kEmptyString) {
        studyuid_->clear();
      }
    }
    if (has_requesttoken()) {
      if (requesttoken_ != NULL) requesttoken_->::bcl::Guid::Clear();
    }
    totalnumberofinstances_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateNewSeriesRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string StudyUid = 32159375;
      case 32159375: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_studyuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->studyuid().data(), this->studyuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3214303282)) goto parse_RequestToken;
        break;
      }

      // optional .bcl.Guid RequestToken = 401787910;
      case 401787910: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RequestToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requesttoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3992798976)) goto parse_TotalNumberOfInstances;
        break;
      }

      // optional int32 TotalNumberOfInstances = 499099872;
      case 499099872: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalNumberOfInstances:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumberofinstances_)));
          set_has_totalnumberofinstances();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateNewSeriesRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string StudyUid = 32159375;
  if (has_studyuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->studyuid().data(), this->studyuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32159375, this->studyuid(), output);
  }

  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      401787910, this->requesttoken(), output);
  }

  // optional int32 TotalNumberOfInstances = 499099872;
  if (has_totalnumberofinstances()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(499099872, this->totalnumberofinstances(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateNewSeriesRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string StudyUid = 32159375;
  if (has_studyuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->studyuid().data(), this->studyuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32159375, this->studyuid(), target);
  }

  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        401787910, this->requesttoken(), target);
  }

  // optional int32 TotalNumberOfInstances = 499099872;
  if (has_totalnumberofinstances()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(499099872, this->totalnumberofinstances(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateNewSeriesRequestMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string StudyUid = 32159375;
    if (has_studyuid()) {
      total_size += 4 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->studyuid());
    }

    // optional .bcl.Guid RequestToken = 401787910;
    if (has_requesttoken()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requesttoken());
    }

    // optional int32 TotalNumberOfInstances = 499099872;
    if (has_totalnumberofinstances()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnumberofinstances());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateNewSeriesRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateNewSeriesRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateNewSeriesRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateNewSeriesRequestMessage::MergeFrom(const CreateNewSeriesRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_studyuid()) {
      set_studyuid(from.studyuid());
    }
    if (from.has_requesttoken()) {
      mutable_requesttoken()->::bcl::Guid::MergeFrom(from.requesttoken());
    }
    if (from.has_totalnumberofinstances()) {
      set_totalnumberofinstances(from.totalnumberofinstances());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateNewSeriesRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateNewSeriesRequestMessage::CopyFrom(const CreateNewSeriesRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateNewSeriesRequestMessage::IsInitialized() const {

  return true;
}

void CreateNewSeriesRequestMessage::Swap(CreateNewSeriesRequestMessage* other) {
  if (other != this) {
    std::swap(studyuid_, other->studyuid_);
    std::swap(requesttoken_, other->requesttoken_);
    std::swap(totalnumberofinstances_, other->totalnumberofinstances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateNewSeriesRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateNewSeriesRequestMessage_descriptor_;
  metadata.reflection = CreateNewSeriesRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateNewSeriesResponseMessage::kRequestTokenFieldNumber;
const int CreateNewSeriesResponseMessage::kSeriesUidFieldNumber;
#endif  // !_MSC_VER

CreateNewSeriesResponseMessage::CreateNewSeriesResponseMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateNewSeriesResponseMessage::InitAsDefaultInstance() {
  requesttoken_ = const_cast< ::bcl::Guid*>(&::bcl::Guid::default_instance());
}

CreateNewSeriesResponseMessage::CreateNewSeriesResponseMessage(const CreateNewSeriesResponseMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateNewSeriesResponseMessage::SharedCtor() {
  _cached_size_ = 0;
  requesttoken_ = NULL;
  seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateNewSeriesResponseMessage::~CreateNewSeriesResponseMessage() {
  SharedDtor();
}

void CreateNewSeriesResponseMessage::SharedDtor() {
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesuid_;
  }
  if (this != default_instance_) {
    delete requesttoken_;
  }
}

void CreateNewSeriesResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateNewSeriesResponseMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateNewSeriesResponseMessage_descriptor_;
}

const CreateNewSeriesResponseMessage& CreateNewSeriesResponseMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  return *default_instance_;
}

CreateNewSeriesResponseMessage* CreateNewSeriesResponseMessage::default_instance_ = NULL;

CreateNewSeriesResponseMessage* CreateNewSeriesResponseMessage::New() const {
  return new CreateNewSeriesResponseMessage;
}

void CreateNewSeriesResponseMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_requesttoken()) {
      if (requesttoken_ != NULL) requesttoken_->::bcl::Guid::Clear();
    }
    if (has_seriesuid()) {
      if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
        seriesuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateNewSeriesResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bcl.Guid RequestToken = 401787910;
      case 401787910: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requesttoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3645490314)) goto parse_SeriesUid;
        break;
      }

      // optional string SeriesUid = 455686289;
      case 455686289: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SeriesUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesuid().data(), this->seriesuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateNewSeriesResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      401787910, this->requesttoken(), output);
  }

  // optional string SeriesUid = 455686289;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      455686289, this->seriesuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateNewSeriesResponseMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        401787910, this->requesttoken(), target);
  }

  // optional string SeriesUid = 455686289;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        455686289, this->seriesuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateNewSeriesResponseMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bcl.Guid RequestToken = 401787910;
    if (has_requesttoken()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requesttoken());
    }

    // optional string SeriesUid = 455686289;
    if (has_seriesuid()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateNewSeriesResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateNewSeriesResponseMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateNewSeriesResponseMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateNewSeriesResponseMessage::MergeFrom(const CreateNewSeriesResponseMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttoken()) {
      mutable_requesttoken()->::bcl::Guid::MergeFrom(from.requesttoken());
    }
    if (from.has_seriesuid()) {
      set_seriesuid(from.seriesuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateNewSeriesResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateNewSeriesResponseMessage::CopyFrom(const CreateNewSeriesResponseMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateNewSeriesResponseMessage::IsInitialized() const {

  return true;
}

void CreateNewSeriesResponseMessage::Swap(CreateNewSeriesResponseMessage* other) {
  if (other != this) {
    std::swap(requesttoken_, other->requesttoken_);
    std::swap(seriesuid_, other->seriesuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateNewSeriesResponseMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateNewSeriesResponseMessage_descriptor_;
  metadata.reflection = CreateNewSeriesResponseMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FaultResponseMessage::kRequestTokenFieldNumber;
const int FaultResponseMessage::kDescriptionFieldNumber;
#endif  // !_MSC_VER

FaultResponseMessage::FaultResponseMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FaultResponseMessage::InitAsDefaultInstance() {
  requesttoken_ = const_cast< ::bcl::Guid*>(&::bcl::Guid::default_instance());
}

FaultResponseMessage::FaultResponseMessage(const FaultResponseMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FaultResponseMessage::SharedCtor() {
  _cached_size_ = 0;
  requesttoken_ = NULL;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaultResponseMessage::~FaultResponseMessage() {
  SharedDtor();
}

void FaultResponseMessage::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
    delete requesttoken_;
  }
}

void FaultResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaultResponseMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaultResponseMessage_descriptor_;
}

const FaultResponseMessage& FaultResponseMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  return *default_instance_;
}

FaultResponseMessage* FaultResponseMessage::default_instance_ = NULL;

FaultResponseMessage* FaultResponseMessage::New() const {
  return new FaultResponseMessage;
}

void FaultResponseMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_requesttoken()) {
      if (requesttoken_ != NULL) requesttoken_->::bcl::Guid::Clear();
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaultResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bcl.Guid RequestToken = 401787910;
      case 401787910: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requesttoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4212416666)) goto parse_Description;
        break;
      }

      // optional string Description = 526552083;
      case 526552083: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FaultResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      401787910, this->requesttoken(), output);
  }

  // optional string Description = 526552083;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      526552083, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FaultResponseMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        401787910, this->requesttoken(), target);
  }

  // optional string Description = 526552083;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        526552083, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FaultResponseMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bcl.Guid RequestToken = 401787910;
    if (has_requesttoken()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requesttoken());
    }

    // optional string Description = 526552083;
    if (has_description()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaultResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaultResponseMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaultResponseMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaultResponseMessage::MergeFrom(const FaultResponseMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttoken()) {
      mutable_requesttoken()->::bcl::Guid::MergeFrom(from.requesttoken());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaultResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaultResponseMessage::CopyFrom(const FaultResponseMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaultResponseMessage::IsInitialized() const {

  return true;
}

void FaultResponseMessage::Swap(FaultResponseMessage* other) {
  if (other != this) {
    std::swap(requesttoken_, other->requesttoken_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaultResponseMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaultResponseMessage_descriptor_;
  metadata.reflection = FaultResponseMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetInstanceRequestMessage::kSeriesRoidFieldNumber;
const int GetInstanceRequestMessage::kIndexNumberFieldNumber;
const int GetInstanceRequestMessage::kRequestTokenFieldNumber;
#endif  // !_MSC_VER

GetInstanceRequestMessage::GetInstanceRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInstanceRequestMessage::InitAsDefaultInstance() {
  requesttoken_ = const_cast< ::bcl::Guid*>(&::bcl::Guid::default_instance());
}

GetInstanceRequestMessage::GetInstanceRequestMessage(const GetInstanceRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInstanceRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  seriesroid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  indexnumber_ = 0;
  requesttoken_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInstanceRequestMessage::~GetInstanceRequestMessage() {
  SharedDtor();
}

void GetInstanceRequestMessage::SharedDtor() {
  if (seriesroid_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesroid_;
  }
  if (this != default_instance_) {
    delete requesttoken_;
  }
}

void GetInstanceRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInstanceRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInstanceRequestMessage_descriptor_;
}

const GetInstanceRequestMessage& GetInstanceRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  return *default_instance_;
}

GetInstanceRequestMessage* GetInstanceRequestMessage::default_instance_ = NULL;

GetInstanceRequestMessage* GetInstanceRequestMessage::New() const {
  return new GetInstanceRequestMessage;
}

void GetInstanceRequestMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_seriesroid()) {
      if (seriesroid_ != &::google::protobuf::internal::kEmptyString) {
        seriesroid_->clear();
      }
    }
    indexnumber_ = 0;
    if (has_requesttoken()) {
      if (requesttoken_ != NULL) requesttoken_->::bcl::Guid::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInstanceRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string SeriesRoid = 61223739;
      case 61223739: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesroid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesroid().data(), this->seriesroid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(574257912)) goto parse_IndexNumber;
        break;
      }

      // optional int32 IndexNumber = 71782239;
      case 71782239: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IndexNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &indexnumber_)));
          set_has_indexnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3214303282)) goto parse_RequestToken;
        break;
      }

      // optional .bcl.Guid RequestToken = 401787910;
      case 401787910: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RequestToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requesttoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetInstanceRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string SeriesRoid = 61223739;
  if (has_seriesroid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesroid().data(), this->seriesroid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      61223739, this->seriesroid(), output);
  }

  // optional int32 IndexNumber = 71782239;
  if (has_indexnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71782239, this->indexnumber(), output);
  }

  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      401787910, this->requesttoken(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInstanceRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string SeriesRoid = 61223739;
  if (has_seriesroid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesroid().data(), this->seriesroid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        61223739, this->seriesroid(), target);
  }

  // optional int32 IndexNumber = 71782239;
  if (has_indexnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71782239, this->indexnumber(), target);
  }

  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        401787910, this->requesttoken(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInstanceRequestMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SeriesRoid = 61223739;
    if (has_seriesroid()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesroid());
    }

    // optional int32 IndexNumber = 71782239;
    if (has_indexnumber()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->indexnumber());
    }

    // optional .bcl.Guid RequestToken = 401787910;
    if (has_requesttoken()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requesttoken());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInstanceRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInstanceRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInstanceRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInstanceRequestMessage::MergeFrom(const GetInstanceRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seriesroid()) {
      set_seriesroid(from.seriesroid());
    }
    if (from.has_indexnumber()) {
      set_indexnumber(from.indexnumber());
    }
    if (from.has_requesttoken()) {
      mutable_requesttoken()->::bcl::Guid::MergeFrom(from.requesttoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInstanceRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstanceRequestMessage::CopyFrom(const GetInstanceRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstanceRequestMessage::IsInitialized() const {

  return true;
}

void GetInstanceRequestMessage::Swap(GetInstanceRequestMessage* other) {
  if (other != this) {
    std::swap(seriesroid_, other->seriesroid_);
    std::swap(indexnumber_, other->indexnumber_);
    std::swap(requesttoken_, other->requesttoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInstanceRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInstanceRequestMessage_descriptor_;
  metadata.reflection = GetInstanceRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetInstanceResponseMessage::kDicomInstanceFieldNumber;
const int GetInstanceResponseMessage::kRequestTokenFieldNumber;
const int GetInstanceResponseMessage::kTotalNumberOfInstancesFieldNumber;
#endif  // !_MSC_VER

GetInstanceResponseMessage::GetInstanceResponseMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInstanceResponseMessage::InitAsDefaultInstance() {
  requesttoken_ = const_cast< ::bcl::Guid*>(&::bcl::Guid::default_instance());
}

GetInstanceResponseMessage::GetInstanceResponseMessage(const GetInstanceResponseMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInstanceResponseMessage::SharedCtor() {
  _cached_size_ = 0;
  dicominstance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requesttoken_ = NULL;
  totalnumberofinstances_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInstanceResponseMessage::~GetInstanceResponseMessage() {
  SharedDtor();
}

void GetInstanceResponseMessage::SharedDtor() {
  if (dicominstance_ != &::google::protobuf::internal::kEmptyString) {
    delete dicominstance_;
  }
  if (this != default_instance_) {
    delete requesttoken_;
  }
}

void GetInstanceResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInstanceResponseMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInstanceResponseMessage_descriptor_;
}

const GetInstanceResponseMessage& GetInstanceResponseMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  return *default_instance_;
}

GetInstanceResponseMessage* GetInstanceResponseMessage::default_instance_ = NULL;

GetInstanceResponseMessage* GetInstanceResponseMessage::New() const {
  return new GetInstanceResponseMessage;
}

void GetInstanceResponseMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dicominstance()) {
      if (dicominstance_ != &::google::protobuf::internal::kEmptyString) {
        dicominstance_->clear();
      }
    }
    if (has_requesttoken()) {
      if (requesttoken_ != NULL) requesttoken_->::bcl::Guid::Clear();
    }
    totalnumberofinstances_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInstanceResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes DicomInstance = 223999527;
      case 223999527: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dicominstance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3214303282)) goto parse_RequestToken;
        break;
      }

      // optional .bcl.Guid RequestToken = 401787910;
      case 401787910: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RequestToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requesttoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3992798976)) goto parse_TotalNumberOfInstances;
        break;
      }

      // optional int32 TotalNumberOfInstances = 499099872;
      case 499099872: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalNumberOfInstances:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumberofinstances_)));
          set_has_totalnumberofinstances();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetInstanceResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes DicomInstance = 223999527;
  if (has_dicominstance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      223999527, this->dicominstance(), output);
  }

  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      401787910, this->requesttoken(), output);
  }

  // optional int32 TotalNumberOfInstances = 499099872;
  if (has_totalnumberofinstances()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(499099872, this->totalnumberofinstances(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInstanceResponseMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes DicomInstance = 223999527;
  if (has_dicominstance()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        223999527, this->dicominstance(), target);
  }

  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        401787910, this->requesttoken(), target);
  }

  // optional int32 TotalNumberOfInstances = 499099872;
  if (has_totalnumberofinstances()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(499099872, this->totalnumberofinstances(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInstanceResponseMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes DicomInstance = 223999527;
    if (has_dicominstance()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dicominstance());
    }

    // optional .bcl.Guid RequestToken = 401787910;
    if (has_requesttoken()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requesttoken());
    }

    // optional int32 TotalNumberOfInstances = 499099872;
    if (has_totalnumberofinstances()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnumberofinstances());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInstanceResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInstanceResponseMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInstanceResponseMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInstanceResponseMessage::MergeFrom(const GetInstanceResponseMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dicominstance()) {
      set_dicominstance(from.dicominstance());
    }
    if (from.has_requesttoken()) {
      mutable_requesttoken()->::bcl::Guid::MergeFrom(from.requesttoken());
    }
    if (from.has_totalnumberofinstances()) {
      set_totalnumberofinstances(from.totalnumberofinstances());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInstanceResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstanceResponseMessage::CopyFrom(const GetInstanceResponseMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstanceResponseMessage::IsInitialized() const {

  return true;
}

void GetInstanceResponseMessage::Swap(GetInstanceResponseMessage* other) {
  if (other != this) {
    std::swap(dicominstance_, other->dicominstance_);
    std::swap(requesttoken_, other->requesttoken_);
    std::swap(totalnumberofinstances_, other->totalnumberofinstances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInstanceResponseMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInstanceResponseMessage_descriptor_;
  metadata.reflection = GetInstanceResponseMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LicenseInformation::kValidLicenseAvailableFieldNumber;
const int LicenseInformation::kOptionFieldNumber;
#endif  // !_MSC_VER

LicenseInformation::LicenseInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LicenseInformation::InitAsDefaultInstance() {
}

LicenseInformation::LicenseInformation(const LicenseInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LicenseInformation::SharedCtor() {
  _cached_size_ = 0;
  validlicenseavailable_ = false;
  option_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LicenseInformation::~LicenseInformation() {
  SharedDtor();
}

void LicenseInformation::SharedDtor() {
  if (option_ != &::google::protobuf::internal::kEmptyString) {
    delete option_;
  }
  if (this != default_instance_) {
  }
}

void LicenseInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LicenseInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LicenseInformation_descriptor_;
}

const LicenseInformation& LicenseInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  return *default_instance_;
}

LicenseInformation* LicenseInformation::default_instance_ = NULL;

LicenseInformation* LicenseInformation::New() const {
  return new LicenseInformation;
}

void LicenseInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    validlicenseavailable_ = false;
    if (has_option()) {
      if (option_ != &::google::protobuf::internal::kEmptyString) {
        option_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LicenseInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ValidLicenseAvailable = 419454084;
      case 419454084: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &validlicenseavailable_)));
          set_has_validlicenseavailable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4218637042)) goto parse_Option;
        break;
      }

      // optional string Option = 527329630;
      case 527329630: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_option()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->option().data(), this->option().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LicenseInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool ValidLicenseAvailable = 419454084;
  if (has_validlicenseavailable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(419454084, this->validlicenseavailable(), output);
  }

  // optional string Option = 527329630;
  if (has_option()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->option().data(), this->option().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      527329630, this->option(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LicenseInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool ValidLicenseAvailable = 419454084;
  if (has_validlicenseavailable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(419454084, this->validlicenseavailable(), target);
  }

  // optional string Option = 527329630;
  if (has_option()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->option().data(), this->option().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        527329630, this->option(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LicenseInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool ValidLicenseAvailable = 419454084;
    if (has_validlicenseavailable()) {
      total_size += 5 + 1;
    }

    // optional string Option = 527329630;
    if (has_option()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->option());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LicenseInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LicenseInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LicenseInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LicenseInformation::MergeFrom(const LicenseInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_validlicenseavailable()) {
      set_validlicenseavailable(from.validlicenseavailable());
    }
    if (from.has_option()) {
      set_option(from.option());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LicenseInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LicenseInformation::CopyFrom(const LicenseInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicenseInformation::IsInitialized() const {

  return true;
}

void LicenseInformation::Swap(LicenseInformation* other) {
  if (other != this) {
    std::swap(validlicenseavailable_, other->validlicenseavailable_);
    std::swap(option_, other->option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LicenseInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LicenseInformation_descriptor_;
  metadata.reflection = LicenseInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogEntriesRequestMessage::kRequestTokenFieldNumber;
const int LogEntriesRequestMessage::kEntriesToBeLoggedFieldNumber;
#endif  // !_MSC_VER

LogEntriesRequestMessage::LogEntriesRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogEntriesRequestMessage::InitAsDefaultInstance() {
  requesttoken_ = const_cast< ::bcl::Guid*>(&::bcl::Guid::default_instance());
}

LogEntriesRequestMessage::LogEntriesRequestMessage(const LogEntriesRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogEntriesRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  requesttoken_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogEntriesRequestMessage::~LogEntriesRequestMessage() {
  SharedDtor();
}

void LogEntriesRequestMessage::SharedDtor() {
  if (this != default_instance_) {
    delete requesttoken_;
  }
}

void LogEntriesRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntriesRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEntriesRequestMessage_descriptor_;
}

const LogEntriesRequestMessage& LogEntriesRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  return *default_instance_;
}

LogEntriesRequestMessage* LogEntriesRequestMessage::default_instance_ = NULL;

LogEntriesRequestMessage* LogEntriesRequestMessage::New() const {
  return new LogEntriesRequestMessage;
}

void LogEntriesRequestMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_requesttoken()) {
      if (requesttoken_ != NULL) requesttoken_->::bcl::Guid::Clear();
    }
  }
  entriestobelogged_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogEntriesRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bcl.Guid RequestToken = 401787910;
      case 401787910: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requesttoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4215395154)) goto parse_EntriesToBeLogged;
        break;
      }

      // repeated .Philips.Pmsmr.CoreServices.IPluginInfraServices.LogEntry EntriesToBeLogged = 526924394;
      case 526924394: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EntriesToBeLogged:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entriestobelogged()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4215395154)) goto parse_EntriesToBeLogged;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogEntriesRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      401787910, this->requesttoken(), output);
  }

  // repeated .Philips.Pmsmr.CoreServices.IPluginInfraServices.LogEntry EntriesToBeLogged = 526924394;
  for (int i = 0; i < this->entriestobelogged_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      526924394, this->entriestobelogged(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogEntriesRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        401787910, this->requesttoken(), target);
  }

  // repeated .Philips.Pmsmr.CoreServices.IPluginInfraServices.LogEntry EntriesToBeLogged = 526924394;
  for (int i = 0; i < this->entriestobelogged_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        526924394, this->entriestobelogged(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogEntriesRequestMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bcl.Guid RequestToken = 401787910;
    if (has_requesttoken()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requesttoken());
    }

  }
  // repeated .Philips.Pmsmr.CoreServices.IPluginInfraServices.LogEntry EntriesToBeLogged = 526924394;
  total_size += 5 * this->entriestobelogged_size();
  for (int i = 0; i < this->entriestobelogged_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entriestobelogged(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntriesRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogEntriesRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogEntriesRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogEntriesRequestMessage::MergeFrom(const LogEntriesRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  entriestobelogged_.MergeFrom(from.entriestobelogged_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttoken()) {
      mutable_requesttoken()->::bcl::Guid::MergeFrom(from.requesttoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogEntriesRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntriesRequestMessage::CopyFrom(const LogEntriesRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntriesRequestMessage::IsInitialized() const {

  return true;
}

void LogEntriesRequestMessage::Swap(LogEntriesRequestMessage* other) {
  if (other != this) {
    std::swap(requesttoken_, other->requesttoken_);
    entriestobelogged_.Swap(&other->entriestobelogged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogEntriesRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogEntriesRequestMessage_descriptor_;
  metadata.reflection = LogEntriesRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogEntriesResponseMessage::kRequestTokenFieldNumber;
#endif  // !_MSC_VER

LogEntriesResponseMessage::LogEntriesResponseMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogEntriesResponseMessage::InitAsDefaultInstance() {
  requesttoken_ = const_cast< ::bcl::Guid*>(&::bcl::Guid::default_instance());
}

LogEntriesResponseMessage::LogEntriesResponseMessage(const LogEntriesResponseMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogEntriesResponseMessage::SharedCtor() {
  _cached_size_ = 0;
  requesttoken_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogEntriesResponseMessage::~LogEntriesResponseMessage() {
  SharedDtor();
}

void LogEntriesResponseMessage::SharedDtor() {
  if (this != default_instance_) {
    delete requesttoken_;
  }
}

void LogEntriesResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntriesResponseMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEntriesResponseMessage_descriptor_;
}

const LogEntriesResponseMessage& LogEntriesResponseMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  return *default_instance_;
}

LogEntriesResponseMessage* LogEntriesResponseMessage::default_instance_ = NULL;

LogEntriesResponseMessage* LogEntriesResponseMessage::New() const {
  return new LogEntriesResponseMessage;
}

void LogEntriesResponseMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_requesttoken()) {
      if (requesttoken_ != NULL) requesttoken_->::bcl::Guid::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogEntriesResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bcl.Guid RequestToken = 401787910;
      case 401787910: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requesttoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogEntriesResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      401787910, this->requesttoken(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogEntriesResponseMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        401787910, this->requesttoken(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogEntriesResponseMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bcl.Guid RequestToken = 401787910;
    if (has_requesttoken()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requesttoken());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntriesResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogEntriesResponseMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogEntriesResponseMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogEntriesResponseMessage::MergeFrom(const LogEntriesResponseMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttoken()) {
      mutable_requesttoken()->::bcl::Guid::MergeFrom(from.requesttoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogEntriesResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntriesResponseMessage::CopyFrom(const LogEntriesResponseMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntriesResponseMessage::IsInitialized() const {

  return true;
}

void LogEntriesResponseMessage::Swap(LogEntriesResponseMessage* other) {
  if (other != this) {
    std::swap(requesttoken_, other->requesttoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogEntriesResponseMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogEntriesResponseMessage_descriptor_;
  metadata.reflection = LogEntriesResponseMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogEntry::kOriginatorIdFieldNumber;
const int LogEntry::kEventIdFieldNumber;
const int LogEntry::kTimeStampFieldNumber;
const int LogEntry::kDescriptionFieldNumber;
const int LogEntry::kAdditionalInfoFieldNumber;
const int LogEntry::kSeverityFieldNumber;
const int LogEntry::kTypeFieldNumber;
#endif  // !_MSC_VER

LogEntry::LogEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogEntry::InitAsDefaultInstance() {
}

LogEntry::LogEntry(const LogEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogEntry::SharedCtor() {
  _cached_size_ = 0;
  originatorid_ = 0;
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_LONGLONG(0);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  additionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  severity_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogEntry::~LogEntry() {
  SharedDtor();
}

void LogEntry::SharedDtor() {
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (additionalinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete additionalinfo_;
  }
  if (this != default_instance_) {
  }
}

void LogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEntry_descriptor_;
}

const LogEntry& LogEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  return *default_instance_;
}

LogEntry* LogEntry::default_instance_ = NULL;

LogEntry* LogEntry::New() const {
  return new LogEntry;
}

void LogEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    originatorid_ = 0;
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::kEmptyString) {
        eventid_->clear();
      }
    }
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_additionalinfo()) {
      if (additionalinfo_ != &::google::protobuf::internal::kEmptyString) {
        additionalinfo_->clear();
      }
    }
    severity_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 OriginatorId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &originatorid_)));
          set_has_originatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_EventId;
        break;
      }

      // optional string EventId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EventId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TimeStamp;
        break;
      }

      // optional int64 TimeStamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Description;
        break;
      }

      // optional string Description = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_AdditionalInfo;
        break;
      }

      // optional string AdditionalInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AdditionalInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_additionalinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->additionalinfo().data(), this->additionalinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Severity;
        break;
      }

      // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.LoggingSeverityType Severity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Severity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Philips::Pmsmr::CoreServices::IPluginInfraServices::LoggingSeverityType_IsValid(value)) {
            set_severity(static_cast< ::Philips::Pmsmr::CoreServices::IPluginInfraServices::LoggingSeverityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Type;
        break;
      }

      // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.LoggingType Type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Philips::Pmsmr::CoreServices::IPluginInfraServices::LoggingType_IsValid(value)) {
            set_type(static_cast< ::Philips::Pmsmr::CoreServices::IPluginInfraServices::LoggingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 OriginatorId = 1;
  if (has_originatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->originatorid(), output);
  }

  // optional string EventId = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->eventid(), output);
  }

  // optional int64 TimeStamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // optional string Description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->description(), output);
  }

  // optional string AdditionalInfo = 5;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->additionalinfo(), output);
  }

  // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.LoggingSeverityType Severity = 6;
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->severity(), output);
  }

  // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.LoggingType Type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 OriginatorId = 1;
  if (has_originatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->originatorid(), target);
  }

  // optional string EventId = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->eventid(), target);
  }

  // optional int64 TimeStamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // optional string Description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // optional string AdditionalInfo = 5;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->additionalinfo(), target);
  }

  // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.LoggingSeverityType Severity = 6;
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->severity(), target);
  }

  // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.LoggingType Type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 OriginatorId = 1;
    if (has_originatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->originatorid());
    }

    // optional string EventId = 2;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

    // optional int64 TimeStamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional string Description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string AdditionalInfo = 5;
    if (has_additionalinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->additionalinfo());
    }

    // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.LoggingSeverityType Severity = 6;
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity());
    }

    // optional .Philips.Pmsmr.CoreServices.IPluginInfraServices.LoggingType Type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_originatorid()) {
      set_originatorid(from.originatorid());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_additionalinfo()) {
      set_additionalinfo(from.additionalinfo());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {

  return true;
}

void LogEntry::Swap(LogEntry* other) {
  if (other != this) {
    std::swap(originatorid_, other->originatorid_);
    std::swap(eventid_, other->eventid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(description_, other->description_);
    std::swap(additionalinfo_, other->additionalinfo_);
    std::swap(severity_, other->severity_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogEntry_descriptor_;
  metadata.reflection = LogEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PatientIdentification::kPatientIdFieldNumber;
const int PatientIdentification::kPatientNameFieldNumber;
#endif  // !_MSC_VER

PatientIdentification::PatientIdentification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PatientIdentification::InitAsDefaultInstance() {
}

PatientIdentification::PatientIdentification(const PatientIdentification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PatientIdentification::SharedCtor() {
  _cached_size_ = 0;
  patientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PatientIdentification::~PatientIdentification() {
  SharedDtor();
}

void PatientIdentification::SharedDtor() {
  if (patientid_ != &::google::protobuf::internal::kEmptyString) {
    delete patientid_;
  }
  if (patientname_ != &::google::protobuf::internal::kEmptyString) {
    delete patientname_;
  }
  if (this != default_instance_) {
  }
}

void PatientIdentification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PatientIdentification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PatientIdentification_descriptor_;
}

const PatientIdentification& PatientIdentification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  return *default_instance_;
}

PatientIdentification* PatientIdentification::default_instance_ = NULL;

PatientIdentification* PatientIdentification::New() const {
  return new PatientIdentification;
}

void PatientIdentification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_patientid()) {
      if (patientid_ != &::google::protobuf::internal::kEmptyString) {
        patientid_->clear();
      }
    }
    if (has_patientname()) {
      if (patientname_ != &::google::protobuf::internal::kEmptyString) {
        patientname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PatientIdentification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string PatientId = 99401512;
      case 99401512: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientid().data(), this->patientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2868674002)) goto parse_PatientName;
        break;
      }

      // optional string PatientName = 358584250;
      case 358584250: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PatientName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientname().data(), this->patientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PatientIdentification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string PatientId = 99401512;
  if (has_patientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientid().data(), this->patientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      99401512, this->patientid(), output);
  }

  // optional string PatientName = 358584250;
  if (has_patientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientname().data(), this->patientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      358584250, this->patientname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PatientIdentification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string PatientId = 99401512;
  if (has_patientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientid().data(), this->patientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        99401512, this->patientid(), target);
  }

  // optional string PatientName = 358584250;
  if (has_patientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientname().data(), this->patientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        358584250, this->patientname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PatientIdentification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string PatientId = 99401512;
    if (has_patientid()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientid());
    }

    // optional string PatientName = 358584250;
    if (has_patientname()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PatientIdentification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PatientIdentification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PatientIdentification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PatientIdentification::MergeFrom(const PatientIdentification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_patientid()) {
      set_patientid(from.patientid());
    }
    if (from.has_patientname()) {
      set_patientname(from.patientname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PatientIdentification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatientIdentification::CopyFrom(const PatientIdentification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatientIdentification::IsInitialized() const {

  return true;
}

void PatientIdentification::Swap(PatientIdentification* other) {
  if (other != this) {
    std::swap(patientid_, other->patientid_);
    std::swap(patientname_, other->patientname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PatientIdentification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PatientIdentification_descriptor_;
  metadata.reflection = PatientIdentification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryLicensesRequestMessage::kOptionsFieldNumber;
const int QueryLicensesRequestMessage::kRequestTokenFieldNumber;
#endif  // !_MSC_VER

QueryLicensesRequestMessage::QueryLicensesRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryLicensesRequestMessage::InitAsDefaultInstance() {
  requesttoken_ = const_cast< ::bcl::Guid*>(&::bcl::Guid::default_instance());
}

QueryLicensesRequestMessage::QueryLicensesRequestMessage(const QueryLicensesRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryLicensesRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  requesttoken_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryLicensesRequestMessage::~QueryLicensesRequestMessage() {
  SharedDtor();
}

void QueryLicensesRequestMessage::SharedDtor() {
  if (this != default_instance_) {
    delete requesttoken_;
  }
}

void QueryLicensesRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryLicensesRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryLicensesRequestMessage_descriptor_;
}

const QueryLicensesRequestMessage& QueryLicensesRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  return *default_instance_;
}

QueryLicensesRequestMessage* QueryLicensesRequestMessage::default_instance_ = NULL;

QueryLicensesRequestMessage* QueryLicensesRequestMessage::New() const {
  return new QueryLicensesRequestMessage;
}

void QueryLicensesRequestMessage::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_requesttoken()) {
      if (requesttoken_ != NULL) requesttoken_->::bcl::Guid::Clear();
    }
  }
  options_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryLicensesRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string Options = 89608230;
      case 89608230: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_options()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->options(this->options_size() - 1).data(),
            this->options(this->options_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(716865842)) goto parse_Options;
        if (input->ExpectTag(3214303282)) goto parse_RequestToken;
        break;
      }

      // optional .bcl.Guid RequestToken = 401787910;
      case 401787910: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RequestToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requesttoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryLicensesRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string Options = 89608230;
  for (int i = 0; i < this->options_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->options(i).data(), this->options(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      89608230, this->options(i), output);
  }

  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      401787910, this->requesttoken(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryLicensesRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string Options = 89608230;
  for (int i = 0; i < this->options_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->options(i).data(), this->options(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(89608230, this->options(i), target);
  }

  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        401787910, this->requesttoken(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryLicensesRequestMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .bcl.Guid RequestToken = 401787910;
    if (has_requesttoken()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requesttoken());
    }

  }
  // repeated string Options = 89608230;
  total_size += 5 * this->options_size();
  for (int i = 0; i < this->options_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->options(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryLicensesRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryLicensesRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryLicensesRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryLicensesRequestMessage::MergeFrom(const QueryLicensesRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  options_.MergeFrom(from.options_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_requesttoken()) {
      mutable_requesttoken()->::bcl::Guid::MergeFrom(from.requesttoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryLicensesRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryLicensesRequestMessage::CopyFrom(const QueryLicensesRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLicensesRequestMessage::IsInitialized() const {

  return true;
}

void QueryLicensesRequestMessage::Swap(QueryLicensesRequestMessage* other) {
  if (other != this) {
    options_.Swap(&other->options_);
    std::swap(requesttoken_, other->requesttoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryLicensesRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryLicensesRequestMessage_descriptor_;
  metadata.reflection = QueryLicensesRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryLicensesResponseMessage::kRequestTokenFieldNumber;
const int QueryLicensesResponseMessage::kLicensesFieldNumber;
#endif  // !_MSC_VER

QueryLicensesResponseMessage::QueryLicensesResponseMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryLicensesResponseMessage::InitAsDefaultInstance() {
  requesttoken_ = const_cast< ::bcl::Guid*>(&::bcl::Guid::default_instance());
}

QueryLicensesResponseMessage::QueryLicensesResponseMessage(const QueryLicensesResponseMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryLicensesResponseMessage::SharedCtor() {
  _cached_size_ = 0;
  requesttoken_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryLicensesResponseMessage::~QueryLicensesResponseMessage() {
  SharedDtor();
}

void QueryLicensesResponseMessage::SharedDtor() {
  if (this != default_instance_) {
    delete requesttoken_;
  }
}

void QueryLicensesResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryLicensesResponseMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryLicensesResponseMessage_descriptor_;
}

const QueryLicensesResponseMessage& QueryLicensesResponseMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  return *default_instance_;
}

QueryLicensesResponseMessage* QueryLicensesResponseMessage::default_instance_ = NULL;

QueryLicensesResponseMessage* QueryLicensesResponseMessage::New() const {
  return new QueryLicensesResponseMessage;
}

void QueryLicensesResponseMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_requesttoken()) {
      if (requesttoken_ != NULL) requesttoken_->::bcl::Guid::Clear();
    }
  }
  licenses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryLicensesResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bcl.Guid RequestToken = 401787910;
      case 401787910: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requesttoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4191749066)) goto parse_Licenses;
        break;
      }

      // repeated .Philips.Pmsmr.CoreServices.IPluginInfraServices.LicenseInformation Licenses = 523968633;
      case 523968633: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Licenses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_licenses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4191749066)) goto parse_Licenses;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryLicensesResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      401787910, this->requesttoken(), output);
  }

  // repeated .Philips.Pmsmr.CoreServices.IPluginInfraServices.LicenseInformation Licenses = 523968633;
  for (int i = 0; i < this->licenses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      523968633, this->licenses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryLicensesResponseMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        401787910, this->requesttoken(), target);
  }

  // repeated .Philips.Pmsmr.CoreServices.IPluginInfraServices.LicenseInformation Licenses = 523968633;
  for (int i = 0; i < this->licenses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        523968633, this->licenses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryLicensesResponseMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bcl.Guid RequestToken = 401787910;
    if (has_requesttoken()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requesttoken());
    }

  }
  // repeated .Philips.Pmsmr.CoreServices.IPluginInfraServices.LicenseInformation Licenses = 523968633;
  total_size += 5 * this->licenses_size();
  for (int i = 0; i < this->licenses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->licenses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryLicensesResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryLicensesResponseMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryLicensesResponseMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryLicensesResponseMessage::MergeFrom(const QueryLicensesResponseMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  licenses_.MergeFrom(from.licenses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttoken()) {
      mutable_requesttoken()->::bcl::Guid::MergeFrom(from.requesttoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryLicensesResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryLicensesResponseMessage::CopyFrom(const QueryLicensesResponseMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLicensesResponseMessage::IsInitialized() const {

  return true;
}

void QueryLicensesResponseMessage::Swap(QueryLicensesResponseMessage* other) {
  if (other != this) {
    std::swap(requesttoken_, other->requesttoken_);
    licenses_.Swap(&other->licenses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryLicensesResponseMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryLicensesResponseMessage_descriptor_;
  metadata.reflection = QueryLicensesResponseMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryVersionRequestMessage::kRequestTokenFieldNumber;
#endif  // !_MSC_VER

QueryVersionRequestMessage::QueryVersionRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryVersionRequestMessage::InitAsDefaultInstance() {
  requesttoken_ = const_cast< ::bcl::Guid*>(&::bcl::Guid::default_instance());
}

QueryVersionRequestMessage::QueryVersionRequestMessage(const QueryVersionRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryVersionRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  requesttoken_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryVersionRequestMessage::~QueryVersionRequestMessage() {
  SharedDtor();
}

void QueryVersionRequestMessage::SharedDtor() {
  if (this != default_instance_) {
    delete requesttoken_;
  }
}

void QueryVersionRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryVersionRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryVersionRequestMessage_descriptor_;
}

const QueryVersionRequestMessage& QueryVersionRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  return *default_instance_;
}

QueryVersionRequestMessage* QueryVersionRequestMessage::default_instance_ = NULL;

QueryVersionRequestMessage* QueryVersionRequestMessage::New() const {
  return new QueryVersionRequestMessage;
}

void QueryVersionRequestMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_requesttoken()) {
      if (requesttoken_ != NULL) requesttoken_->::bcl::Guid::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryVersionRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bcl.Guid RequestToken = 401787910;
      case 401787910: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requesttoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryVersionRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      401787910, this->requesttoken(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryVersionRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        401787910, this->requesttoken(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryVersionRequestMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bcl.Guid RequestToken = 401787910;
    if (has_requesttoken()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requesttoken());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryVersionRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryVersionRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryVersionRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryVersionRequestMessage::MergeFrom(const QueryVersionRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttoken()) {
      mutable_requesttoken()->::bcl::Guid::MergeFrom(from.requesttoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryVersionRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryVersionRequestMessage::CopyFrom(const QueryVersionRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryVersionRequestMessage::IsInitialized() const {

  return true;
}

void QueryVersionRequestMessage::Swap(QueryVersionRequestMessage* other) {
  if (other != this) {
    std::swap(requesttoken_, other->requesttoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryVersionRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryVersionRequestMessage_descriptor_;
  metadata.reflection = QueryVersionRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryVersionResponseMessage::kProductModelFieldNumber;
const int QueryVersionResponseMessage::kRequestTokenFieldNumber;
const int QueryVersionResponseMessage::kVersionFieldNumber;
const int QueryVersionResponseMessage::kSystemTypeFieldNumber;
#endif  // !_MSC_VER

QueryVersionResponseMessage::QueryVersionResponseMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryVersionResponseMessage::InitAsDefaultInstance() {
  requesttoken_ = const_cast< ::bcl::Guid*>(&::bcl::Guid::default_instance());
}

QueryVersionResponseMessage::QueryVersionResponseMessage(const QueryVersionResponseMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryVersionResponseMessage::SharedCtor() {
  _cached_size_ = 0;
  productmodel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requesttoken_ = NULL;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  systemtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryVersionResponseMessage::~QueryVersionResponseMessage() {
  SharedDtor();
}

void QueryVersionResponseMessage::SharedDtor() {
  if (productmodel_ != &::google::protobuf::internal::kEmptyString) {
    delete productmodel_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (systemtype_ != &::google::protobuf::internal::kEmptyString) {
    delete systemtype_;
  }
  if (this != default_instance_) {
    delete requesttoken_;
  }
}

void QueryVersionResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryVersionResponseMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryVersionResponseMessage_descriptor_;
}

const QueryVersionResponseMessage& QueryVersionResponseMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  return *default_instance_;
}

QueryVersionResponseMessage* QueryVersionResponseMessage::default_instance_ = NULL;

QueryVersionResponseMessage* QueryVersionResponseMessage::New() const {
  return new QueryVersionResponseMessage;
}

void QueryVersionResponseMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_productmodel()) {
      if (productmodel_ != &::google::protobuf::internal::kEmptyString) {
        productmodel_->clear();
      }
    }
    if (has_requesttoken()) {
      if (requesttoken_ != NULL) requesttoken_->::bcl::Guid::Clear();
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_systemtype()) {
      if (systemtype_ != &::google::protobuf::internal::kEmptyString) {
        systemtype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryVersionResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ProductModel = 362839330;
      case 362839330: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productmodel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productmodel().data(), this->productmodel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3214303282)) goto parse_RequestToken;
        break;
      }

      // optional .bcl.Guid RequestToken = 401787910;
      case 401787910: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RequestToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requesttoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3570154722)) goto parse_Version;
        break;
      }

      // optional string Version = 446269340;
      case 446269340: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4162939514)) goto parse_SystemType;
        break;
      }

      // optional string SystemType = 520367439;
      case 520367439: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SystemType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_systemtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->systemtype().data(), this->systemtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryVersionResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ProductModel = 362839330;
  if (has_productmodel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productmodel().data(), this->productmodel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      362839330, this->productmodel(), output);
  }

  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      401787910, this->requesttoken(), output);
  }

  // optional string Version = 446269340;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      446269340, this->version(), output);
  }

  // optional string SystemType = 520367439;
  if (has_systemtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->systemtype().data(), this->systemtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      520367439, this->systemtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryVersionResponseMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ProductModel = 362839330;
  if (has_productmodel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productmodel().data(), this->productmodel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        362839330, this->productmodel(), target);
  }

  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        401787910, this->requesttoken(), target);
  }

  // optional string Version = 446269340;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        446269340, this->version(), target);
  }

  // optional string SystemType = 520367439;
  if (has_systemtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->systemtype().data(), this->systemtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        520367439, this->systemtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryVersionResponseMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ProductModel = 362839330;
    if (has_productmodel()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productmodel());
    }

    // optional .bcl.Guid RequestToken = 401787910;
    if (has_requesttoken()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requesttoken());
    }

    // optional string Version = 446269340;
    if (has_version()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string SystemType = 520367439;
    if (has_systemtype()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->systemtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryVersionResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryVersionResponseMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryVersionResponseMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryVersionResponseMessage::MergeFrom(const QueryVersionResponseMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productmodel()) {
      set_productmodel(from.productmodel());
    }
    if (from.has_requesttoken()) {
      mutable_requesttoken()->::bcl::Guid::MergeFrom(from.requesttoken());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_systemtype()) {
      set_systemtype(from.systemtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryVersionResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryVersionResponseMessage::CopyFrom(const QueryVersionResponseMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryVersionResponseMessage::IsInitialized() const {

  return true;
}

void QueryVersionResponseMessage::Swap(QueryVersionResponseMessage* other) {
  if (other != this) {
    std::swap(productmodel_, other->productmodel_);
    std::swap(requesttoken_, other->requesttoken_);
    std::swap(version_, other->version_);
    std::swap(systemtype_, other->systemtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryVersionResponseMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryVersionResponseMessage_descriptor_;
  metadata.reflection = QueryVersionResponseMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreInstanceRequestMessage::kIndexNumberFieldNumber;
const int StoreInstanceRequestMessage::kDicomInstanceFieldNumber;
const int StoreInstanceRequestMessage::kRequestTokenFieldNumber;
#endif  // !_MSC_VER

StoreInstanceRequestMessage::StoreInstanceRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreInstanceRequestMessage::InitAsDefaultInstance() {
  requesttoken_ = const_cast< ::bcl::Guid*>(&::bcl::Guid::default_instance());
}

StoreInstanceRequestMessage::StoreInstanceRequestMessage(const StoreInstanceRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreInstanceRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  indexnumber_ = 0;
  dicominstance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requesttoken_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreInstanceRequestMessage::~StoreInstanceRequestMessage() {
  SharedDtor();
}

void StoreInstanceRequestMessage::SharedDtor() {
  if (dicominstance_ != &::google::protobuf::internal::kEmptyString) {
    delete dicominstance_;
  }
  if (this != default_instance_) {
    delete requesttoken_;
  }
}

void StoreInstanceRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreInstanceRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreInstanceRequestMessage_descriptor_;
}

const StoreInstanceRequestMessage& StoreInstanceRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  return *default_instance_;
}

StoreInstanceRequestMessage* StoreInstanceRequestMessage::default_instance_ = NULL;

StoreInstanceRequestMessage* StoreInstanceRequestMessage::New() const {
  return new StoreInstanceRequestMessage;
}

void StoreInstanceRequestMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    indexnumber_ = 0;
    if (has_dicominstance()) {
      if (dicominstance_ != &::google::protobuf::internal::kEmptyString) {
        dicominstance_->clear();
      }
    }
    if (has_requesttoken()) {
      if (requesttoken_ != NULL) requesttoken_->::bcl::Guid::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreInstanceRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 IndexNumber = 71782239;
      case 71782239: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &indexnumber_)));
          set_has_indexnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1791996218)) goto parse_DicomInstance;
        break;
      }

      // optional bytes DicomInstance = 223999527;
      case 223999527: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DicomInstance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dicominstance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3214303282)) goto parse_RequestToken;
        break;
      }

      // optional .bcl.Guid RequestToken = 401787910;
      case 401787910: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RequestToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requesttoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreInstanceRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 IndexNumber = 71782239;
  if (has_indexnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71782239, this->indexnumber(), output);
  }

  // optional bytes DicomInstance = 223999527;
  if (has_dicominstance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      223999527, this->dicominstance(), output);
  }

  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      401787910, this->requesttoken(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreInstanceRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 IndexNumber = 71782239;
  if (has_indexnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71782239, this->indexnumber(), target);
  }

  // optional bytes DicomInstance = 223999527;
  if (has_dicominstance()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        223999527, this->dicominstance(), target);
  }

  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        401787910, this->requesttoken(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreInstanceRequestMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 IndexNumber = 71782239;
    if (has_indexnumber()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->indexnumber());
    }

    // optional bytes DicomInstance = 223999527;
    if (has_dicominstance()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dicominstance());
    }

    // optional .bcl.Guid RequestToken = 401787910;
    if (has_requesttoken()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requesttoken());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreInstanceRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreInstanceRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreInstanceRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreInstanceRequestMessage::MergeFrom(const StoreInstanceRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_indexnumber()) {
      set_indexnumber(from.indexnumber());
    }
    if (from.has_dicominstance()) {
      set_dicominstance(from.dicominstance());
    }
    if (from.has_requesttoken()) {
      mutable_requesttoken()->::bcl::Guid::MergeFrom(from.requesttoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreInstanceRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreInstanceRequestMessage::CopyFrom(const StoreInstanceRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreInstanceRequestMessage::IsInitialized() const {

  return true;
}

void StoreInstanceRequestMessage::Swap(StoreInstanceRequestMessage* other) {
  if (other != this) {
    std::swap(indexnumber_, other->indexnumber_);
    std::swap(dicominstance_, other->dicominstance_);
    std::swap(requesttoken_, other->requesttoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreInstanceRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreInstanceRequestMessage_descriptor_;
  metadata.reflection = StoreInstanceRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreInstanceResponseMessage::kRequestTokenFieldNumber;
#endif  // !_MSC_VER

StoreInstanceResponseMessage::StoreInstanceResponseMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreInstanceResponseMessage::InitAsDefaultInstance() {
  requesttoken_ = const_cast< ::bcl::Guid*>(&::bcl::Guid::default_instance());
}

StoreInstanceResponseMessage::StoreInstanceResponseMessage(const StoreInstanceResponseMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreInstanceResponseMessage::SharedCtor() {
  _cached_size_ = 0;
  requesttoken_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreInstanceResponseMessage::~StoreInstanceResponseMessage() {
  SharedDtor();
}

void StoreInstanceResponseMessage::SharedDtor() {
  if (this != default_instance_) {
    delete requesttoken_;
  }
}

void StoreInstanceResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreInstanceResponseMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreInstanceResponseMessage_descriptor_;
}

const StoreInstanceResponseMessage& StoreInstanceResponseMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Philips_2ePmsmr_2eCoreServices_2eIPluginInfraServices_2eproto();
  return *default_instance_;
}

StoreInstanceResponseMessage* StoreInstanceResponseMessage::default_instance_ = NULL;

StoreInstanceResponseMessage* StoreInstanceResponseMessage::New() const {
  return new StoreInstanceResponseMessage;
}

void StoreInstanceResponseMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_requesttoken()) {
      if (requesttoken_ != NULL) requesttoken_->::bcl::Guid::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreInstanceResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bcl.Guid RequestToken = 401787910;
      case 401787910: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requesttoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreInstanceResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      401787910, this->requesttoken(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreInstanceResponseMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bcl.Guid RequestToken = 401787910;
  if (has_requesttoken()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        401787910, this->requesttoken(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreInstanceResponseMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bcl.Guid RequestToken = 401787910;
    if (has_requesttoken()) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requesttoken());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreInstanceResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreInstanceResponseMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreInstanceResponseMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreInstanceResponseMessage::MergeFrom(const StoreInstanceResponseMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttoken()) {
      mutable_requesttoken()->::bcl::Guid::MergeFrom(from.requesttoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreInstanceResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreInstanceResponseMessage::CopyFrom(const StoreInstanceResponseMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreInstanceResponseMessage::IsInitialized() const {

  return true;
}

void StoreInstanceResponseMessage::Swap(StoreInstanceResponseMessage* other) {
  if (other != this) {
    std::swap(requesttoken_, other->requesttoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreInstanceResponseMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreInstanceResponseMessage_descriptor_;
  metadata.reflection = StoreInstanceResponseMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace IPluginInfraServices
}  // namespace CoreServices
}  // namespace Pmsmr
}  // namespace Philips

// @@protoc_insertion_point(global_scope)
