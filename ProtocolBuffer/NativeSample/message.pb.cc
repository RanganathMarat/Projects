// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MRSystem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MRSystem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompanyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompanyInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MST_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  MRSystem_descriptor_ = file->message_type(0);
  static const int MRSystem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRSystem, nrofhreceivers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRSystem, productname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRSystem, mainsystemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRSystem, mnreceiverssupported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRSystem, companyinfo_),
  };
  MRSystem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MRSystem_descriptor_,
      MRSystem::default_instance_,
      MRSystem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRSystem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRSystem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MRSystem));
  CompanyInfo_descriptor_ = file->message_type(1);
  static const int CompanyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, date_),
  };
  CompanyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompanyInfo_descriptor_,
      CompanyInfo::default_instance_,
      CompanyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompanyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompanyInfo));
  MST_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MRSystem_descriptor_, &MRSystem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompanyInfo_descriptor_, &CompanyInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete MRSystem::default_instance_;
  delete MRSystem_reflection_;
  delete CompanyInfo::default_instance_;
  delete CompanyInfo_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\"\226\001\n\010MRSystem\022\026\n\016nrOfHRec"
    "eivers\030\001 \002(\005\022\023\n\013productName\030\002 \002(\t\022\034\n\016mai"
    "nSystemType\030\003 \002(\0162\004.MST\022\034\n\024MNReceiversSu"
    "pported\030\004 \001(\010\022!\n\013companyInfo\030\005 \003(\0132\014.Com"
    "panyInfo\")\n\013CompanyInfo\022\014\n\004name\030\001 \002(\t\022\014\n"
    "\004date\030\002 \002(\t*!\n\003MST\022\007\n\003T15\020\000\022\007\n\003T30\020\001\022\010\n\004"
    "WA15\020\002", 246);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  MRSystem::default_instance_ = new MRSystem();
  CompanyInfo::default_instance_ = new CompanyInfo();
  MRSystem::default_instance_->InitAsDefaultInstance();
  CompanyInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;
const ::google::protobuf::EnumDescriptor* MST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MST_descriptor_;
}
bool MST_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MRSystem::kNrOfHReceiversFieldNumber;
const int MRSystem::kProductNameFieldNumber;
const int MRSystem::kMainSystemTypeFieldNumber;
const int MRSystem::kMNReceiversSupportedFieldNumber;
const int MRSystem::kCompanyInfoFieldNumber;
#endif  // !_MSC_VER

MRSystem::MRSystem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MRSystem::InitAsDefaultInstance() {
}

MRSystem::MRSystem(const MRSystem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MRSystem::SharedCtor() {
  _cached_size_ = 0;
  nrofhreceivers_ = 0;
  productname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mainsystemtype_ = 0;
  mnreceiverssupported_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MRSystem::~MRSystem() {
  SharedDtor();
}

void MRSystem::SharedDtor() {
  if (productname_ != &::google::protobuf::internal::kEmptyString) {
    delete productname_;
  }
  if (this != default_instance_) {
  }
}

void MRSystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MRSystem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MRSystem_descriptor_;
}

const MRSystem& MRSystem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

MRSystem* MRSystem::default_instance_ = NULL;

MRSystem* MRSystem::New() const {
  return new MRSystem;
}

void MRSystem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nrofhreceivers_ = 0;
    if (has_productname()) {
      if (productname_ != &::google::protobuf::internal::kEmptyString) {
        productname_->clear();
      }
    }
    mainsystemtype_ = 0;
    mnreceiverssupported_ = false;
  }
  companyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MRSystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nrOfHReceivers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nrofhreceivers_)));
          set_has_nrofhreceivers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_productName;
        break;
      }

      // required string productName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productname().data(), this->productname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mainSystemType;
        break;
      }

      // required .MST mainSystemType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mainSystemType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MST_IsValid(value)) {
            set_mainsystemtype(static_cast< ::MST >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MNReceiversSupported;
        break;
      }

      // optional bool MNReceiversSupported = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MNReceiversSupported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mnreceiverssupported_)));
          set_has_mnreceiverssupported();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_companyInfo;
        break;
      }

      // repeated .CompanyInfo companyInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_companyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_companyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_companyInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MRSystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nrOfHReceivers = 1;
  if (has_nrofhreceivers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nrofhreceivers(), output);
  }

  // required string productName = 2;
  if (has_productname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productname().data(), this->productname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->productname(), output);
  }

  // required .MST mainSystemType = 3;
  if (has_mainsystemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mainsystemtype(), output);
  }

  // optional bool MNReceiversSupported = 4;
  if (has_mnreceiverssupported()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->mnreceiverssupported(), output);
  }

  // repeated .CompanyInfo companyInfo = 5;
  for (int i = 0; i < this->companyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->companyinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MRSystem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nrOfHReceivers = 1;
  if (has_nrofhreceivers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nrofhreceivers(), target);
  }

  // required string productName = 2;
  if (has_productname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productname().data(), this->productname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->productname(), target);
  }

  // required .MST mainSystemType = 3;
  if (has_mainsystemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mainsystemtype(), target);
  }

  // optional bool MNReceiversSupported = 4;
  if (has_mnreceiverssupported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->mnreceiverssupported(), target);
  }

  // repeated .CompanyInfo companyInfo = 5;
  for (int i = 0; i < this->companyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->companyinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MRSystem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nrOfHReceivers = 1;
    if (has_nrofhreceivers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrofhreceivers());
    }

    // required string productName = 2;
    if (has_productname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productname());
    }

    // required .MST mainSystemType = 3;
    if (has_mainsystemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mainsystemtype());
    }

    // optional bool MNReceiversSupported = 4;
    if (has_mnreceiverssupported()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CompanyInfo companyInfo = 5;
  total_size += 1 * this->companyinfo_size();
  for (int i = 0; i < this->companyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->companyinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MRSystem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MRSystem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MRSystem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MRSystem::MergeFrom(const MRSystem& from) {
  GOOGLE_CHECK_NE(&from, this);
  companyinfo_.MergeFrom(from.companyinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nrofhreceivers()) {
      set_nrofhreceivers(from.nrofhreceivers());
    }
    if (from.has_productname()) {
      set_productname(from.productname());
    }
    if (from.has_mainsystemtype()) {
      set_mainsystemtype(from.mainsystemtype());
    }
    if (from.has_mnreceiverssupported()) {
      set_mnreceiverssupported(from.mnreceiverssupported());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MRSystem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MRSystem::CopyFrom(const MRSystem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MRSystem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < companyinfo_size(); i++) {
    if (!this->companyinfo(i).IsInitialized()) return false;
  }
  return true;
}

void MRSystem::Swap(MRSystem* other) {
  if (other != this) {
    std::swap(nrofhreceivers_, other->nrofhreceivers_);
    std::swap(productname_, other->productname_);
    std::swap(mainsystemtype_, other->mainsystemtype_);
    std::swap(mnreceiverssupported_, other->mnreceiverssupported_);
    companyinfo_.Swap(&other->companyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MRSystem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MRSystem_descriptor_;
  metadata.reflection = MRSystem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompanyInfo::kNameFieldNumber;
const int CompanyInfo::kDateFieldNumber;
#endif  // !_MSC_VER

CompanyInfo::CompanyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompanyInfo::InitAsDefaultInstance() {
}

CompanyInfo::CompanyInfo(const CompanyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompanyInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompanyInfo::~CompanyInfo() {
  SharedDtor();
}

void CompanyInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (this != default_instance_) {
  }
}

void CompanyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompanyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompanyInfo_descriptor_;
}

const CompanyInfo& CompanyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CompanyInfo* CompanyInfo::default_instance_ = NULL;

CompanyInfo* CompanyInfo::New() const {
  return new CompanyInfo;
}

void CompanyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::kEmptyString) {
        date_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompanyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_date;
        break;
      }

      // required string date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompanyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompanyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompanyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompanyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompanyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompanyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompanyInfo::MergeFrom(const CompanyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompanyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompanyInfo::CopyFrom(const CompanyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompanyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CompanyInfo::Swap(CompanyInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(date_, other->date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompanyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompanyInfo_descriptor_;
  metadata.reflection = CompanyInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
