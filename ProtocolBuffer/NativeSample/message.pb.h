// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class MRSystem;
class CompanyInfo;

enum MST {
  T15 = 0,
  T30 = 1,
  WA15 = 2
};
bool MST_IsValid(int value);
const MST MST_MIN = T15;
const MST MST_MAX = WA15;
const int MST_ARRAYSIZE = MST_MAX + 1;

const ::google::protobuf::EnumDescriptor* MST_descriptor();
inline const ::std::string& MST_Name(MST value) {
  return ::google::protobuf::internal::NameOfEnum(
    MST_descriptor(), value);
}
inline bool MST_Parse(
    const ::std::string& name, MST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MST>(
    MST_descriptor(), name, value);
}
// ===================================================================

class MRSystem : public ::google::protobuf::Message {
 public:
  MRSystem();
  virtual ~MRSystem();

  MRSystem(const MRSystem& from);

  inline MRSystem& operator=(const MRSystem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MRSystem& default_instance();

  void Swap(MRSystem* other);

  // implements Message ----------------------------------------------

  MRSystem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MRSystem& from);
  void MergeFrom(const MRSystem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 nrOfHReceivers = 1;
  inline bool has_nrofhreceivers() const;
  inline void clear_nrofhreceivers();
  static const int kNrOfHReceiversFieldNumber = 1;
  inline ::google::protobuf::int32 nrofhreceivers() const;
  inline void set_nrofhreceivers(::google::protobuf::int32 value);

  // required string productName = 2;
  inline bool has_productname() const;
  inline void clear_productname();
  static const int kProductNameFieldNumber = 2;
  inline const ::std::string& productname() const;
  inline void set_productname(const ::std::string& value);
  inline void set_productname(const char* value);
  inline void set_productname(const char* value, size_t size);
  inline ::std::string* mutable_productname();
  inline ::std::string* release_productname();
  inline void set_allocated_productname(::std::string* productname);

  // required .MST mainSystemType = 3;
  inline bool has_mainsystemtype() const;
  inline void clear_mainsystemtype();
  static const int kMainSystemTypeFieldNumber = 3;
  inline ::MST mainsystemtype() const;
  inline void set_mainsystemtype(::MST value);

  // optional bool MNReceiversSupported = 4;
  inline bool has_mnreceiverssupported() const;
  inline void clear_mnreceiverssupported();
  static const int kMNReceiversSupportedFieldNumber = 4;
  inline bool mnreceiverssupported() const;
  inline void set_mnreceiverssupported(bool value);

  // repeated .CompanyInfo companyInfo = 5;
  inline int companyinfo_size() const;
  inline void clear_companyinfo();
  static const int kCompanyInfoFieldNumber = 5;
  inline const ::CompanyInfo& companyinfo(int index) const;
  inline ::CompanyInfo* mutable_companyinfo(int index);
  inline ::CompanyInfo* add_companyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::CompanyInfo >&
      companyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::CompanyInfo >*
      mutable_companyinfo();

  // @@protoc_insertion_point(class_scope:MRSystem)
 private:
  inline void set_has_nrofhreceivers();
  inline void clear_has_nrofhreceivers();
  inline void set_has_productname();
  inline void clear_has_productname();
  inline void set_has_mainsystemtype();
  inline void clear_has_mainsystemtype();
  inline void set_has_mnreceiverssupported();
  inline void clear_has_mnreceiverssupported();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* productname_;
  ::google::protobuf::int32 nrofhreceivers_;
  int mainsystemtype_;
  ::google::protobuf::RepeatedPtrField< ::CompanyInfo > companyinfo_;
  bool mnreceiverssupported_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static MRSystem* default_instance_;
};
// -------------------------------------------------------------------

class CompanyInfo : public ::google::protobuf::Message {
 public:
  CompanyInfo();
  virtual ~CompanyInfo();

  CompanyInfo(const CompanyInfo& from);

  inline CompanyInfo& operator=(const CompanyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompanyInfo& default_instance();

  void Swap(CompanyInfo* other);

  // implements Message ----------------------------------------------

  CompanyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompanyInfo& from);
  void MergeFrom(const CompanyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string date = 2;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 2;
  inline const ::std::string& date() const;
  inline void set_date(const ::std::string& value);
  inline void set_date(const char* value);
  inline void set_date(const char* value, size_t size);
  inline ::std::string* mutable_date();
  inline ::std::string* release_date();
  inline void set_allocated_date(::std::string* date);

  // @@protoc_insertion_point(class_scope:CompanyInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_date();
  inline void clear_has_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* date_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static CompanyInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// MRSystem

// required int32 nrOfHReceivers = 1;
inline bool MRSystem::has_nrofhreceivers() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MRSystem::set_has_nrofhreceivers() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MRSystem::clear_has_nrofhreceivers() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MRSystem::clear_nrofhreceivers() {
  nrofhreceivers_ = 0;
  clear_has_nrofhreceivers();
}
inline ::google::protobuf::int32 MRSystem::nrofhreceivers() const {
  return nrofhreceivers_;
}
inline void MRSystem::set_nrofhreceivers(::google::protobuf::int32 value) {
  set_has_nrofhreceivers();
  nrofhreceivers_ = value;
}

// required string productName = 2;
inline bool MRSystem::has_productname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MRSystem::set_has_productname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MRSystem::clear_has_productname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MRSystem::clear_productname() {
  if (productname_ != &::google::protobuf::internal::kEmptyString) {
    productname_->clear();
  }
  clear_has_productname();
}
inline const ::std::string& MRSystem::productname() const {
  return *productname_;
}
inline void MRSystem::set_productname(const ::std::string& value) {
  set_has_productname();
  if (productname_ == &::google::protobuf::internal::kEmptyString) {
    productname_ = new ::std::string;
  }
  productname_->assign(value);
}
inline void MRSystem::set_productname(const char* value) {
  set_has_productname();
  if (productname_ == &::google::protobuf::internal::kEmptyString) {
    productname_ = new ::std::string;
  }
  productname_->assign(value);
}
inline void MRSystem::set_productname(const char* value, size_t size) {
  set_has_productname();
  if (productname_ == &::google::protobuf::internal::kEmptyString) {
    productname_ = new ::std::string;
  }
  productname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MRSystem::mutable_productname() {
  set_has_productname();
  if (productname_ == &::google::protobuf::internal::kEmptyString) {
    productname_ = new ::std::string;
  }
  return productname_;
}
inline ::std::string* MRSystem::release_productname() {
  clear_has_productname();
  if (productname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = productname_;
    productname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MRSystem::set_allocated_productname(::std::string* productname) {
  if (productname_ != &::google::protobuf::internal::kEmptyString) {
    delete productname_;
  }
  if (productname) {
    set_has_productname();
    productname_ = productname;
  } else {
    clear_has_productname();
    productname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .MST mainSystemType = 3;
inline bool MRSystem::has_mainsystemtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MRSystem::set_has_mainsystemtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MRSystem::clear_has_mainsystemtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MRSystem::clear_mainsystemtype() {
  mainsystemtype_ = 0;
  clear_has_mainsystemtype();
}
inline ::MST MRSystem::mainsystemtype() const {
  return static_cast< ::MST >(mainsystemtype_);
}
inline void MRSystem::set_mainsystemtype(::MST value) {
  assert(::MST_IsValid(value));
  set_has_mainsystemtype();
  mainsystemtype_ = value;
}

// optional bool MNReceiversSupported = 4;
inline bool MRSystem::has_mnreceiverssupported() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MRSystem::set_has_mnreceiverssupported() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MRSystem::clear_has_mnreceiverssupported() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MRSystem::clear_mnreceiverssupported() {
  mnreceiverssupported_ = false;
  clear_has_mnreceiverssupported();
}
inline bool MRSystem::mnreceiverssupported() const {
  return mnreceiverssupported_;
}
inline void MRSystem::set_mnreceiverssupported(bool value) {
  set_has_mnreceiverssupported();
  mnreceiverssupported_ = value;
}

// repeated .CompanyInfo companyInfo = 5;
inline int MRSystem::companyinfo_size() const {
  return companyinfo_.size();
}
inline void MRSystem::clear_companyinfo() {
  companyinfo_.Clear();
}
inline const ::CompanyInfo& MRSystem::companyinfo(int index) const {
  return companyinfo_.Get(index);
}
inline ::CompanyInfo* MRSystem::mutable_companyinfo(int index) {
  return companyinfo_.Mutable(index);
}
inline ::CompanyInfo* MRSystem::add_companyinfo() {
  return companyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CompanyInfo >&
MRSystem::companyinfo() const {
  return companyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::CompanyInfo >*
MRSystem::mutable_companyinfo() {
  return &companyinfo_;
}

// -------------------------------------------------------------------

// CompanyInfo

// required string name = 1;
inline bool CompanyInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompanyInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompanyInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompanyInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CompanyInfo::name() const {
  return *name_;
}
inline void CompanyInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CompanyInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CompanyInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CompanyInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CompanyInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CompanyInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string date = 2;
inline bool CompanyInfo::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CompanyInfo::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CompanyInfo::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CompanyInfo::clear_date() {
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    date_->clear();
  }
  clear_has_date();
}
inline const ::std::string& CompanyInfo::date() const {
  return *date_;
}
inline void CompanyInfo::set_date(const ::std::string& value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(value);
}
inline void CompanyInfo::set_date(const char* value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(value);
}
inline void CompanyInfo::set_date(const char* value, size_t size) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CompanyInfo::mutable_date() {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  return date_;
}
inline ::std::string* CompanyInfo::release_date() {
  clear_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = date_;
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CompanyInfo::set_allocated_date(::std::string* date) {
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (date) {
    set_has_date();
    date_ = date;
  } else {
    clear_has_date();
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MST>() {
  return ::MST_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
